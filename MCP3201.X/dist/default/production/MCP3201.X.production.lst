

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Jan  1 12:23:15 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           	psect	idataCOMRAM
    65  001D92                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _ackCharacter
    69  001D92  5B                 	db	low STR_5
    70  001D93  08                 	db	high STR_5
    71                           
    72                           ;initializer for _blockCharacter
    73  001D94  5F                 	db	low STR_4
    74  001D95  08                 	db	high STR_4
    75                           
    76                           ;initializer for _startCharacter
    77  001D96  8F                 	db	low STR_1
    78  001D97  08                 	db	high STR_1
    79                           
    80                           ;initializer for _stopCharacter
    81  001D98  8D                 	db	low STR_2
    82  001D99  08                 	db	high STR_2
    83                           
    84                           	psect	idataBANK0
    85  001DA2                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _messageCharacter
    89  001DA2  63                 	db	low STR_3
    90  001DA3  08                 	db	high STR_3
    91                           
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     _dpowers:
    97                           	opt stack 0
    98  000801  0001               	dw	1
    99  000803  000A               	dw	10
   100  000805  0064               	dw	100
   101  000807  03E8               	dw	1000
   102  000809  2710               	dw	10000
   103  00080B                     __end_of_dpowers:
   104                           	opt stack 0
   105  00080B                     _hexpowers:
   106                           	opt stack 0
   107  00080B  0001               	dw	1
   108  00080D  0010               	dw	16
   109  00080F  0100               	dw	256
   110  000811  1000               	dw	4096
   111  000813                     __end_of_hexpowers:
   112                           	opt stack 0
   113  000813                     STR_30:
   114  000813  44                 	db	68	;'D'
   115  000814  69                 	db	105	;'i'
   116  000815  64                 	db	100	;'d'
   117  000816  20                 	db	32
   118  000817  6E                 	db	110	;'n'
   119  000818  6F                 	db	111	;'o'
   120  000819  74                 	db	116	;'t'
   121  00081A  20                 	db	32
   122  00081B  75                 	db	117	;'u'
   123  00081C  6E                 	db	110	;'n'
   124  00081D  64                 	db	100	;'d'
   125  00081E  65                 	db	101	;'e'
   126  00081F  72                 	db	114	;'r'
   127  000820  73                 	db	115	;'s'
   128  000821  74                 	db	116	;'t'
   129  000822  61                 	db	97	;'a'
   130  000823  6E                 	db	110	;'n'
   131  000824  64                 	db	100	;'d'
   132  000825  20                 	db	32
   133  000826  74                 	db	116	;'t'
   134  000827  68                 	db	104	;'h'
   135  000828  61                 	db	97	;'a'
   136  000829  74                 	db	116	;'t'
   137  00082A  20                 	db	32
   138  00082B  63                 	db	99	;'c'
   139  00082C  6F                 	db	111	;'o'
   140  00082D  6D                 	db	109	;'m'
   141  00082E  6D                 	db	109	;'m'
   142  00082F  61                 	db	97	;'a'
   143  000830  6E                 	db	110	;'n'
   144  000831  64                 	db	100	;'d'
   145  000832  00                 	db	0
   146  000833                     STR_35:
   147  000833  30                 	db	48	;'0'
   148  000834  31                 	db	49	;'1'
   149  000835  32                 	db	50	;'2'
   150  000836  33                 	db	51	;'3'
   151  000837  34                 	db	52	;'4'
   152  000838  35                 	db	53	;'5'
   153  000839  36                 	db	54	;'6'
   154  00083A  37                 	db	55	;'7'
   155  00083B  38                 	db	56	;'8'
   156  00083C  39                 	db	57	;'9'
   157  00083D  61                 	db	97	;'a'
   158  00083E  62                 	db	98	;'b'
   159  00083F  63                 	db	99	;'c'
   160  000840  64                 	db	100	;'d'
   161  000841  65                 	db	101	;'e'
   162  000842  66                 	db	102	;'f'
   163  000843  00                 	db	0
   164  000844                     STR_16:
   165  000844  49                 	db	73	;'I'
   166  000845  6E                 	db	110	;'n'
   167  000846  69                 	db	105	;'i'
   168  000847  74                 	db	116	;'t'
   169  000848  69                 	db	105	;'i'
   170  000849  61                 	db	97	;'a'
   171  00084A  6C                 	db	108	;'l'
   172  00084B  69                 	db	105	;'i'
   173  00084C  7A                 	db	122	;'z'
   174  00084D  65                 	db	101	;'e'
   175  00084E  64                 	db	100	;'d'
   176  00084F  00                 	db	0
   177  000850                     STR_14:
   178  000850  50                 	db	80	;'P'
   179  000851  61                 	db	97	;'a'
   180  000852  6E                 	db	110	;'n'
   181  000853  64                 	db	100	;'d'
   182  000854  61                 	db	97	;'a'
   183  000855  00                 	db	0
   184  000856                     STR_29:
   185  000856  4F                 	db	79	;'O'
   186  000857  6F                 	db	111	;'o'
   187  000858  70                 	db	112	;'p'
   188  000859  73                 	db	115	;'s'
   189  00085A  00                 	db	0
   190  00085B                     STR_5:
   191  00085B  5B                 	db	91	;'['
   192  00085C  41                 	db	65	;'A'
   193  00085D  5D                 	db	93	;']'
   194  00085E  00                 	db	0
   195  00085F                     STR_4:
   196  00085F  5B                 	db	91	;'['
   197  000860  42                 	db	66	;'B'
   198  000861  5D                 	db	93	;']'
   199  000862  00                 	db	0
   200  000863                     STR_3:
   201  000863  5B                 	db	91	;'['
   202  000864  4D                 	db	77	;'M'
   203  000865  5D                 	db	93	;']'
   204  000866  00                 	db	0
   205  000867                     STR_13:
   206  000867  3A                 	db	58	;':'
   207  000868  25                 	db	37
   208  000869  64                 	db	100	;'d'
   209  00086A  00                 	db	0
   210  00086B                     STR_26:
   211  00086B  46                 	db	70	;'F'
   212  00086C  41                 	db	65	;'A'
   213  00086D  00                 	db	0
   214  00086E                     STR_28:
   215  00086E  43                 	db	67	;'C'
   216  00086F  44                 	db	68	;'D'
   217  000870  00                 	db	0
   218  000871                     STR_24:
   219  000871  48                 	db	72	;'H'
   220  000872  45                 	db	69	;'E'
   221  000873  00                 	db	0
   222  000874                     STR_19:
   223  000874  4F                 	db	79	;'O'
   224  000875  4B                 	db	75	;'K'
   225  000876  00                 	db	0
   226  000877                     STR_31:
   227  000877  44                 	db	68	;'D'
   228  000878  4C                 	db	76	;'L'
   229  000879  00                 	db	0
   230  00087A                     STR_22:
   231  00087A  47                 	db	71	;'G'
   232  00087B  4E                 	db	78	;'N'
   233  00087C  00                 	db	0
   234  00087D                     STR_15:
   235  00087D  49                 	db	73	;'I'
   236  00087E  4E                 	db	78	;'N'
   237  00087F  00                 	db	0
   238  000880                     STR_25:
   239  000880  4F                 	db	79	;'O'
   240  000881  4E                 	db	78	;'N'
   241  000882  00                 	db	0
   242  000883                     STR_20:
   243  000883  41                 	db	65	;'A'
   244  000884  52                 	db	82	;'R'
   245  000885  00                 	db	0
   246  000886                     STR_6:
   247  000886  25                 	db	37
   248  000887  78                 	db	120	;'x'
   249  000888  00                 	db	0
   250  000889                     STR_34:
   251  000889  43                 	db	67	;'C'
   252  00088A  00                 	db	0
   253  00088B                     STR_32:
   254  00088B  4F                 	db	79	;'O'
   255  00088C  00                 	db	0
   256  00088D                     STR_2:
   257  00088D  24                 	db	36
   258  00088E  00                 	db	0
   259  00088F                     STR_1:
   260  00088F  26                 	db	38
   261  000890  00                 	db	0
   262  000891                     STR_7:
   263  000891  3A                 	db	58	;':'
   264  000892  00                 	db	0
   265  0000                     
   266                           ; #config settings
   267  000893  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	nvBANK0
   270  0000E5                     __pnvBANK0:
   271                           	opt stack 0
   272  0000E5                     _deviceName:
   273                           	opt stack 0
   274  0000E5                     	ds	3
   275  0000                     _ADCON1	set	4033
   276  0000                     _BAUDCONbits	set	4024
   277  0000                     _INTCON2bits	set	4081
   278  0000                     _INTCONbits	set	4082
   279  0000                     _IPR1bits	set	3999
   280  0000                     _LATBbits	set	3978
   281  0000                     _PIE1bits	set	3997
   282  0000                     _PIR1bits	set	3998
   283  0000                     _PORTA	set	3968
   284  0000                     _PORTB	set	3969
   285  0000                     _PORTBbits	set	3969
   286  0000                     _PORTC	set	3970
   287  0000                     _RCONbits	set	4048
   288  0000                     _RCREG	set	4014
   289  0000                     _RCSTAbits	set	4011
   290  0000                     _SPBRG	set	4015
   291  0000                     _SSPBUF	set	4041
   292  0000                     _SSPCON1bits	set	4038
   293  0000                     _SSPSTATbits	set	4039
   294  0000                     _T0CONbits	set	4053
   295  0000                     _TMR0H	set	4055
   296  0000                     _TMR0L	set	4054
   297  0000                     _TRISA	set	3986
   298  0000                     _TRISB	set	3987
   299  0000                     _TRISBbits	set	3987
   300  0000                     _TRISC	set	3988
   301  0000                     _TRISCbits	set	3988
   302  0000                     _TXREG	set	4013
   303  0000                     _TXSTAbits	set	4012
   304                           
   305                           	psect	cinit
   306  00170C                     __pcinit:
   307                           	opt stack 0
   308  00170C                     start_initialization:
   309                           	opt stack 0
   310  00170C                     __initialization:
   311                           	opt stack 0
   312                           
   313                           ; Initialize objects allocated to BANK0 (2 bytes)
   314                           ; load TBLPTR registers with __pidataBANK0
   315  00170C  0EA2               	movlw	low __pidataBANK0
   316  00170E  6EF6               	movwf	tblptrl,c
   317  001710  0E1D               	movlw	high __pidataBANK0
   318  001712  6EF7               	movwf	tblptrh,c
   319  001714  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   320  001716  6EF8               	movwf	tblptru,c
   321  001718  0009               	tblrd		*+	;fetch initializer
   322  00171A  CFF5 F0E8          	movff	tablat,__pdataBANK0
   323  00171E  0009               	tblrd		*+	;fetch initializer
   324  001720  CFF5 F0E9          	movff	tablat,__pdataBANK0+1
   325                           
   326                           ; Initialize objects allocated to COMRAM (8 bytes)
   327                           ; load TBLPTR registers with __pidataCOMRAM
   328  001724  0E92               	movlw	low __pidataCOMRAM
   329  001726  6EF6               	movwf	tblptrl,c
   330  001728  0E1D               	movlw	high __pidataCOMRAM
   331  00172A  6EF7               	movwf	tblptrh,c
   332  00172C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   333  00172E  6EF8               	movwf	tblptru,c
   334  001730  EE00  F049         	lfsr	0,__pdataCOMRAM
   335  001734  EE10 F008          	lfsr	1,8
   336  001738                     copy_data0:
   337  001738  0009               	tblrd		*+
   338  00173A  CFF5 FFEE          	movff	tablat,postinc0
   339  00173E  50E5               	movf	postdec1,w,c
   340  001740  50E1               	movf	fsr1l,w,c
   341  001742  E1FA               	bnz	copy_data0
   342                           
   343                           ; Clear objects allocated to BIGRAM (1085 bytes)
   344  001744  EE01  F066         	lfsr	0,__pbssBIGRAM
   345  001748  EE14 F03D          	lfsr	1,1085
   346  00174C                     clear_0:
   347  00174C  6AEE               	clrf	postinc0,c
   348  00174E  50E5               	movf	postdec1,w,c
   349  001750  50E1               	movf	fsr1l,w,c
   350  001752  E1FC               	bnz	clear_0
   351  001754  50E2               	movf	fsr1h,w,c
   352  001756  E1FA               	bnz	clear_0
   353                           
   354                           ; Clear objects allocated to BANK1 (102 bytes)
   355  001758  EE01  F000         	lfsr	0,__pbssBANK1
   356  00175C  0E66               	movlw	102
   357  00175E                     clear_1:
   358  00175E  6AEE               	clrf	postinc0,c
   359  001760  06E8               	decf	wreg,f,c
   360  001762  E1FD               	bnz	clear_1
   361                           
   362                           ; Clear objects allocated to BANK0 (15 bytes)
   363  001764  EE00  F0D6         	lfsr	0,__pbssBANK0
   364  001768  0E0F               	movlw	15
   365  00176A                     clear_2:
   366  00176A  6AEE               	clrf	postinc0,c
   367  00176C  06E8               	decf	wreg,f,c
   368  00176E  E1FD               	bnz	clear_2
   369                           
   370                           ; Clear objects allocated to COMRAM (9 bytes)
   371  001770  EE00  F040         	lfsr	0,__pbssCOMRAM
   372  001774  0E09               	movlw	9
   373  001776                     clear_3:
   374  001776  6AEE               	clrf	postinc0,c
   375  001778  06E8               	decf	wreg,f,c
   376  00177A  E1FD               	bnz	clear_3
   377  00177C                     end_of_initialization:
   378                           	opt stack 0
   379  00177C                     __end_of__initialization:
   380                           	opt stack 0
   381  00177C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   382  00177E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   383  001780  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  001782  6EF8               	movwf	tblptru,c
   385  001784  0100               	movlb	0
   386  001786  EFF7  F00A         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1h	equ	0xFE2
   395                           fsr1l	equ	0xFE1
   396                           
   397                           	psect	bssCOMRAM
   398  000040                     __pbssCOMRAM:
   399                           	opt stack 0
   400  000040                     _read:
   401                           	opt stack 0
   402  000040                     	ds	6
   403  000046                     _baud:
   404                           	opt stack 0
   405  000046                     	ds	1
   406  000047                     _blockLength:
   407                           	opt stack 0
   408  000047                     	ds	1
   409  000048                     _bufferCnt:
   410                           	opt stack 0
   411  000048                     	ds	1
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1h	equ	0xFE2
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	dataCOMRAM
   423  000049                     __pdataCOMRAM:
   424                           	opt stack 0
   425  000049                     _ackCharacter:
   426                           	opt stack 0
   427  000049                     	ds	2
   428  00004B                     _blockCharacter:
   429                           	opt stack 0
   430  00004B                     	ds	2
   431  00004D                     _startCharacter:
   432                           	opt stack 0
   433  00004D                     	ds	2
   434  00004F                     _stopCharacter:
   435                           	opt stack 0
   436  00004F                     	ds	2
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           postdec1	equ	0xFE5
   444                           fsr1h	equ	0xFE2
   445                           fsr1l	equ	0xFE1
   446                           
   447                           	psect	bssBANK0
   448  0000D6                     __pbssBANK0:
   449                           	opt stack 0
   450  0000D6                     _readData:
   451                           	opt stack 0
   452  0000D6                     	ds	6
   453  0000DC                     _analogValue:
   454                           	opt stack 0
   455  0000DC                     	ds	2
   456  0000DE                     _value:
   457                           	opt stack 0
   458  0000DE                     	ds	2
   459  0000E0                     _D_TIMER0_Flag:
   460                           	opt stack 0
   461  0000E0                     	ds	1
   462  0000E1                     _D_UART_ReadFlag:
   463                           	opt stack 0
   464  0000E1                     	ds	1
   465  0000E2                     _isDoorOpen:
   466                           	opt stack 0
   467  0000E2                     	ds	1
   468  0000E3                     _lsbBits:
   469                           	opt stack 0
   470  0000E3                     	ds	1
   471  0000E4                     _msbBits:
   472                           	opt stack 0
   473  0000E4                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           postdec1	equ	0xFE5
   481                           fsr1h	equ	0xFE2
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	dataBANK0
   485  0000E8                     __pdataBANK0:
   486                           	opt stack 0
   487  0000E8                     _messageCharacter:
   488                           	opt stack 0
   489  0000E8                     	ds	2
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1h	equ	0xFE2
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	bssBANK1
   501  000100                     __pbssBANK1:
   502                           	opt stack 0
   503  000100                     _comMes:
   504                           	opt stack 0
   505  000100                     	ds	102
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	bssBIGRAM
   517  000166                     __pbssBIGRAM:
   518                           	opt stack 0
   519  000166                     _readBuffer:
   520                           	opt stack 0
   521  000166                     	ds	1085
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1h	equ	0xFE2
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	cstackBANK0
   533  000060                     __pcstackBANK0:
   534                           	opt stack 0
   535  000060                     ?_strcmp:
   536                           	opt stack 0
   537  000060                     ?_convertData:
   538                           	opt stack 0
   539  000060                     ?___lwdiv:
   540                           	opt stack 0
   541  000060                     ?_D_UART_GetDeviceName:
   542                           	opt stack 0
   543  000060                     ?___aldiv:
   544                           	opt stack 0
   545  000060                     ?_D_UART_Read:
   546                           	opt stack 0
   547  000060                     ?_D_UART_ReadBlock:
   548                           	opt stack 0
   549  000060                     D_SPI_Write@data:
   550                           	opt stack 0
   551  000060                     D_SPI_Enable@enable:
   552                           	opt stack 0
   553  000060                     D_UART_Enable@enable:
   554                           	opt stack 0
   555  000060                     convertData@low:
   556                           	opt stack 0
   557  000060                     D_TIMER0_Enable@enable:
   558                           	opt stack 0
   559  000060                     ___lwdiv@dividend:
   560                           	opt stack 0
   561  000060                     strcmp@s1:
   562                           	opt stack 0
   563  000060                     ___aldiv@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x0
   567  000060                     	ds	1
   568  000061                     writeByte@data:
   569                           	opt stack 0
   570  000061                     D_MCP3201_Enable@enable:
   571                           	opt stack 0
   572  000061                     D_TIMRER0_Init@prescale:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x1
   576  000061                     	ds	1
   577  000062                     ??_convertData:
   578  000062                     putch@data:
   579                           	opt stack 0
   580  000062                     ___lwdiv@divisor:
   581                           	opt stack 0
   582  000062                     strcmp@s2:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x2
   586  000062                     	ds	1
   587  000063                     ??_D_TIMRER0_Init:
   588                           
   589                           ; 1 bytes @ 0x3
   590  000063                     	ds	1
   591  000064                     ??_strcmp:
   592  000064                     convertData@high:
   593                           	opt stack 0
   594  000064                     ___lwdiv@quotient:
   595                           	opt stack 0
   596  000064                     ___aldiv@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x4
   600  000064                     	ds	1
   601  000065                     ?_D_MCP3201_Read:
   602                           	opt stack 0
   603  000065                     strcmp@r:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x5
   607  000065                     	ds	1
   608  000066                     ___lwdiv@counter:
   609                           	opt stack 0
   610  000066                     D_UART_Read@cm:
   611                           	opt stack 0
   612                           
   613                           ; 102 bytes @ 0x6
   614  000066                     	ds	1
   615  000067                     ?___lwmod:
   616                           	opt stack 0
   617  000067                     D_UART_ReadBlock@cnt:
   618                           	opt stack 0
   619  000067                     ___lwmod@dividend:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x7
   623  000067                     	ds	1
   624  000068                     ___aldiv@counter:
   625                           	opt stack 0
   626  000068                     D_UART_ReadBlock@cm:
   627                           	opt stack 0
   628                           
   629                           ; 102 bytes @ 0x8
   630  000068                     	ds	1
   631  000069                     ___aldiv@sign:
   632                           	opt stack 0
   633  000069                     ___lwmod@divisor:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x9
   637  000069                     	ds	1
   638  00006A                     ___aldiv@quotient:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0xA
   642  00006A                     	ds	1
   643  00006B                     ___lwmod@counter:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0xB
   647  00006B                     	ds	1
   648  00006C                     ?_printf:
   649                           	opt stack 0
   650  00006C                     printf@f:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0xC
   654  00006C                     	ds	2
   655  00006E                     D_UART_Init@name:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0xE
   659  00006E                     	ds	2
   660  000070                     D_UART_Init@baud:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x10
   664  000070                     	ds	1
   665  000071                     ??_printf:
   666                           
   667                           ; 1 bytes @ 0x11
   668  000071                     	ds	1
   669  000072                     D_UART_Init@interrupts:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x12
   673  000072                     	ds	1
   674  000073                     _D_UART_Init$2161:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x13
   678  000073                     	ds	1
   679  000074                     printf@idx:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x14
   683  000074                     	ds	1
   684  000075                     printf@ap:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x15
   688  000075                     	ds	2
   689  000077                     printf@prec:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x17
   693  000077                     	ds	1
   694  000078                     printf@flag:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x18
   698  000078                     	ds	1
   699  000079                     printf@val:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x19
   703  000079                     	ds	2
   704  00007B                     printf@c:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1B
   708  00007B                     	ds	1
   709  00007C                     D_UART_Write@command:
   710                           	opt stack 0
   711  00007C                     D_UART_WriteInt@command:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x1C
   715  00007C                     	ds	2
   716  00007E                     D_UART_WriteInt@data:
   717                           	opt stack 0
   718  00007E                     D_UART_Write@data:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x1E
   722  00007E                     	ds	2
   723  000080                     ??_D_UART_WriteInt:
   724                           
   725                           ; 1 bytes @ 0x20
   726  000080                     	ds	1
   727  000081                     ??_D_UART_Write:
   728                           
   729                           ; 1 bytes @ 0x21
   730  000081                     	ds	1
   731  000082                     
   732                           ; 1 bytes @ 0x22
   733  000082                     	ds	76
   734  0000CE                     handle_message@msg:
   735                           	opt stack 0
   736                           
   737                           ; 6 bytes @ 0x6E
   738  0000CE                     	ds	6
   739  0000D4                     main@i:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x74
   743  0000D4                     	ds	1
   744  0000D5                     main@length:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x75
   748  0000D5                     	ds	1
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           postdec1	equ	0xFE5
   756                           fsr1h	equ	0xFE2
   757                           fsr1l	equ	0xFE1
   758                           
   759                           	psect	cstackCOMRAM
   760  000001                     __pcstackCOMRAM:
   761                           	opt stack 0
   762  000001                     ??_HighISR:
   763  000001                     
   764                           ; 1 bytes @ 0x0
   765  000001                     	ds	14
   766  00000F                     ?i1___lwdiv:
   767                           	opt stack 0
   768  00000F                     i1D_UART_Enable@enable:
   769                           	opt stack 0
   770  00000F                     i1___lwdiv@dividend:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0xE
   774  00000F                     	ds	1
   775  000010                     readByte@dum:
   776                           	opt stack 0
   777  000010                     i1writeByte@data:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0xF
   781  000010                     	ds	1
   782  000011                     i1putch@data:
   783                           	opt stack 0
   784  000011                     i1___lwdiv@divisor:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x10
   788  000011                     	ds	2
   789  000013                     i1___lwdiv@quotient:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x12
   793  000013                     	ds	2
   794  000015                     i1___lwdiv@counter:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x14
   798  000015                     	ds	1
   799  000016                     ?i1___lwmod:
   800                           	opt stack 0
   801  000016                     i1___lwmod@dividend:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x15
   805  000016                     	ds	2
   806  000018                     i1___lwmod@divisor:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x17
   810  000018                     	ds	2
   811  00001A                     i1___lwmod@counter:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x19
   815  00001A                     	ds	1
   816  00001B                     ?i1_printf:
   817                           	opt stack 0
   818  00001B                     i1printf@f:
   819                           	opt stack 0
   820                           
   821                           ; 3 bytes @ 0x1A
   822  00001B                     	ds	5
   823  000020                     ??i1_printf:
   824                           
   825                           ; 1 bytes @ 0x1F
   826  000020                     	ds	3
   827  000023                     i1printf@idx:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x22
   831  000023                     	ds	1
   832  000024                     i1printf@ap:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x23
   836  000024                     	ds	2
   837  000026                     i1printf@prec:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x25
   841  000026                     	ds	1
   842  000027                     i1printf@flag:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x26
   846  000027                     	ds	1
   847  000028                     i1printf@val:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x27
   851  000028                     	ds	2
   852  00002A                     i1printf@c:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x29
   856  00002A                     	ds	1
   857  00002B                     ??_acknowledge:
   858                           
   859                           ; 1 bytes @ 0x2A
   860  00002B                     	ds	1
   861  00002C                     ??_fillDataBuffer:
   862                           
   863                           ; 1 bytes @ 0x2B
   864  00002C                     	ds	1
   865  00002D                     fillDataBuffer@i:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x2C
   869  00002D                     	ds	1
   870  00002E                     fillDataBuffer@data:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x2D
   874  00002E                     	ds	1
   875  00002F                     ??_LowISR:
   876                           
   877                           ; 1 bytes @ 0x2E
   878  00002F                     	ds	17
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1h	equ	0xFE2
   887                           fsr1l	equ	0xFE1
   888                           
   889 ;;
   890 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   891 ;;
   892 ;; *************** function _main *****************
   893 ;; Defined at:
   894 ;;		line 58 in file "main.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  i               1  116[BANK0 ] unsigned char 
   899 ;;  length          1  117[BANK0 ] unsigned char 
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   909 ;;      Params:         0       0       0       0       0       0       0       0       0
   910 ;;      Locals:         0       2       0       0       0       0       0       0       0
   911 ;;      Temps:          0       0       0       0       0       0       0       0       0
   912 ;;      Totals:         0       2       0       0       0       0       0       0       0
   913 ;;Total ram usage:        2 bytes
   914 ;; Hardware stack levels required when called:   15
   915 ;; This function calls:
   916 ;;		_D_UART_BlockLength
   917 ;;		_D_UART_Read
   918 ;;		_D_UART_ReadBlock
   919 ;;		_handle_inputs
   920 ;;		_handle_message
   921 ;;		_initialize
   922 ;;		_read_inputs
   923 ;; This function is called by:
   924 ;;		Startup code after reset
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text0
   929  0015EE                     __ptext0:
   930                           	opt stack 0
   931  0015EE                     _main:
   932                           	opt stack 16
   933                           
   934                           ;main.c: 60: initialize();
   935                           
   936                           ;incstack = 0
   937  0015EE  EC3C  F00C         	call	_initialize	;wreg free
   938  0015F2                     l2604:
   939                           
   940                           ;main.c: 64: if (D_TIMER0_Flag) {
   941  0015F2  0100               	movlb	0	; () banked
   942  0015F4  51E0               	movf	_D_TIMER0_Flag& (0+255),w,b
   943  0015F6  B4D8               	btfsc	status,2,c
   944  0015F8  D007               	goto	l2612
   945                           
   946                           ; BSR set to: 0
   947                           ;main.c: 65: D_TIMER0_Flag = 0;
   948  0015FA  0E00               	movlw	0
   949  0015FC  0100               	movlb	0	; () banked
   950  0015FE  6FE0               	movwf	_D_TIMER0_Flag& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           ;main.c: 66: read_inputs();
   954  001600  EC01  F00C         	call	_read_inputs	;wreg free
   955                           
   956                           ;main.c: 67: handle_inputs();
   957  001604  ECAE  F00E         	call	_handle_inputs	;wreg free
   958  001608                     l2612:
   959                           
   960                           ;main.c: 68: }
   961                           ;main.c: 70: if (D_UART_ReadFlag) {
   962  001608  0100               	movlb	0	; () banked
   963  00160A  51E1               	movf	_D_UART_ReadFlag& (0+255),w,b
   964  00160C  B4D8               	btfsc	status,2,c
   965  00160E  D7F1               	goto	l2604
   966                           
   967                           ; BSR set to: 0
   968                           ;main.c: 71: D_UART_ReadFlag = 0;
   969  001610  0E00               	movlw	0
   970  001612  0100               	movlb	0	; () banked
   971  001614  6FE1               	movwf	_D_UART_ReadFlag& (0+255),b
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 72: uint8_t length = D_UART_BlockLength();
   975  001616  ECCD  F00E         	call	_D_UART_BlockLength	;wreg free
   976  00161A  0100               	movlb	0	; () banked
   977  00161C  6FD5               	movwf	main@length& (0+255),b
   978                           
   979                           ; BSR set to: 0
   980                           ;main.c: 73: if (length == 1) {
   981  00161E  0100               	movlb	0	; () banked
   982  001620  05D5               	decf	main@length& (0+255),w,b
   983  001622  A4D8               	btfss	status,2,c
   984  001624  D010               	goto	l2622
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 74: handle_message(D_UART_Read());
   988  001626  EC8A  F00D         	call	_D_UART_Read	;wreg free
   989  00162A  CFE9 FFD9          	movff	fsr0l,fsr2l
   990  00162E  CFEA FFDA          	movff	fsr0h,fsr2h
   991  001632  EE00  F0CE         	lfsr	0,handle_message@msg
   992  001636  0E05               	movlw	5
   993  001638                     u1911:
   994  001638  CFDB FFEB          	movff	plusw2,plusw0
   995  00163C  06E8               	decf	wreg,f,c
   996  00163E  E2FC               	bc	u1911
   997  001640  ECEE  F007         	call	_handle_message	;wreg free
   998                           
   999                           ;main.c: 75: } else if (length > 1) {
  1000  001644  D7D6               	goto	l2604
  1001  001646                     l2622:
  1002  001646  0E01               	movlw	1
  1003  001648  0100               	movlb	0	; () banked
  1004  00164A  65D5               	cpfsgt	main@length& (0+255),b
  1005  00164C  D7D2               	goto	l2604
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 76: uint8_t i;
  1009                           ;main.c: 77: for (i=0; i < length; i++) {
  1010  00164E  0E00               	movlw	0
  1011  001650  0100               	movlb	0	; () banked
  1012  001652  6FD4               	movwf	main@i& (0+255),b
  1013  001654  D013               	goto	l2630
  1014  001656                     l2626:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 78: handle_message(D_UART_ReadBlock(i));
  1018  001656  0100               	movlb	0	; () banked
  1019  001658  51D4               	movf	main@i& (0+255),w,b
  1020  00165A  EC07  F00D         	call	_D_UART_ReadBlock
  1021  00165E  CFE9 FFD9          	movff	fsr0l,fsr2l
  1022  001662  CFEA FFDA          	movff	fsr0h,fsr2h
  1023  001666  EE00  F0CE         	lfsr	0,handle_message@msg
  1024  00166A  0E05               	movlw	5
  1025  00166C                     u1931:
  1026  00166C  CFDB FFEB          	movff	plusw2,plusw0
  1027  001670  06E8               	decf	wreg,f,c
  1028  001672  E2FC               	bc	u1931
  1029  001674  ECEE  F007         	call	_handle_message	;wreg free
  1030  001678  0100               	movlb	0	; () banked
  1031  00167A  2BD4               	incf	main@i& (0+255),f,b
  1032  00167C                     l2630:
  1033                           
  1034                           ; BSR set to: 0
  1035  00167C  0100               	movlb	0	; () banked
  1036  00167E  51D5               	movf	main@length& (0+255),w,b
  1037  001680  0100               	movlb	0	; () banked
  1038  001682  5DD4               	subwf	main@i& (0+255),w,b
  1039  001684  B0D8               	btfsc	status,0,c
  1040  001686  D7B5               	goto	l2604
  1041  001688  D7E6               	goto	l2626
  1042  00168A                     __end_of_main:
  1043                           	opt stack 0
  1044                           tblptru	equ	0xFF8
  1045                           tblptrh	equ	0xFF7
  1046                           tblptrl	equ	0xFF6
  1047                           tablat	equ	0xFF5
  1048                           postinc0	equ	0xFEE
  1049                           plusw0	equ	0xFEB
  1050                           fsr0h	equ	0xFEA
  1051                           fsr0l	equ	0xFE9
  1052                           wreg	equ	0xFE8
  1053                           postdec1	equ	0xFE5
  1054                           fsr1h	equ	0xFE2
  1055                           fsr1l	equ	0xFE1
  1056                           plusw2	equ	0xFDB
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           status	equ	0xFD8
  1060                           
  1061 ;; *************** function _read_inputs *****************
  1062 ;; Defined at:
  1063 ;;		line 130 in file "main.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;		None
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1077 ;;      Params:         0       0       0       0       0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1080 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1081 ;;Total ram usage:        0 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:   13
  1084 ;; This function calls:
  1085 ;;		_D_UART_Write
  1086 ;; This function is called by:
  1087 ;;		_main
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text1
  1092  001802                     __ptext1:
  1093                           	opt stack 0
  1094  001802                     _read_inputs:
  1095                           	opt stack 17
  1096                           
  1097                           ;main.c: 131: TRISBbits.TRISB7 = 1;
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;incstack = 0
  1101  001802  8E93               	bsf	3987,7,c	;volatile
  1102                           
  1103                           ;main.c: 132: if (PORTBbits.RB7 == 0) {
  1104  001804  BE81               	btfsc	3969,7,c	;volatile
  1105  001806  D01C               	goto	l2540
  1106                           
  1107                           ;main.c: 133: if (!isDoorOpen)
  1108  001808  0100               	movlb	0	; () banked
  1109  00180A  51E2               	movf	_isDoorOpen& (0+255),w,b
  1110  00180C  A4D8               	btfss	status,2,c
  1111  00180E  D014               	goto	l2538
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 134: D_UART_Write("DL", "O");
  1115  001810  0E77               	movlw	low STR_31
  1116  001812  0100               	movlb	0	; () banked
  1117  001814  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1118  001816  0E08               	movlw	high STR_31
  1119  001818  0100               	movlb	0	; () banked
  1120  00181A  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1121  00181C  0E8B               	movlw	low STR_32
  1122  00181E  0100               	movlb	0	; () banked
  1123  001820  6F7E               	movwf	D_UART_Write@data& (0+255),b
  1124  001822  0E08               	movlw	high STR_32
  1125  001824  0100               	movlb	0	; () banked
  1126  001826  6F7F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1127  001828  0100               	movlb	0	; () banked
  1128  00182A  517E               	movf	D_UART_Write@data& (0+255),w,b
  1129  00182C  117F               	iorwf	(D_UART_Write@data+1)& (0+255),w,b
  1130  00182E  A4D8               	btfss	status,2,c
  1131  001830  0E00               	movlw	low (__mediumconst shr (0+16))
  1132  001832  6F80               	movwf	(D_UART_Write@data+2)& (0+255),b
  1133  001834  ECDE  F009         	call	_D_UART_Write	;wreg free
  1134  001838                     l2538:
  1135                           
  1136                           ;main.c: 135: isDoorOpen = 1;
  1137  001838  0E01               	movlw	1
  1138  00183A  0100               	movlb	0	; () banked
  1139  00183C  6FE2               	movwf	_isDoorOpen& (0+255),b
  1140                           
  1141                           ;main.c: 136: }
  1142  00183E  0012               	return	
  1143  001840                     l2540:
  1144                           
  1145                           ;main.c: 137: else {
  1146                           ;main.c: 138: if (isDoorOpen)
  1147  001840  0100               	movlb	0	; () banked
  1148  001842  51E2               	movf	_isDoorOpen& (0+255),w,b
  1149  001844  B4D8               	btfsc	status,2,c
  1150  001846  D014               	goto	l2544
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 139: D_UART_Write("DL", "C");
  1154  001848  0E77               	movlw	low STR_31
  1155  00184A  0100               	movlb	0	; () banked
  1156  00184C  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1157  00184E  0E08               	movlw	high STR_31
  1158  001850  0100               	movlb	0	; () banked
  1159  001852  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1160  001854  0E89               	movlw	low STR_34
  1161  001856  0100               	movlb	0	; () banked
  1162  001858  6F7E               	movwf	D_UART_Write@data& (0+255),b
  1163  00185A  0E08               	movlw	high STR_34
  1164  00185C  0100               	movlb	0	; () banked
  1165  00185E  6F7F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1166  001860  0100               	movlb	0	; () banked
  1167  001862  517E               	movf	D_UART_Write@data& (0+255),w,b
  1168  001864  117F               	iorwf	(D_UART_Write@data+1)& (0+255),w,b
  1169  001866  A4D8               	btfss	status,2,c
  1170  001868  0E00               	movlw	low (__mediumconst shr (0+16))
  1171  00186A  6F80               	movwf	(D_UART_Write@data+2)& (0+255),b
  1172  00186C  ECDE  F009         	call	_D_UART_Write	;wreg free
  1173  001870                     l2544:
  1174                           
  1175                           ;main.c: 140: isDoorOpen = 0;
  1176  001870  0E00               	movlw	0
  1177  001872  0100               	movlb	0	; () banked
  1178  001874  6FE2               	movwf	_isDoorOpen& (0+255),b
  1179  001876  0012               	return	
  1180  001878                     __end_of_read_inputs:
  1181                           	opt stack 0
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           plusw0	equ	0xFEB
  1188                           fsr0h	equ	0xFEA
  1189                           fsr0l	equ	0xFE9
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           plusw2	equ	0xFDB
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _handle_message *****************
  1200 ;; Defined at:
  1201 ;;		line 87 in file "main.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  msg             6  110[BANK0 ] struct .
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1215 ;;      Params:         0       6       0       0       0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1218 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1219 ;;Total ram usage:        6 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:   14
  1222 ;; This function calls:
  1223 ;;		_D_MCP3201_Enable
  1224 ;;		_D_MCP3201_Read
  1225 ;;		_D_TIMER0_Enable
  1226 ;;		_D_UART_Enable
  1227 ;;		_D_UART_GetDeviceName
  1228 ;;		_D_UART_Write
  1229 ;;		_D_UART_WriteInt
  1230 ;;		_initialize
  1231 ;;		_strcmp
  1232 ;; This function is called by:
  1233 ;;		_main
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text2
  1238  000FDC                     __ptext2:
  1239                           	opt stack 0
  1240  000FDC                     _handle_message:
  1241                           	opt stack 16
  1242                           
  1243                           ;main.c: 88: if (strcmp(msg.command, "IN") == 0) {
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;incstack = 0
  1247  000FDC  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1248  000FE0  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1249  000FE4  0E7D               	movlw	low STR_15
  1250  000FE6  0100               	movlb	0	; () banked
  1251  000FE8  6F62               	movwf	strcmp@s2& (0+255),b
  1252  000FEA  0E08               	movlw	high STR_15
  1253  000FEC  0100               	movlb	0	; () banked
  1254  000FEE  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1255  000FF0  EC35  F00D         	call	_strcmp	;wreg free
  1256  000FF4  0100               	movlb	0	; () banked
  1257  000FF6  5160               	movf	?_strcmp& (0+255),w,b
  1258  000FF8  0100               	movlb	0	; () banked
  1259  000FFA  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1260  000FFC  A4D8               	btfss	status,2,c
  1261  000FFE  D016               	goto	l2554
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 89: initialize();
  1265  001000  EC3C  F00C         	call	_initialize	;wreg free
  1266                           
  1267                           ;main.c: 90: D_UART_Write("IN", "OK");
  1268  001004  0E7D               	movlw	low STR_15
  1269  001006  0100               	movlb	0	; () banked
  1270  001008  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1271  00100A  0E08               	movlw	high STR_15
  1272  00100C  0100               	movlb	0	; () banked
  1273  00100E  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1274  001010  0E74               	movlw	low STR_19
  1275  001012  0100               	movlb	0	; () banked
  1276  001014  6F7E               	movwf	D_UART_Write@data& (0+255),b
  1277  001016  0E08               	movlw	high STR_19
  1278  001018  0100               	movlb	0	; () banked
  1279  00101A  6F7F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1280  00101C  0100               	movlb	0	; () banked
  1281  00101E  517E               	movf	D_UART_Write@data& (0+255),w,b
  1282  001020  117F               	iorwf	(D_UART_Write@data+1)& (0+255),w,b
  1283  001022  A4D8               	btfss	status,2,c
  1284  001024  0E00               	movlw	low (__mediumconst shr (0+16))
  1285  001026  6F80               	movwf	(D_UART_Write@data+2)& (0+255),b
  1286  001028  ECDE  F009         	call	_D_UART_Write	;wreg free
  1287  00102C                     l2554:
  1288                           
  1289                           ;main.c: 91: }
  1290                           ;main.c: 93: if (strcmp(msg.command, "AR") == 0) {
  1291  00102C  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1292  001030  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1293  001034  0E83               	movlw	low STR_20
  1294  001036  0100               	movlb	0	; () banked
  1295  001038  6F62               	movwf	strcmp@s2& (0+255),b
  1296  00103A  0E08               	movlw	high STR_20
  1297  00103C  0100               	movlb	0	; () banked
  1298  00103E  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1299  001040  EC35  F00D         	call	_strcmp	;wreg free
  1300  001044  0100               	movlb	0	; () banked
  1301  001046  5160               	movf	?_strcmp& (0+255),w,b
  1302  001048  0100               	movlb	0	; () banked
  1303  00104A  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1304  00104C  A4D8               	btfss	status,2,c
  1305  00104E  D013               	goto	l2560
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;main.c: 94: value = D_MCP3201_Read();
  1309  001050  ECD0  F00D         	call	_D_MCP3201_Read	;wreg free
  1310  001054  C065  F0DE         	movff	?_D_MCP3201_Read,_value
  1311  001058  C066  F0DF         	movff	?_D_MCP3201_Read+1,_value+1
  1312                           
  1313                           ;main.c: 95: D_UART_WriteInt("AR", value);
  1314  00105C  0E83               	movlw	low STR_20
  1315  00105E  0100               	movlb	0	; () banked
  1316  001060  6F7C               	movwf	D_UART_WriteInt@command& (0+255),b
  1317  001062  0E08               	movlw	high STR_20
  1318  001064  0100               	movlb	0	; () banked
  1319  001066  6F7D               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  1320  001068  C0DE  F07E         	movff	_value,D_UART_WriteInt@data
  1321  00106C  C0DF  F07F         	movff	_value+1,D_UART_WriteInt@data+1
  1322  001070  EC6E  F009         	call	_D_UART_WriteInt	;wreg free
  1323                           
  1324                           ;main.c: 96: }
  1325  001074  0012               	return	
  1326  001076                     l2560:
  1327                           
  1328                           ;main.c: 98: else if (strcmp(msg.command, "GN") == 0) {
  1329  001076  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1330  00107A  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1331  00107E  0E7A               	movlw	low STR_22
  1332  001080  0100               	movlb	0	; () banked
  1333  001082  6F62               	movwf	strcmp@s2& (0+255),b
  1334  001084  0E08               	movlw	high STR_22
  1335  001086  0100               	movlb	0	; () banked
  1336  001088  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1337  00108A  EC35  F00D         	call	_strcmp	;wreg free
  1338  00108E  0100               	movlb	0	; () banked
  1339  001090  5160               	movf	?_strcmp& (0+255),w,b
  1340  001092  0100               	movlb	0	; () banked
  1341  001094  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1342  001096  A4D8               	btfss	status,2,c
  1343  001098  D011               	goto	l2564
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 99: D_UART_Write("GN", D_UART_GetDeviceName());
  1347  00109A  0E7A               	movlw	low STR_22
  1348  00109C  0100               	movlb	0	; () banked
  1349  00109E  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1350  0010A0  0E08               	movlw	high STR_22
  1351  0010A2  0100               	movlb	0	; () banked
  1352  0010A4  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1353  0010A6  ECBD  F00E         	call	_D_UART_GetDeviceName	;wreg free
  1354  0010AA  C060  F07E         	movff	?_D_UART_GetDeviceName,D_UART_Write@data
  1355  0010AE  C061  F07F         	movff	?_D_UART_GetDeviceName+1,D_UART_Write@data+1
  1356  0010B2  C062  F080         	movff	?_D_UART_GetDeviceName+2,D_UART_Write@data+2
  1357  0010B6  ECDE  F009         	call	_D_UART_Write	;wreg free
  1358                           
  1359                           ;main.c: 100: }
  1360  0010BA  0012               	return	
  1361  0010BC                     l2564:
  1362                           
  1363                           ;main.c: 102: else if (strcmp(msg.command, "HE") == 0) {
  1364  0010BC  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1365  0010C0  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1366  0010C4  0E71               	movlw	low STR_24
  1367  0010C6  0100               	movlb	0	; () banked
  1368  0010C8  6F62               	movwf	strcmp@s2& (0+255),b
  1369  0010CA  0E08               	movlw	high STR_24
  1370  0010CC  0100               	movlb	0	; () banked
  1371  0010CE  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1372  0010D0  EC35  F00D         	call	_strcmp	;wreg free
  1373  0010D4  0100               	movlb	0	; () banked
  1374  0010D6  5160               	movf	?_strcmp& (0+255),w,b
  1375  0010D8  0100               	movlb	0	; () banked
  1376  0010DA  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1377  0010DC  A4D8               	btfss	status,2,c
  1378  0010DE  D016               	goto	l2570
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 103: if (strcmp(msg.message, "ON")) {
  1382  0010E0  C0D2  F060         	movff	handle_message@msg+4,strcmp@s1
  1383  0010E4  C0D3  F061         	movff	handle_message@msg+5,strcmp@s1+1
  1384  0010E8  0E80               	movlw	low STR_25
  1385  0010EA  0100               	movlb	0	; () banked
  1386  0010EC  6F62               	movwf	strcmp@s2& (0+255),b
  1387  0010EE  0E08               	movlw	high STR_25
  1388  0010F0  0100               	movlb	0	; () banked
  1389  0010F2  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1390  0010F4  EC35  F00D         	call	_strcmp	;wreg free
  1391  0010F8  0100               	movlb	0	; () banked
  1392  0010FA  5160               	movf	?_strcmp& (0+255),w,b
  1393  0010FC  0100               	movlb	0	; () banked
  1394  0010FE  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1395  001100  B4D8               	btfsc	status,2,c
  1396  001102  D002               	goto	l357
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 104: LATBbits.LATB3 = 1;
  1400  001104  868A               	bsf	3978,3,c	;volatile
  1401                           
  1402                           ;main.c: 105: } else {
  1403  001106  0012               	return	
  1404  001108                     l357:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 106: LATBbits.LATB3 = 0;
  1408  001108  968A               	bcf	3978,3,c	;volatile
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;main.c: 107: }
  1412                           ;main.c: 108: }
  1413  00110A  0012               	return	
  1414  00110C                     l2570:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 110: else if (strcmp(msg.command, "FA") == 0) {
  1418  00110C  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1419  001110  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1420  001114  0E6B               	movlw	low STR_26
  1421  001116  0100               	movlb	0	; () banked
  1422  001118  6F62               	movwf	strcmp@s2& (0+255),b
  1423  00111A  0E08               	movlw	high STR_26
  1424  00111C  0100               	movlb	0	; () banked
  1425  00111E  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1426  001120  EC35  F00D         	call	_strcmp	;wreg free
  1427  001124  0100               	movlb	0	; () banked
  1428  001126  5160               	movf	?_strcmp& (0+255),w,b
  1429  001128  0100               	movlb	0	; () banked
  1430  00112A  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1431  00112C  A4D8               	btfss	status,2,c
  1432  00112E  D016               	goto	l2576
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;main.c: 111: if (strcmp(msg.message, "ON")) {
  1436  001130  C0D2  F060         	movff	handle_message@msg+4,strcmp@s1
  1437  001134  C0D3  F061         	movff	handle_message@msg+5,strcmp@s1+1
  1438  001138  0E80               	movlw	low STR_25
  1439  00113A  0100               	movlb	0	; () banked
  1440  00113C  6F62               	movwf	strcmp@s2& (0+255),b
  1441  00113E  0E08               	movlw	high STR_25
  1442  001140  0100               	movlb	0	; () banked
  1443  001142  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1444  001144  EC35  F00D         	call	_strcmp	;wreg free
  1445  001148  0100               	movlb	0	; () banked
  1446  00114A  5160               	movf	?_strcmp& (0+255),w,b
  1447  00114C  0100               	movlb	0	; () banked
  1448  00114E  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1449  001150  B4D8               	btfsc	status,2,c
  1450  001152  D002               	goto	l361
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;main.c: 112: LATBbits.LATB4 = 1;
  1454  001154  888A               	bsf	3978,4,c	;volatile
  1455                           
  1456                           ;main.c: 113: } else {
  1457  001156  0012               	return	
  1458  001158                     l361:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;main.c: 114: LATBbits.LATB4 = 0;
  1462  001158  988A               	bcf	3978,4,c	;volatile
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 115: }
  1466                           ;main.c: 116: }
  1467  00115A  0012               	return	
  1468  00115C                     l2576:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 118: else if (strcmp(msg.command, "CD") == 0) {
  1472  00115C  C0D0  F060         	movff	handle_message@msg+2,strcmp@s1
  1473  001160  C0D1  F061         	movff	handle_message@msg+3,strcmp@s1+1
  1474  001164  0E6E               	movlw	low STR_28
  1475  001166  0100               	movlb	0	; () banked
  1476  001168  6F62               	movwf	strcmp@s2& (0+255),b
  1477  00116A  0E08               	movlw	high STR_28
  1478  00116C  0100               	movlb	0	; () banked
  1479  00116E  6F63               	movwf	(strcmp@s2+1)& (0+255),b
  1480  001170  EC35  F00D         	call	_strcmp	;wreg free
  1481  001174  0100               	movlb	0	; () banked
  1482  001176  5160               	movf	?_strcmp& (0+255),w,b
  1483  001178  0100               	movlb	0	; () banked
  1484  00117A  1161               	iorwf	(?_strcmp+1)& (0+255),w,b
  1485  00117C  A4D8               	btfss	status,2,c
  1486  00117E  D00C               	goto	l2582
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 119: LATBbits.LATB4 = LATBbits.LATB3 = 0;
  1490  001180  968A               	bcf	3978,3,c	;volatile
  1491  001182  988A               	bcf	3978,4,c	;volatile
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 120: D_TIMER0_Enable(0);
  1495  001184  0E00               	movlw	0
  1496  001186  EC20  F00E         	call	_D_TIMER0_Enable
  1497                           
  1498                           ;main.c: 121: D_MCP3201_Enable(0);
  1499  00118A  0E00               	movlw	0
  1500  00118C  EC76  F00E         	call	_D_MCP3201_Enable
  1501                           
  1502                           ;main.c: 122: D_UART_Enable(0);
  1503  001190  0E00               	movlw	0
  1504  001192  EC33  F00E         	call	_D_UART_Enable
  1505                           
  1506                           ;main.c: 123: }
  1507  001196  0012               	return	
  1508  001198                     l2582:
  1509                           
  1510                           ;main.c: 125: else {
  1511                           ;main.c: 126: D_UART_Write("Oops", "Did not understand that command");
  1512  001198  0E56               	movlw	low STR_29
  1513  00119A  0100               	movlb	0	; () banked
  1514  00119C  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1515  00119E  0E08               	movlw	high STR_29
  1516  0011A0  0100               	movlb	0	; () banked
  1517  0011A2  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1518  0011A4  0E13               	movlw	low STR_30
  1519  0011A6  0100               	movlb	0	; () banked
  1520  0011A8  6F7E               	movwf	D_UART_Write@data& (0+255),b
  1521  0011AA  0E08               	movlw	high STR_30
  1522  0011AC  0100               	movlb	0	; () banked
  1523  0011AE  6F7F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1524  0011B0  0100               	movlb	0	; () banked
  1525  0011B2  517E               	movf	D_UART_Write@data& (0+255),w,b
  1526  0011B4  117F               	iorwf	(D_UART_Write@data+1)& (0+255),w,b
  1527  0011B6  A4D8               	btfss	status,2,c
  1528  0011B8  0E00               	movlw	low (__mediumconst shr (0+16))
  1529  0011BA  6F80               	movwf	(D_UART_Write@data+2)& (0+255),b
  1530  0011BC  ECDE  F009         	call	_D_UART_Write	;wreg free
  1531  0011C0  0012               	return	
  1532  0011C2                     __end_of_handle_message:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           postinc0	equ	0xFEE
  1539                           plusw0	equ	0xFEB
  1540                           fsr0h	equ	0xFEA
  1541                           fsr0l	equ	0xFE9
  1542                           wreg	equ	0xFE8
  1543                           postdec1	equ	0xFE5
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           plusw2	equ	0xFDB
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _strcmp *****************
  1552 ;; Defined at:
  1553 ;;		line 33 in file "/opt/microchip/xc8/v1.38/sources/common/strcmp.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1556 ;;		 -> D_UART_ReadBlock@cm(102), D_UART_Read@cm(102), 
  1557 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1558 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(3), 
  1559 ;;		 -> STR_24(3), STR_22(3), STR_20(3), STR_17(3), 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  r               1    5[BANK0 ] char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2    0[BANK0 ] int 
  1564 ;; Registers used:
  1565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1571 ;;      Params:         0       4       0       0       0       0       0       0       0
  1572 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1573 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1574 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1575 ;;Total ram usage:        6 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    8
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_handle_message
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text3
  1586  001A6A                     __ptext3:
  1587                           	opt stack 0
  1588  001A6A                     _strcmp:
  1589                           	opt stack 21
  1590                           
  1591                           ;incstack = 0
  1592  001A6A  D006               	goto	l2358
  1593  001A6C                     l2356:
  1594  001A6C  0100               	movlb	0	; () banked
  1595  001A6E  4B60               	infsnz	strcmp@s1& (0+255),f,b
  1596  001A70  2B61               	incf	(strcmp@s1+1)& (0+255),f,b
  1597  001A72  0100               	movlb	0	; () banked
  1598  001A74  4B62               	infsnz	strcmp@s2& (0+255),f,b
  1599  001A76  2B63               	incf	(strcmp@s2+1)& (0+255),f,b
  1600  001A78                     l2358:
  1601  001A78  C060  FFD9         	movff	strcmp@s1,fsr2l
  1602  001A7C  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  1603  001A80  50DF               	movf	indf2,w,c
  1604  001A82  0100               	movlb	0	; () banked
  1605  001A84  6F64               	movwf	??_strcmp& (0+255),b
  1606  001A86  C062  FFF6         	movff	strcmp@s2,tblptrl
  1607  001A8A  C063  FFF7         	movff	strcmp@s2+1,tblptrh
  1608  001A8E                     	if	0	;tblptru may be non-zero
  1609  001A8E                     	endif
  1610  001A8E                     	if	0	;tblptru may be non-zero
  1611  001A8E                     	endif
  1612  001A8E  0008               	tblrd		*
  1613  001A90  50F5               	movf	tablat,w,c
  1614  001A92  0800               	sublw	0
  1615  001A94  0100               	movlb	0	; () banked
  1616  001A96  2564               	addwf	??_strcmp& (0+255),w,b
  1617  001A98  0100               	movlb	0	; () banked
  1618  001A9A  6F65               	movwf	strcmp@r& (0+255),b
  1619  001A9C  0100               	movlb	0	; () banked
  1620  001A9E  5165               	movf	strcmp@r& (0+255),w,b
  1621  001AA0  A4D8               	btfss	status,2,c
  1622  001AA2  D007               	goto	l2362
  1623                           
  1624                           ; BSR set to: 0
  1625  001AA4  C060  FFD9         	movff	strcmp@s1,fsr2l
  1626  001AA8  C061  FFDA         	movff	strcmp@s1+1,fsr2h
  1627  001AAC  50DF               	movf	indf2,w,c
  1628  001AAE  A4D8               	btfss	status,2,c
  1629  001AB0  D7DD               	goto	l2356
  1630  001AB2                     l2362:
  1631                           
  1632                           ; BSR set to: 0
  1633  001AB2  0100               	movlb	0	; () banked
  1634  001AB4  5165               	movf	strcmp@r& (0+255),w,b
  1635  001AB6  0100               	movlb	0	; () banked
  1636  001AB8  6F60               	movwf	?_strcmp& (0+255),b
  1637  001ABA  6B61               	clrf	(?_strcmp+1)& (0+255),b
  1638  001ABC  BF60               	btfsc	?_strcmp& (0+255),7,b
  1639  001ABE  0761               	decf	(?_strcmp+1)& (0+255),f,b
  1640  001AC0  0012               	return	
  1641  001AC2                     __end_of_strcmp:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           postinc0	equ	0xFEE
  1648                           plusw0	equ	0xFEB
  1649                           fsr0h	equ	0xFEA
  1650                           fsr0l	equ	0xFE9
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1h	equ	0xFE2
  1654                           fsr1l	equ	0xFE1
  1655                           indf2	equ	0xFDF
  1656                           plusw2	equ	0xFDB
  1657                           fsr2h	equ	0xFDA
  1658                           fsr2l	equ	0xFD9
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _initialize *****************
  1662 ;; Defined at:
  1663 ;;		line 40 in file "main.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:   13
  1684 ;; This function calls:
  1685 ;;		_D_MCP3201_Enable
  1686 ;;		_D_MCP3201_Init
  1687 ;;		_D_PORT_Init
  1688 ;;		_D_TIMER0_Enable
  1689 ;;		_D_TIMRER0_Init
  1690 ;;		_D_UART_Enable
  1691 ;;		_D_UART_Init
  1692 ;;		_D_UART_Write
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;;		_handle_message
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text4
  1700  001878                     __ptext4:
  1701                           	opt stack 0
  1702  001878                     _initialize:
  1703                           	opt stack 17
  1704                           
  1705                           ;main.c: 41: D_PORT_Init();
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;incstack = 0
  1709  001878  EC08  F00E         	call	_D_PORT_Init	;wreg free
  1710                           
  1711                           ;main.c: 44: D_UART_Init("Panda", 9600, 1);
  1712  00187C  0E50               	movlw	low STR_14
  1713  00187E  0100               	movlb	0	; () banked
  1714  001880  6F6E               	movwf	D_UART_Init@name& (0+255),b
  1715  001882  0E08               	movlw	high STR_14
  1716  001884  0100               	movlb	0	; () banked
  1717  001886  6F6F               	movwf	(D_UART_Init@name+1)& (0+255),b
  1718  001888  0E25               	movlw	37
  1719  00188A  0100               	movlb	0	; () banked
  1720  00188C  6F71               	movwf	(D_UART_Init@baud+1)& (0+255),b
  1721  00188E  0E80               	movlw	128
  1722  001890  6F70               	movwf	D_UART_Init@baud& (0+255),b
  1723  001892  0E01               	movlw	1
  1724  001894  0100               	movlb	0	; () banked
  1725  001896  6F72               	movwf	D_UART_Init@interrupts& (0+255),b
  1726  001898  ECA2  F00A         	call	_D_UART_Init	;wreg free
  1727                           
  1728                           ;main.c: 45: D_UART_Enable(1);
  1729  00189C  0E01               	movlw	1
  1730  00189E  EC33  F00E         	call	_D_UART_Enable
  1731                           
  1732                           ;main.c: 48: D_MCP3201_Init();
  1733  0018A2  EC46  F00E         	call	_D_MCP3201_Init	;wreg free
  1734                           
  1735                           ;main.c: 49: D_MCP3201_Enable(1);
  1736  0018A6  0E01               	movlw	1
  1737  0018A8  EC76  F00E         	call	_D_MCP3201_Enable
  1738                           
  1739                           ;main.c: 52: D_TIMRER0_Init(256);
  1740  0018AC  0E01               	movlw	1
  1741  0018AE  0100               	movlb	0	; () banked
  1742  0018B0  6F62               	movwf	(D_TIMRER0_Init@prescale+1)& (0+255),b
  1743  0018B2  0E00               	movlw	0
  1744  0018B4  6F61               	movwf	D_TIMRER0_Init@prescale& (0+255),b
  1745  0018B6  EC44  F00A         	call	_D_TIMRER0_Init	;wreg free
  1746                           
  1747                           ;main.c: 53: D_TIMER0_Enable(1);
  1748  0018BA  0E01               	movlw	1
  1749  0018BC  EC20  F00E         	call	_D_TIMER0_Enable
  1750                           
  1751                           ;main.c: 55: D_UART_Write("IN", "Initialized");
  1752  0018C0  0E7D               	movlw	low STR_15
  1753  0018C2  0100               	movlb	0	; () banked
  1754  0018C4  6F7C               	movwf	D_UART_Write@command& (0+255),b
  1755  0018C6  0E08               	movlw	high STR_15
  1756  0018C8  0100               	movlb	0	; () banked
  1757  0018CA  6F7D               	movwf	(D_UART_Write@command+1)& (0+255),b
  1758  0018CC  0E44               	movlw	low STR_16
  1759  0018CE  0100               	movlb	0	; () banked
  1760  0018D0  6F7E               	movwf	D_UART_Write@data& (0+255),b
  1761  0018D2  0E08               	movlw	high STR_16
  1762  0018D4  0100               	movlb	0	; () banked
  1763  0018D6  6F7F               	movwf	(D_UART_Write@data+1)& (0+255),b
  1764  0018D8  0100               	movlb	0	; () banked
  1765  0018DA  517E               	movf	D_UART_Write@data& (0+255),w,b
  1766  0018DC  117F               	iorwf	(D_UART_Write@data+1)& (0+255),w,b
  1767  0018DE  A4D8               	btfss	status,2,c
  1768  0018E0  0E00               	movlw	low (__mediumconst shr (0+16))
  1769  0018E2  6F80               	movwf	(D_UART_Write@data+2)& (0+255),b
  1770  0018E4  ECDE  F009         	call	_D_UART_Write	;wreg free
  1771  0018E8  0012               	return		;funcret
  1772  0018EA                     __end_of_initialize:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           postinc0	equ	0xFEE
  1779                           plusw0	equ	0xFEB
  1780                           fsr0h	equ	0xFEA
  1781                           fsr0l	equ	0xFE9
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1h	equ	0xFE2
  1785                           fsr1l	equ	0xFE1
  1786                           indf2	equ	0xFDF
  1787                           plusw2	equ	0xFDB
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function _D_UART_Write *****************
  1793 ;; Defined at:
  1794 ;;		line 274 in file "Drivers/UART_Driver.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  command         2   28[BANK0 ] PTR const unsigned char 
  1797 ;;		 -> STR_33(3), STR_31(3), STR_29(5), STR_23(3), 
  1798 ;;		 -> STR_18(3), STR_15(3), 
  1799 ;;  data            3   30[BANK0 ] PTR const unsigned char 
  1800 ;;		 -> STR_34(2), STR_32(2), STR_30(32), STR_19(3), 
  1801 ;;		 -> STR_16(12), STR_14(6), ROM(32767), 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1813 ;;      Params:         0       5       0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1815 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1816 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1817 ;;Total ram usage:        6 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:   12
  1820 ;; This function calls:
  1821 ;;		_printf
  1822 ;; This function is called by:
  1823 ;;		_initialize
  1824 ;;		_handle_message
  1825 ;;		_read_inputs
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text5
  1830  0013BC                     __ptext5:
  1831                           	opt stack 0
  1832  0013BC                     _D_UART_Write:
  1833                           	opt stack 17
  1834                           
  1835                           ;UART_Driver.c: 275: printf(startCharacter);
  1836                           
  1837                           ;incstack = 0
  1838  0013BC  C04D  F06C         	movff	_startCharacter,printf@f
  1839  0013C0  C04E  F06D         	movff	_startCharacter+1,printf@f+1
  1840  0013C4  0100               	movlb	0	; () banked
  1841  0013C6  516C               	movf	printf@f& (0+255),w,b
  1842  0013C8  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1843  0013CA  A4D8               	btfss	status,2,c
  1844  0013CC  0E00               	movlw	low (__mediumconst shr (0+16))
  1845  0013CE  6F6E               	movwf	(printf@f+2)& (0+255),b
  1846  0013D0  ECAF  F005         	call	_printf	;wreg free
  1847                           
  1848                           ;UART_Driver.c: 277: printf(messageCharacter);
  1849  0013D4  C0E8  F06C         	movff	_messageCharacter,printf@f
  1850  0013D8  C0E9  F06D         	movff	_messageCharacter+1,printf@f+1
  1851  0013DC  0100               	movlb	0	; () banked
  1852  0013DE  516C               	movf	printf@f& (0+255),w,b
  1853  0013E0  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1854  0013E2  A4D8               	btfss	status,2,c
  1855  0013E4  0E00               	movlw	low (__mediumconst shr (0+16))
  1856  0013E6  6F6E               	movwf	(printf@f+2)& (0+255),b
  1857  0013E8  ECAF  F005         	call	_printf	;wreg free
  1858                           
  1859                           ;UART_Driver.c: 278: printf(deviceName);
  1860  0013EC  C0E5  F06C         	movff	_deviceName,printf@f
  1861  0013F0  C0E6  F06D         	movff	_deviceName+1,printf@f+1
  1862  0013F4  C0E7  F06E         	movff	_deviceName+2,printf@f+2
  1863  0013F8  ECAF  F005         	call	_printf	;wreg free
  1864                           
  1865                           ;UART_Driver.c: 280: printf(":");printf(command);
  1866  0013FC  0E91               	movlw	low STR_7
  1867  0013FE  0100               	movlb	0	; () banked
  1868  001400  6F6C               	movwf	printf@f& (0+255),b
  1869  001402  0E08               	movlw	high STR_7
  1870  001404  0100               	movlb	0	; () banked
  1871  001406  6F6D               	movwf	(printf@f+1)& (0+255),b
  1872  001408  0100               	movlb	0	; () banked
  1873  00140A  516C               	movf	printf@f& (0+255),w,b
  1874  00140C  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1875  00140E  A4D8               	btfss	status,2,c
  1876  001410  0E00               	movlw	low (__mediumconst shr (0+16))
  1877  001412  6F6E               	movwf	(printf@f+2)& (0+255),b
  1878  001414  ECAF  F005         	call	_printf	;wreg free
  1879  001418  C07C  F06C         	movff	D_UART_Write@command,printf@f
  1880  00141C  C07D  F06D         	movff	D_UART_Write@command+1,printf@f+1
  1881  001420  0100               	movlb	0	; () banked
  1882  001422  516C               	movf	printf@f& (0+255),w,b
  1883  001424  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1884  001426  A4D8               	btfss	status,2,c
  1885  001428  0E00               	movlw	low (__mediumconst shr (0+16))
  1886  00142A  6F6E               	movwf	(printf@f+2)& (0+255),b
  1887  00142C  ECAF  F005         	call	_printf	;wreg free
  1888                           
  1889                           ;UART_Driver.c: 282: printf(":");printf(data);
  1890  001430  0E91               	movlw	low STR_7
  1891  001432  0100               	movlb	0	; () banked
  1892  001434  6F6C               	movwf	printf@f& (0+255),b
  1893  001436  0E08               	movlw	high STR_7
  1894  001438  0100               	movlb	0	; () banked
  1895  00143A  6F6D               	movwf	(printf@f+1)& (0+255),b
  1896  00143C  0100               	movlb	0	; () banked
  1897  00143E  516C               	movf	printf@f& (0+255),w,b
  1898  001440  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1899  001442  A4D8               	btfss	status,2,c
  1900  001444  0E00               	movlw	low (__mediumconst shr (0+16))
  1901  001446  6F6E               	movwf	(printf@f+2)& (0+255),b
  1902  001448  ECAF  F005         	call	_printf	;wreg free
  1903  00144C  C07E  F06C         	movff	D_UART_Write@data,printf@f
  1904  001450  C07F  F06D         	movff	D_UART_Write@data+1,printf@f+1
  1905  001454  C080  F06E         	movff	D_UART_Write@data+2,printf@f+2
  1906  001458  ECAF  F005         	call	_printf	;wreg free
  1907                           
  1908                           ;UART_Driver.c: 284: printf(stopCharacter);
  1909  00145C  C04F  F06C         	movff	_stopCharacter,printf@f
  1910  001460  C050  F06D         	movff	_stopCharacter+1,printf@f+1
  1911  001464  0100               	movlb	0	; () banked
  1912  001466  516C               	movf	printf@f& (0+255),w,b
  1913  001468  116D               	iorwf	(printf@f+1)& (0+255),w,b
  1914  00146A  A4D8               	btfss	status,2,c
  1915  00146C  0E00               	movlw	low (__mediumconst shr (0+16))
  1916  00146E  6F6E               	movwf	(printf@f+2)& (0+255),b
  1917  001470  ECAF  F005         	call	_printf	;wreg free
  1918                           
  1919                           ;UART_Driver.c: 285: _delay((unsigned long)((1)*(16000000/4000.0)));
  1920  001474  0E06               	movlw	6
  1921  001476  0100               	movlb	0	; () banked
  1922  001478  6F81               	movwf	??_D_UART_Write& (0+255),b
  1923  00147A  0E30               	movlw	48
  1924  00147C                     u1957:
  1925  00147C  2EE8               	decfsz	wreg,f,c
  1926  00147E  D7FE               	goto	u1957
  1927  001480  2F81               	decfsz	??_D_UART_Write& (0+255),f,b
  1928  001482  D7FC               	goto	u1957
  1929  001484  D000               	nop2	
  1930  001486  0012               	return		;funcret
  1931  001488                     __end_of_D_UART_Write:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           postinc0	equ	0xFEE
  1938                           plusw0	equ	0xFEB
  1939                           fsr0h	equ	0xFEA
  1940                           fsr0l	equ	0xFE9
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1h	equ	0xFE2
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           plusw2	equ	0xFDB
  1947                           fsr2h	equ	0xFDA
  1948                           fsr2l	equ	0xFD9
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _D_UART_Init *****************
  1952 ;; Defined at:
  1953 ;;		line 236 in file "Drivers/UART_Driver.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1956 ;;		 -> STR_14(6), 
  1957 ;;  baud            2   16[BANK0 ] unsigned int 
  1958 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1970 ;;      Params:         0       5       0       0       0       0       0       0       0
  1971 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1972 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1973 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1974 ;;Total ram usage:        9 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    9
  1977 ;; This function calls:
  1978 ;;		_D_UART_Enable
  1979 ;;		___aldiv
  1980 ;; This function is called by:
  1981 ;;		_initialize
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text6
  1986  001544                     __ptext6:
  1987                           	opt stack 0
  1988  001544                     _D_UART_Init:
  1989                           	opt stack 20
  1990                           
  1991                           ;UART_Driver.c: 238: TRISCbits.TRISC6 = 0;
  1992                           
  1993                           ;incstack = 0
  1994  001544  9C94               	bcf	3988,6,c	;volatile
  1995                           
  1996                           ;UART_Driver.c: 239: TRISCbits.TRISC7 = 1;
  1997  001546  8E94               	bsf	3988,7,c	;volatile
  1998                           
  1999                           ;UART_Driver.c: 242: deviceName = name;
  2000  001548  C06E  F0E5         	movff	D_UART_Init@name,_deviceName
  2001  00154C  C06F  F0E6         	movff	D_UART_Init@name+1,_deviceName+1
  2002  001550  0100               	movlb	0	; () banked
  2003  001552  51E5               	movf	_deviceName& (0+255),w,b
  2004  001554  11E6               	iorwf	(_deviceName+1)& (0+255),w,b
  2005  001556  A4D8               	btfss	status,2,c
  2006  001558  0E00               	movlw	low (__mediumconst shr (0+16))
  2007  00155A  6FE7               	movwf	(_deviceName+2)& (0+255),b
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;UART_Driver.c: 243: D_UART_ReadFlag = 0;
  2011  00155C  0E00               	movlw	0
  2012  00155E  0100               	movlb	0	; () banked
  2013  001560  6FE1               	movwf	_D_UART_ReadFlag& (0+255),b
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;UART_Driver.c: 246: D_UART_Enable(0);
  2017  001562  0E00               	movlw	0
  2018  001564  EC33  F00E         	call	_D_UART_Enable
  2019                           
  2020                           ;UART_Driver.c: 249: TXSTAbits.TX9 = 0;
  2021  001568  9CAC               	bcf	4012,6,c	;volatile
  2022                           
  2023                           ;UART_Driver.c: 250: TXSTAbits.SYNC = 0;
  2024  00156A  98AC               	bcf	4012,4,c	;volatile
  2025                           
  2026                           ;UART_Driver.c: 251: TXSTAbits.BRGH = 0;
  2027  00156C  94AC               	bcf	4012,2,c	;volatile
  2028                           
  2029                           ;UART_Driver.c: 254: RCSTAbits.RX9 = 0;
  2030  00156E  9CAB               	bcf	4011,6,c	;volatile
  2031                           
  2032                           ;UART_Driver.c: 257: BAUDCONbits.RXDTP = 1;
  2033  001570  8AB8               	bsf	4024,5,c	;volatile
  2034                           
  2035                           ;UART_Driver.c: 258: BAUDCONbits.TXCKP = 1;
  2036  001572  88B8               	bsf	4024,4,c	;volatile
  2037                           
  2038                           ;UART_Driver.c: 259: BAUDCONbits.BRG16 = 0;
  2039  001574  96B8               	bcf	4024,3,c	;volatile
  2040                           
  2041                           ;UART_Driver.c: 261: SPBRG = ((16000000/baud)/64)-1;
  2042  001576  C070  F064         	movff	D_UART_Init@baud,___aldiv@divisor
  2043  00157A  C071  F065         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  2044  00157E  0100               	movlb	0	; () banked
  2045  001580  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  2046  001582  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  2047  001584  0E00               	movlw	0
  2048  001586  0100               	movlb	0	; () banked
  2049  001588  6F60               	movwf	___aldiv@dividend& (0+255),b
  2050  00158A  0E24               	movlw	36
  2051  00158C  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  2052  00158E  0EF4               	movlw	244
  2053  001590  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  2054  001592  0E00               	movlw	0
  2055  001594  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  2056  001596  ECE1  F008         	call	___aldiv	;wreg free
  2057  00159A  C060  F073         	movff	?___aldiv,_D_UART_Init$2161
  2058  00159E  C061  F074         	movff	?___aldiv+1,_D_UART_Init$2161+1
  2059  0015A2  C062  F075         	movff	?___aldiv+2,_D_UART_Init$2161+2
  2060  0015A6  C063  F076         	movff	?___aldiv+3,_D_UART_Init$2161+3
  2061                           
  2062                           ;UART_Driver.c: 261: SPBRG = ((16000000/baud)/64)-1;
  2063  0015AA  C073  F060         	movff	_D_UART_Init$2161,___aldiv@dividend
  2064  0015AE  C074  F061         	movff	_D_UART_Init$2161+1,___aldiv@dividend+1
  2065  0015B2  C075  F062         	movff	_D_UART_Init$2161+2,___aldiv@dividend+2
  2066  0015B6  C076  F063         	movff	_D_UART_Init$2161+3,___aldiv@dividend+3
  2067  0015BA  0E40               	movlw	64
  2068  0015BC  0100               	movlb	0	; () banked
  2069  0015BE  6F64               	movwf	___aldiv@divisor& (0+255),b
  2070  0015C0  0E00               	movlw	0
  2071  0015C2  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
  2072  0015C4  0E00               	movlw	0
  2073  0015C6  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
  2074  0015C8  0E00               	movlw	0
  2075  0015CA  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
  2076  0015CC  ECE1  F008         	call	___aldiv	;wreg free
  2077  0015D0  0100               	movlb	0	; () banked
  2078  0015D2  0560               	decf	?___aldiv& (0+255),w,b
  2079  0015D4  6EAF               	movwf	4015,c	;volatile
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;UART_Driver.c: 264: if (interrupts) {
  2083  0015D6  0100               	movlb	0	; () banked
  2084  0015D8  5172               	movf	D_UART_Init@interrupts& (0+255),w,b
  2085  0015DA  0100               	movlb	0	; () banked
  2086  0015DC  B4D8               	btfsc	status,2,c
  2087  0015DE  0012               	return	
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;UART_Driver.c: 265: RCONbits.IPEN = 1;
  2091  0015E0  8ED0               	bsf	4048,7,c	;volatile
  2092                           
  2093                           ;UART_Driver.c: 266: INTCONbits.GIEH = 1;
  2094  0015E2  8EF2               	bsf	intcon,7,c	;volatile
  2095                           
  2096                           ;UART_Driver.c: 267: INTCONbits.GIEL = 1;
  2097  0015E4  8CF2               	bsf	intcon,6,c	;volatile
  2098                           
  2099                           ;UART_Driver.c: 268: PIR1bits.RCIF = 0;
  2100  0015E6  9A9E               	bcf	3998,5,c	;volatile
  2101                           
  2102                           ;UART_Driver.c: 269: IPR1bits.RCIP = 0;
  2103  0015E8  9A9F               	bcf	3999,5,c	;volatile
  2104                           
  2105                           ;UART_Driver.c: 270: PIE1bits.RCIE = 1;
  2106  0015EA  8A9D               	bsf	3997,5,c	;volatile
  2107  0015EC  0012               	return	
  2108  0015EE                     __end_of_D_UART_Init:
  2109                           	opt stack 0
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           intcon	equ	0xFF2
  2115                           postinc0	equ	0xFEE
  2116                           plusw0	equ	0xFEB
  2117                           fsr0h	equ	0xFEA
  2118                           fsr0l	equ	0xFE9
  2119                           wreg	equ	0xFE8
  2120                           postdec1	equ	0xFE5
  2121                           fsr1h	equ	0xFE2
  2122                           fsr1l	equ	0xFE1
  2123                           indf2	equ	0xFDF
  2124                           plusw2	equ	0xFDB
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function ___aldiv *****************
  2130 ;; Defined at:
  2131 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/aldiv.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  dividend        4    0[BANK0 ] long 
  2134 ;;  divisor         4    4[BANK0 ] long 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  quotient        4   10[BANK0 ] long 
  2137 ;;  sign            1    9[BANK0 ] unsigned char 
  2138 ;;  counter         1    8[BANK0 ] unsigned char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  4    0[BANK0 ] long 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:         0       8       0       0       0       0       0       0       0
  2149 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2151 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2152 ;;Total ram usage:       14 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    8
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_D_UART_Init
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text7
  2163  0011C2                     __ptext7:
  2164                           	opt stack 0
  2165  0011C2                     ___aldiv:
  2166                           	opt stack 20
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;incstack = 0
  2170  0011C2  0E00               	movlw	0
  2171  0011C4  0100               	movlb	0	; () banked
  2172  0011C6  6F69               	movwf	___aldiv@sign& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175  0011C8  0100               	movlb	0	; () banked
  2176  0011CA  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2177  0011CC  D00C               	goto	l2034
  2178                           
  2179                           ; BSR set to: 0
  2180  0011CE  0100               	movlb	0	; () banked
  2181  0011D0  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2182  0011D2  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2183  0011D4  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2184  0011D6  6D64               	negf	___aldiv@divisor& (0+255),b
  2185  0011D8  0E00               	movlw	0
  2186  0011DA  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2187  0011DC  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2188  0011DE  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2189                           
  2190                           ; BSR set to: 0
  2191  0011E0  0E01               	movlw	1
  2192  0011E2  0100               	movlb	0	; () banked
  2193  0011E4  6F69               	movwf	___aldiv@sign& (0+255),b
  2194  0011E6                     l2034:
  2195                           
  2196                           ; BSR set to: 0
  2197  0011E6  0100               	movlb	0	; () banked
  2198  0011E8  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2199  0011EA  D00C               	goto	l2040
  2200                           
  2201                           ; BSR set to: 0
  2202  0011EC  0100               	movlb	0	; () banked
  2203  0011EE  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2204  0011F0  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2205  0011F2  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2206  0011F4  6D60               	negf	___aldiv@dividend& (0+255),b
  2207  0011F6  0E00               	movlw	0
  2208  0011F8  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2209  0011FA  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2210  0011FC  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2211                           
  2212                           ; BSR set to: 0
  2213  0011FE  0E01               	movlw	1
  2214  001200  0100               	movlb	0	; () banked
  2215  001202  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  2216  001204                     l2040:
  2217                           
  2218                           ; BSR set to: 0
  2219  001204  0E00               	movlw	0
  2220  001206  0100               	movlb	0	; () banked
  2221  001208  6F6A               	movwf	___aldiv@quotient& (0+255),b
  2222  00120A  0E00               	movlw	0
  2223  00120C  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  2224  00120E  0E00               	movlw	0
  2225  001210  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  2226  001212  0E00               	movlw	0
  2227  001214  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230  001216  0100               	movlb	0	; () banked
  2231  001218  5164               	movf	___aldiv@divisor& (0+255),w,b
  2232  00121A  0100               	movlb	0	; () banked
  2233  00121C  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2234  00121E  0100               	movlb	0	; () banked
  2235  001220  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2236  001222  0100               	movlb	0	; () banked
  2237  001224  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  2238  001226  B4D8               	btfsc	status,2,c
  2239  001228  D042               	goto	l2062
  2240                           
  2241                           ; BSR set to: 0
  2242  00122A  0E01               	movlw	1
  2243  00122C  0100               	movlb	0	; () banked
  2244  00122E  6F68               	movwf	___aldiv@counter& (0+255),b
  2245  001230  D008               	goto	l2048
  2246  001232                     l2046:
  2247                           
  2248                           ; BSR set to: 0
  2249  001232  0100               	movlb	0	; () banked
  2250  001234  90D8               	bcf	status,0,c
  2251  001236  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  2252  001238  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2253  00123A  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2254  00123C  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2255  00123E  0100               	movlb	0	; () banked
  2256  001240  2B68               	incf	___aldiv@counter& (0+255),f,b
  2257  001242                     l2048:
  2258                           
  2259                           ; BSR set to: 0
  2260  001242  0100               	movlb	0	; () banked
  2261  001244  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2262  001246  D7F5               	goto	l2046
  2263  001248                     l2050:
  2264                           
  2265                           ; BSR set to: 0
  2266  001248  0100               	movlb	0	; () banked
  2267  00124A  90D8               	bcf	status,0,c
  2268  00124C  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  2269  00124E  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2270  001250  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2271  001252  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2272                           
  2273                           ; BSR set to: 0
  2274  001254  0100               	movlb	0	; () banked
  2275  001256  5164               	movf	___aldiv@divisor& (0+255),w,b
  2276  001258  0100               	movlb	0	; () banked
  2277  00125A  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  2278  00125C  0100               	movlb	0	; () banked
  2279  00125E  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2280  001260  0100               	movlb	0	; () banked
  2281  001262  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2282  001264  0100               	movlb	0	; () banked
  2283  001266  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2284  001268  0100               	movlb	0	; () banked
  2285  00126A  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2286  00126C  0100               	movlb	0	; () banked
  2287  00126E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2288  001270  0100               	movlb	0	; () banked
  2289  001272  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2290  001274  A0D8               	btfss	status,0,c
  2291  001276  D012               	goto	l2058
  2292                           
  2293                           ; BSR set to: 0
  2294  001278  0100               	movlb	0	; () banked
  2295  00127A  5164               	movf	___aldiv@divisor& (0+255),w,b
  2296  00127C  0100               	movlb	0	; () banked
  2297  00127E  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  2298  001280  0100               	movlb	0	; () banked
  2299  001282  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2300  001284  0100               	movlb	0	; () banked
  2301  001286  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2302  001288  0100               	movlb	0	; () banked
  2303  00128A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2304  00128C  0100               	movlb	0	; () banked
  2305  00128E  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2306  001290  0100               	movlb	0	; () banked
  2307  001292  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2308  001294  0100               	movlb	0	; () banked
  2309  001296  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2310                           
  2311                           ; BSR set to: 0
  2312  001298  0100               	movlb	0	; () banked
  2313  00129A  816A               	bsf	___aldiv@quotient& (0+255),0,b
  2314  00129C                     l2058:
  2315                           
  2316                           ; BSR set to: 0
  2317  00129C  0100               	movlb	0	; () banked
  2318  00129E  90D8               	bcf	status,0,c
  2319  0012A0  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2320  0012A2  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2321  0012A4  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2322  0012A6  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  2323                           
  2324                           ; BSR set to: 0
  2325  0012A8  0100               	movlb	0	; () banked
  2326  0012AA  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  2327  0012AC  D7CD               	goto	l2050
  2328  0012AE                     l2062:
  2329                           
  2330                           ; BSR set to: 0
  2331  0012AE  0100               	movlb	0	; () banked
  2332  0012B0  5169               	movf	___aldiv@sign& (0+255),w,b
  2333  0012B2  0100               	movlb	0	; () banked
  2334  0012B4  B4D8               	btfsc	status,2,c
  2335  0012B6  D009               	goto	l2066
  2336                           
  2337                           ; BSR set to: 0
  2338  0012B8  0100               	movlb	0	; () banked
  2339  0012BA  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2340  0012BC  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2341  0012BE  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2342  0012C0  6D6A               	negf	___aldiv@quotient& (0+255),b
  2343  0012C2  0E00               	movlw	0
  2344  0012C4  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2345  0012C6  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2346  0012C8  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2347  0012CA                     l2066:
  2348                           
  2349                           ; BSR set to: 0
  2350  0012CA  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  2351  0012CE  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  2352  0012D2  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  2353  0012D6  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  2354  0012DA  0012               	return	
  2355  0012DC                     __end_of___aldiv:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           intcon	equ	0xFF2
  2362                           postinc0	equ	0xFEE
  2363                           plusw0	equ	0xFEB
  2364                           fsr0h	equ	0xFEA
  2365                           fsr0l	equ	0xFE9
  2366                           wreg	equ	0xFE8
  2367                           postdec1	equ	0xFE5
  2368                           fsr1h	equ	0xFE2
  2369                           fsr1l	equ	0xFE1
  2370                           indf2	equ	0xFDF
  2371                           plusw2	equ	0xFDB
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _D_TIMRER0_Init *****************
  2377 ;; Defined at:
  2378 ;;		line 30 in file "Drivers/TIMER0_Driver.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  prescale        2    1[BANK0 ] unsigned int 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2392 ;;      Params:         0       2       0       0       0       0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2394 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2395 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2396 ;;Total ram usage:        4 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    9
  2399 ;; This function calls:
  2400 ;;		_D_TIMER0_Enable
  2401 ;; This function is called by:
  2402 ;;		_initialize
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text8
  2407  001488                     __ptext8:
  2408                           	opt stack 0
  2409  001488                     _D_TIMRER0_Init:
  2410                           	opt stack 20
  2411                           
  2412                           ;TIMER0_Driver.c: 31: D_TIMER0_Enable(0);
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;incstack = 0
  2416  001488  0E00               	movlw	0
  2417  00148A  EC20  F00E         	call	_D_TIMER0_Enable
  2418                           
  2419                           ;TIMER0_Driver.c: 34: T0CONbits.T08BIT = 1;
  2420  00148E  8CD5               	bsf	4053,6,c	;volatile
  2421                           
  2422                           ;TIMER0_Driver.c: 35: T0CONbits.T0CS = 0;
  2423  001490  9AD5               	bcf	4053,5,c	;volatile
  2424                           
  2425                           ;TIMER0_Driver.c: 36: T0CONbits.PSA = 0;
  2426  001492  96D5               	bcf	4053,3,c	;volatile
  2427                           
  2428                           ;TIMER0_Driver.c: 37: switch(prescale) {
  2429  001494  D021               	goto	l2204
  2430  001496                     l262:
  2431                           
  2432                           ; BSR set to: 0
  2433  001496  90D5               	bcf	4053,0,c	;volatile
  2434  001498  92D5               	bcf	4053,1,c	;volatile
  2435  00149A  94D5               	bcf	4053,2,c	;volatile
  2436  00149C  D048               	goto	l2206
  2437  00149E                     l2190:
  2438                           
  2439                           ; BSR set to: 0
  2440  00149E  50D5               	movf	4053,w,c	;volatile
  2441  0014A0  0BF8               	andlw	-8
  2442  0014A2  0901               	iorlw	1
  2443  0014A4  D013               	goto	L5
  2444  0014A6                     l2192:
  2445                           
  2446                           ; BSR set to: 0
  2447  0014A6  50D5               	movf	4053,w,c	;volatile
  2448  0014A8  0BF8               	andlw	-8
  2449  0014AA  0902               	iorlw	2
  2450  0014AC  D00F               	goto	L5
  2451  0014AE                     l2194:
  2452                           
  2453                           ; BSR set to: 0
  2454  0014AE  50D5               	movf	4053,w,c	;volatile
  2455  0014B0  0BF8               	andlw	-8
  2456  0014B2  0903               	iorlw	3
  2457  0014B4  D00B               	goto	L5
  2458  0014B6                     l2196:
  2459                           
  2460                           ; BSR set to: 0
  2461  0014B6  50D5               	movf	4053,w,c	;volatile
  2462  0014B8  0BF8               	andlw	-8
  2463  0014BA  0904               	iorlw	4
  2464  0014BC  D007               	goto	L5
  2465  0014BE                     l2198:
  2466                           
  2467                           ; BSR set to: 0
  2468  0014BE  50D5               	movf	4053,w,c	;volatile
  2469  0014C0  0BF8               	andlw	-8
  2470  0014C2  0905               	iorlw	5
  2471  0014C4  D003               	goto	L5
  2472  0014C6                     l2200:
  2473                           
  2474                           ; BSR set to: 0
  2475  0014C6  50D5               	movf	4053,w,c	;volatile
  2476  0014C8  0BF8               	andlw	-8
  2477  0014CA  0906               	iorlw	6
  2478  0014CC                     L5:
  2479  0014CC  6ED5               	movwf	4053,c	;volatile
  2480  0014CE  D02F               	goto	l2206
  2481  0014D0                     l269:
  2482                           
  2483                           ; BSR set to: 0
  2484  0014D0  80D5               	bsf	4053,0,c	;volatile
  2485  0014D2  82D5               	bsf	4053,1,c	;volatile
  2486  0014D4  84D5               	bsf	4053,2,c	;volatile
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;TIMER0_Driver.c: 48: }
  2490  0014D6  D02B               	goto	l2206
  2491  0014D8                     l2204:
  2492  0014D8  C061  F063         	movff	D_TIMRER0_Init@prescale,??_D_TIMRER0_Init
  2493  0014DC  C062  F064         	movff	D_TIMRER0_Init@prescale+1,??_D_TIMRER0_Init+1
  2494                           
  2495                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2496                           ; Switch size 1, requested type "space"
  2497                           ; Number of cases is 2, Range of values is 0 to 1
  2498                           ; switch strategies available:
  2499                           ; Name         Instructions Cycles
  2500                           ; simple_byte            7     4 (average)
  2501                           ;	Chosen strategy is simple_byte
  2502  0014E0  0100               	movlb	0	; () banked
  2503  0014E2  5164               	movf	(??_D_TIMRER0_Init+1)& (0+255),w,b
  2504  0014E4  0A00               	xorlw	0	; case 0
  2505  0014E6  B4D8               	btfsc	status,2,c
  2506  0014E8  D004               	goto	l2692
  2507  0014EA  0A01               	xorlw	1	; case 1
  2508  0014EC  B4D8               	btfsc	status,2,c
  2509  0014EE  D019               	goto	l2694
  2510  0014F0  D7D2               	goto	l262
  2511  0014F2                     l2692:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ; Switch size 1, requested type "space"
  2515                           ; Number of cases is 7, Range of values is 2 to 128
  2516                           ; switch strategies available:
  2517                           ; Name         Instructions Cycles
  2518                           ; simple_byte           22    12 (average)
  2519                           ;	Chosen strategy is simple_byte
  2520  0014F2  0100               	movlb	0	; () banked
  2521  0014F4  5163               	movf	??_D_TIMRER0_Init& (0+255),w,b
  2522  0014F6  0A02               	xorlw	2	; case 2
  2523  0014F8  B4D8               	btfsc	status,2,c
  2524  0014FA  D7CD               	goto	l262
  2525  0014FC  0A06               	xorlw	6	; case 4
  2526  0014FE  B4D8               	btfsc	status,2,c
  2527  001500  D7CE               	goto	l2190
  2528  001502  0A0C               	xorlw	12	; case 8
  2529  001504  B4D8               	btfsc	status,2,c
  2530  001506  D7CF               	goto	l2192
  2531  001508  0A18               	xorlw	24	; case 16
  2532  00150A  B4D8               	btfsc	status,2,c
  2533  00150C  D7D0               	goto	l2194
  2534  00150E  0A30               	xorlw	48	; case 32
  2535  001510  B4D8               	btfsc	status,2,c
  2536  001512  D7D1               	goto	l2196
  2537  001514  0A60               	xorlw	96	; case 64
  2538  001516  B4D8               	btfsc	status,2,c
  2539  001518  D7D2               	goto	l2198
  2540  00151A  0AC0               	xorlw	192	; case 128
  2541  00151C  B4D8               	btfsc	status,2,c
  2542  00151E  D7D3               	goto	l2200
  2543  001520  D7BA               	goto	l262
  2544  001522                     l2694:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 1, Range of values is 0 to 0
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte            4     3 (average)
  2552                           ;	Chosen strategy is simple_byte
  2553  001522  0100               	movlb	0	; () banked
  2554  001524  5163               	movf	??_D_TIMRER0_Init& (0+255),w,b
  2555  001526  0A00               	xorlw	0	; case 0
  2556  001528  B4D8               	btfsc	status,2,c
  2557  00152A  D7D2               	goto	l269
  2558  00152C  D7B4               	goto	l262
  2559  00152E                     l2206:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;TIMER0_Driver.c: 49: TMR0L = 0;
  2563  00152E  0E00               	movlw	0
  2564  001530  6ED6               	movwf	4054,c	;volatile
  2565                           
  2566                           ;TIMER0_Driver.c: 50: TMR0H = 0;
  2567  001532  0E00               	movlw	0
  2568  001534  6ED7               	movwf	4055,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;TIMER0_Driver.c: 53: RCONbits.IPEN = 1;
  2572  001536  8ED0               	bsf	4048,7,c	;volatile
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;TIMER0_Driver.c: 54: INTCONbits.GIEH = 1;
  2576  001538  8EF2               	bsf	intcon,7,c	;volatile
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;TIMER0_Driver.c: 55: INTCONbits.GIEL = 1;
  2580  00153A  8CF2               	bsf	intcon,6,c	;volatile
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;TIMER0_Driver.c: 56: INTCONbits.TMR0IE = 0;
  2584  00153C  9AF2               	bcf	intcon,5,c	;volatile
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;TIMER0_Driver.c: 57: INTCONbits.TMR0IF = 0;
  2588  00153E  94F2               	bcf	intcon,2,c	;volatile
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;TIMER0_Driver.c: 58: INTCON2bits.TMR0IP = 1;
  2592  001540  84F1               	bsf	intcon2,2,c	;volatile
  2593                           
  2594                           ; BSR set to: 0
  2595  001542  0012               	return		;funcret
  2596  001544                     __end_of_D_TIMRER0_Init:
  2597                           	opt stack 0
  2598                           tblptru	equ	0xFF8
  2599                           tblptrh	equ	0xFF7
  2600                           tblptrl	equ	0xFF6
  2601                           tablat	equ	0xFF5
  2602                           intcon	equ	0xFF2
  2603                           intcon2	equ	0xFF1
  2604                           postinc0	equ	0xFEE
  2605                           plusw0	equ	0xFEB
  2606                           fsr0h	equ	0xFEA
  2607                           fsr0l	equ	0xFE9
  2608                           wreg	equ	0xFE8
  2609                           postdec1	equ	0xFE5
  2610                           fsr1h	equ	0xFE2
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           plusw2	equ	0xFDB
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8
  2617                           
  2618 ;; *************** function _D_TIMER0_Enable *****************
  2619 ;; Defined at:
  2620 ;;		line 61 in file "Drivers/TIMER0_Driver.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  enable          1    wreg     unsigned char 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  enable          1    0[BANK0 ] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2634 ;;      Params:         0       0       0       0       0       0       0       0       0
  2635 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2637 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2638 ;;Total ram usage:        1 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    8
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_D_TIMRER0_Init
  2645 ;;		_initialize
  2646 ;;		_handle_message
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text9
  2651  001C40                     __ptext9:
  2652                           	opt stack 0
  2653  001C40                     _D_TIMER0_Enable:
  2654                           	opt stack 20
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;incstack = 0
  2658                           ;D_TIMER0_Enable@enable stored from wreg
  2659  001C40  0100               	movlb	0	; () banked
  2660  001C42  6F60               	movwf	D_TIMER0_Enable@enable& (0+255),b
  2661                           
  2662                           ;TIMER0_Driver.c: 62: if (enable) {
  2663  001C44  0100               	movlb	0	; () banked
  2664  001C46  5160               	movf	D_TIMER0_Enable@enable& (0+255),w,b
  2665  001C48  0100               	movlb	0	; () banked
  2666  001C4A  B4D8               	btfsc	status,2,c
  2667  001C4C  D006               	goto	l273
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;TIMER0_Driver.c: 63: T0CONbits.TMR0ON = 1;
  2671  001C4E  8ED5               	bsf	4053,7,c	;volatile
  2672                           
  2673                           ;TIMER0_Driver.c: 64: INTCONbits.TMR0IE = 1;
  2674  001C50  8AF2               	bsf	intcon,5,c	;volatile
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;TIMER0_Driver.c: 65: D_TIMER0_Flag = 0;
  2678  001C52  0E00               	movlw	0
  2679  001C54  0100               	movlb	0	; () banked
  2680  001C56  6FE0               	movwf	_D_TIMER0_Flag& (0+255),b
  2681                           
  2682                           ;TIMER0_Driver.c: 66: } else {
  2683  001C58  0012               	return	
  2684  001C5A                     l273:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;TIMER0_Driver.c: 67: T0CONbits.TMR0ON = 0;
  2688  001C5A  9ED5               	bcf	4053,7,c	;volatile
  2689                           
  2690                           ;TIMER0_Driver.c: 68: INTCONbits.TMR0IE = 0;
  2691  001C5C  9AF2               	bcf	intcon,5,c	;volatile
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;TIMER0_Driver.c: 69: D_TIMER0_Flag = 0;
  2695  001C5E  0E00               	movlw	0
  2696  001C60  0100               	movlb	0	; () banked
  2697  001C62  6FE0               	movwf	_D_TIMER0_Flag& (0+255),b
  2698  001C64  0012               	return	
  2699  001C66                     __end_of_D_TIMER0_Enable:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           intcon	equ	0xFF2
  2706                           intcon2	equ	0xFF1
  2707                           postinc0	equ	0xFEE
  2708                           plusw0	equ	0xFEB
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           plusw2	equ	0xFDB
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _D_PORT_Init *****************
  2722 ;; Defined at:
  2723 ;;		line 31 in file "Drivers/PORT_Driver.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, status,2
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2740 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    8
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		_initialize
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text10
  2752  001C10                     __ptext10:
  2753                           	opt stack 0
  2754  001C10                     _D_PORT_Init:
  2755                           	opt stack 21
  2756                           
  2757                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;incstack = 0
  2761  001C10  0E00               	movlw	0
  2762  001C12  6E92               	movwf	3986,c	;volatile
  2763  001C14  0E00               	movlw	0
  2764  001C16  6E80               	movwf	3968,c	;volatile
  2765                           
  2766                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  2767  001C18  0E00               	movlw	0
  2768  001C1A  6E93               	movwf	3987,c	;volatile
  2769  001C1C  0E00               	movlw	0
  2770  001C1E  6E81               	movwf	3969,c	;volatile
  2771                           
  2772                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  2773  001C20  0E00               	movlw	0
  2774  001C22  6E94               	movwf	3988,c	;volatile
  2775  001C24  0E00               	movlw	0
  2776  001C26  6E82               	movwf	3970,c	;volatile
  2777                           
  2778                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  2779  001C28  0E0F               	movlw	15
  2780  001C2A  6EC1               	movwf	4033,c	;volatile
  2781                           
  2782                           ;PORT_Driver.c: 37: TRISBbits.TRISB3 = 0; LATBbits.LATB3 = 0;
  2783  001C2C  9693               	bcf	3987,3,c	;volatile
  2784  001C2E  968A               	bcf	3978,3,c	;volatile
  2785                           
  2786                           ;PORT_Driver.c: 38: TRISBbits.TRISB4 = 0; LATBbits.LATB4 = 0;
  2787  001C30  9893               	bcf	3987,4,c	;volatile
  2788  001C32  988A               	bcf	3978,4,c	;volatile
  2789                           
  2790                           ;PORT_Driver.c: 39: TRISBbits.TRISB5 = 0; LATBbits.LATB5 = 0;
  2791  001C34  9A93               	bcf	3987,5,c	;volatile
  2792  001C36  9A8A               	bcf	3978,5,c	;volatile
  2793                           
  2794                           ;PORT_Driver.c: 40: TRISBbits.TRISB6 = 0; LATBbits.LATB6 = 0;
  2795  001C38  9C93               	bcf	3987,6,c	;volatile
  2796  001C3A  9C8A               	bcf	3978,6,c	;volatile
  2797                           
  2798                           ;PORT_Driver.c: 42: TRISBbits.TRISB7 = 1;
  2799  001C3C  8E93               	bsf	3987,7,c	;volatile
  2800  001C3E  0012               	return		;funcret
  2801  001C40                     __end_of_D_PORT_Init:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           tblptrh	equ	0xFF7
  2805                           tblptrl	equ	0xFF6
  2806                           tablat	equ	0xFF5
  2807                           intcon	equ	0xFF2
  2808                           intcon2	equ	0xFF1
  2809                           postinc0	equ	0xFEE
  2810                           plusw0	equ	0xFEB
  2811                           fsr0h	equ	0xFEA
  2812                           fsr0l	equ	0xFE9
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1h	equ	0xFE2
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           plusw2	equ	0xFDB
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _D_MCP3201_Init *****************
  2824 ;; Defined at:
  2825 ;;		line 56 in file "Drivers/MCP3201_Driver.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2839 ;;      Params:         0       0       0       0       0       0       0       0       0
  2840 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2842 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2843 ;;Total ram usage:        0 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:   10
  2846 ;; This function calls:
  2847 ;;		_D_SPI_Init
  2848 ;; This function is called by:
  2849 ;;		_initialize
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text11
  2854  001C8C                     __ptext11:
  2855                           	opt stack 0
  2856  001C8C                     _D_MCP3201_Init:
  2857                           	opt stack 19
  2858                           
  2859                           ;MCP3201_Driver.c: 58: TRISBbits.TRISB2 = 0;
  2860                           
  2861                           ;incstack = 0
  2862  001C8C  9493               	bcf	3987,2,c	;volatile
  2863                           
  2864                           ;MCP3201_Driver.c: 59: PORTBbits.RB2 = 1;
  2865  001C8E  8481               	bsf	3969,2,c	;volatile
  2866                           
  2867                           ;MCP3201_Driver.c: 62: msbBits = 0x00;
  2868  001C90  0E00               	movlw	0
  2869  001C92  0100               	movlb	0	; () banked
  2870  001C94  6FE4               	movwf	_msbBits& (0+255),b
  2871                           
  2872                           ;MCP3201_Driver.c: 63: lsbBits = 0x00;
  2873  001C96  0E00               	movlw	0
  2874  001C98  0100               	movlb	0	; () banked
  2875  001C9A  6FE3               	movwf	_lsbBits& (0+255),b
  2876                           
  2877                           ;MCP3201_Driver.c: 64: analogValue = 0x0000;
  2878  001C9C  0E00               	movlw	0
  2879  001C9E  0100               	movlb	0	; () banked
  2880  001CA0  6FDD               	movwf	(_analogValue+1)& (0+255),b
  2881  001CA2  0E00               	movlw	0
  2882  001CA4  6FDC               	movwf	_analogValue& (0+255),b
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;MCP3201_Driver.c: 67: D_SPI_Init();
  2886  001CA6  EC56  F00E         	call	_D_SPI_Init	;wreg free
  2887  001CAA  0012               	return		;funcret
  2888  001CAC                     __end_of_D_MCP3201_Init:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           intcon	equ	0xFF2
  2895                           intcon2	equ	0xFF1
  2896                           postinc0	equ	0xFEE
  2897                           plusw0	equ	0xFEB
  2898                           fsr0h	equ	0xFEA
  2899                           fsr0l	equ	0xFE9
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           plusw2	equ	0xFDB
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _D_SPI_Init *****************
  2911 ;; Defined at:
  2912 ;;		line 32 in file "Drivers/SPI_Driver.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2926 ;;      Params:         0       0       0       0       0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2929 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    9
  2933 ;; This function calls:
  2934 ;;		_D_SPI_Enable
  2935 ;; This function is called by:
  2936 ;;		_D_MCP3201_Init
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text12
  2941  001CAC                     __ptext12:
  2942                           	opt stack 0
  2943  001CAC                     _D_SPI_Init:
  2944                           	opt stack 19
  2945                           
  2946                           ;SPI_Driver.c: 34: TRISBbits.TRISB1 = 0;
  2947                           
  2948                           ;incstack = 0
  2949  001CAC  9293               	bcf	3987,1,c	;volatile
  2950                           
  2951                           ;SPI_Driver.c: 35: TRISBbits.TRISB0 = 1;
  2952  001CAE  8093               	bsf	3987,0,c	;volatile
  2953                           
  2954                           ;SPI_Driver.c: 38: SSPBUF = 0x00;
  2955  001CB0  0E00               	movlw	0
  2956  001CB2  6EC9               	movwf	4041,c	;volatile
  2957                           
  2958                           ;SPI_Driver.c: 41: D_SPI_Enable(0);
  2959  001CB4  0E00               	movlw	0
  2960  001CB6  EC85  F00E         	call	_D_SPI_Enable
  2961                           
  2962                           ;SPI_Driver.c: 44: SSPSTATbits.SMP = 0;
  2963  001CBA  9EC7               	bcf	4039,7,c	;volatile
  2964                           
  2965                           ;SPI_Driver.c: 45: SSPSTATbits.CKE = 0;
  2966  001CBC  9CC7               	bcf	4039,6,c	;volatile
  2967                           
  2968                           ;SPI_Driver.c: 48: SSPCON1bits.CKP = 1;
  2969  001CBE  88C6               	bsf	4038,4,c	;volatile
  2970                           
  2971                           ;SPI_Driver.c: 49: SSPCON1bits.SSPM = 0b0010;
  2972  001CC0  50C6               	movf	4038,w,c	;volatile
  2973  001CC2  0BF0               	andlw	-16
  2974  001CC4  0902               	iorlw	2
  2975  001CC6  6EC6               	movwf	4038,c	;volatile
  2976                           
  2977                           ;SPI_Driver.c: 52: PIR1bits.SSPIF = 0;
  2978  001CC8  969E               	bcf	3998,3,c	;volatile
  2979  001CCA  0012               	return		;funcret
  2980  001CCC                     __end_of_D_SPI_Init:
  2981                           	opt stack 0
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           intcon	equ	0xFF2
  2987                           intcon2	equ	0xFF1
  2988                           postinc0	equ	0xFEE
  2989                           plusw0	equ	0xFEB
  2990                           fsr0h	equ	0xFEA
  2991                           fsr0l	equ	0xFE9
  2992                           wreg	equ	0xFE8
  2993                           postdec1	equ	0xFE5
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           plusw2	equ	0xFDB
  2998                           fsr2h	equ	0xFDA
  2999                           fsr2l	equ	0xFD9
  3000                           status	equ	0xFD8
  3001                           
  3002 ;; *************** function _D_MCP3201_Enable *****************
  3003 ;; Defined at:
  3004 ;;		line 70 in file "Drivers/MCP3201_Driver.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  enable          1    wreg     unsigned char 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  enable          1    1[BANK0 ] unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3018 ;;      Params:         0       0       0       0       0       0       0       0       0
  3019 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3021 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3022 ;;Total ram usage:        1 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    9
  3025 ;; This function calls:
  3026 ;;		_D_SPI_Enable
  3027 ;; This function is called by:
  3028 ;;		_initialize
  3029 ;;		_handle_message
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text13
  3034  001CEC                     __ptext13:
  3035                           	opt stack 0
  3036  001CEC                     _D_MCP3201_Enable:
  3037                           	opt stack 20
  3038                           
  3039                           ;incstack = 0
  3040                           ;D_MCP3201_Enable@enable stored from wreg
  3041  001CEC  0100               	movlb	0	; () banked
  3042  001CEE  6F61               	movwf	D_MCP3201_Enable@enable& (0+255),b
  3043                           
  3044                           ;MCP3201_Driver.c: 71: if (enable) {
  3045  001CF0  0100               	movlb	0	; () banked
  3046  001CF2  5161               	movf	D_MCP3201_Enable@enable& (0+255),w,b
  3047  001CF4  0100               	movlb	0	; () banked
  3048  001CF6  B4D8               	btfsc	status,2,c
  3049  001CF8  D004               	goto	l2180
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;MCP3201_Driver.c: 72: D_SPI_Enable(1);
  3053  001CFA  0E01               	movlw	1
  3054  001CFC  EC85  F00E         	call	_D_SPI_Enable
  3055                           
  3056                           ;MCP3201_Driver.c: 73: } else {
  3057  001D00  0012               	return	
  3058  001D02                     l2180:
  3059                           
  3060                           ;MCP3201_Driver.c: 74: D_SPI_Enable(0);
  3061  001D02  0E00               	movlw	0
  3062  001D04  EC85  F00E         	call	_D_SPI_Enable
  3063  001D08  0012               	return	
  3064  001D0A                     __end_of_D_MCP3201_Enable:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           intcon	equ	0xFF2
  3071                           intcon2	equ	0xFF1
  3072                           postinc0	equ	0xFEE
  3073                           plusw0	equ	0xFEB
  3074                           fsr0h	equ	0xFEA
  3075                           fsr0l	equ	0xFE9
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1h	equ	0xFE2
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           plusw2	equ	0xFDB
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _D_SPI_Enable *****************
  3087 ;; Defined at:
  3088 ;;		line 69 in file "Drivers/SPI_Driver.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  enable          1    wreg     unsigned char 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  enable          1    0[BANK0 ] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3102 ;;      Params:         0       0       0       0       0       0       0       0       0
  3103 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3105 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3106 ;;Total ram usage:        1 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    8
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_D_SPI_Init
  3113 ;;		_D_MCP3201_Enable
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text14
  3118  001D0A                     __ptext14:
  3119                           	opt stack 0
  3120  001D0A                     _D_SPI_Enable:
  3121                           	opt stack 19
  3122                           
  3123                           ;incstack = 0
  3124                           ;D_SPI_Enable@enable stored from wreg
  3125  001D0A  0100               	movlb	0	; () banked
  3126  001D0C  6F60               	movwf	D_SPI_Enable@enable& (0+255),b
  3127                           
  3128                           ;SPI_Driver.c: 70: if (enable) {
  3129  001D0E  0100               	movlb	0	; () banked
  3130  001D10  5160               	movf	D_SPI_Enable@enable& (0+255),w,b
  3131  001D12  0100               	movlb	0	; () banked
  3132  001D14  B4D8               	btfsc	status,2,c
  3133  001D16  D004               	goto	l27
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;SPI_Driver.c: 71: TRISBbits.TRISB1 = 0;
  3137  001D18  9293               	bcf	3987,1,c	;volatile
  3138                           
  3139                           ;SPI_Driver.c: 72: TRISBbits.TRISB0 = 1;
  3140  001D1A  8093               	bsf	3987,0,c	;volatile
  3141                           
  3142                           ;SPI_Driver.c: 73: SSPCON1bits.SSPEN = 1;
  3143  001D1C  8AC6               	bsf	4038,5,c	;volatile
  3144                           
  3145                           ;SPI_Driver.c: 74: } else {
  3146  001D1E  0012               	return	
  3147  001D20                     l27:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;SPI_Driver.c: 75: SSPCON1bits.SSPEN = 0;
  3151  001D20  9AC6               	bcf	4038,5,c	;volatile
  3152  001D22  0012               	return	
  3153  001D24                     __end_of_D_SPI_Enable:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           intcon	equ	0xFF2
  3160                           intcon2	equ	0xFF1
  3161                           postinc0	equ	0xFEE
  3162                           plusw0	equ	0xFEB
  3163                           fsr0h	equ	0xFEA
  3164                           fsr0l	equ	0xFE9
  3165                           wreg	equ	0xFE8
  3166                           postdec1	equ	0xFE5
  3167                           fsr1h	equ	0xFE2
  3168                           fsr1l	equ	0xFE1
  3169                           indf2	equ	0xFDF
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _D_UART_WriteInt *****************
  3176 ;; Defined at:
  3177 ;;		line 288 in file "Drivers/UART_Driver.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  command         2   28[BANK0 ] PTR const unsigned char 
  3180 ;;		 -> STR_21(3), 
  3181 ;;  data            2   30[BANK0 ] int 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3193 ;;      Params:         0       4       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3195 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3196 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3197 ;;Total ram usage:        5 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:   12
  3200 ;; This function calls:
  3201 ;;		_printf
  3202 ;; This function is called by:
  3203 ;;		_handle_message
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text15
  3208  0012DC                     __ptext15:
  3209                           	opt stack 0
  3210  0012DC                     _D_UART_WriteInt:
  3211                           	opt stack 17
  3212                           
  3213                           ;UART_Driver.c: 289: printf(startCharacter);
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;incstack = 0
  3217  0012DC  C04D  F06C         	movff	_startCharacter,printf@f
  3218  0012E0  C04E  F06D         	movff	_startCharacter+1,printf@f+1
  3219  0012E4  0100               	movlb	0	; () banked
  3220  0012E6  516C               	movf	printf@f& (0+255),w,b
  3221  0012E8  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3222  0012EA  A4D8               	btfss	status,2,c
  3223  0012EC  0E00               	movlw	low (__mediumconst shr (0+16))
  3224  0012EE  6F6E               	movwf	(printf@f+2)& (0+255),b
  3225  0012F0  ECAF  F005         	call	_printf	;wreg free
  3226                           
  3227                           ;UART_Driver.c: 291: printf(messageCharacter);
  3228  0012F4  C0E8  F06C         	movff	_messageCharacter,printf@f
  3229  0012F8  C0E9  F06D         	movff	_messageCharacter+1,printf@f+1
  3230  0012FC  0100               	movlb	0	; () banked
  3231  0012FE  516C               	movf	printf@f& (0+255),w,b
  3232  001300  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3233  001302  A4D8               	btfss	status,2,c
  3234  001304  0E00               	movlw	low (__mediumconst shr (0+16))
  3235  001306  6F6E               	movwf	(printf@f+2)& (0+255),b
  3236  001308  ECAF  F005         	call	_printf	;wreg free
  3237                           
  3238                           ;UART_Driver.c: 292: printf(deviceName);
  3239  00130C  C0E5  F06C         	movff	_deviceName,printf@f
  3240  001310  C0E6  F06D         	movff	_deviceName+1,printf@f+1
  3241  001314  C0E7  F06E         	movff	_deviceName+2,printf@f+2
  3242  001318  ECAF  F005         	call	_printf	;wreg free
  3243                           
  3244                           ;UART_Driver.c: 294: printf(":");printf(command);
  3245  00131C  0E91               	movlw	low STR_7
  3246  00131E  0100               	movlb	0	; () banked
  3247  001320  6F6C               	movwf	printf@f& (0+255),b
  3248  001322  0E08               	movlw	high STR_7
  3249  001324  0100               	movlb	0	; () banked
  3250  001326  6F6D               	movwf	(printf@f+1)& (0+255),b
  3251  001328  0100               	movlb	0	; () banked
  3252  00132A  516C               	movf	printf@f& (0+255),w,b
  3253  00132C  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3254  00132E  A4D8               	btfss	status,2,c
  3255  001330  0E00               	movlw	low (__mediumconst shr (0+16))
  3256  001332  6F6E               	movwf	(printf@f+2)& (0+255),b
  3257  001334  ECAF  F005         	call	_printf	;wreg free
  3258  001338  C07C  F06C         	movff	D_UART_WriteInt@command,printf@f
  3259  00133C  C07D  F06D         	movff	D_UART_WriteInt@command+1,printf@f+1
  3260  001340  0100               	movlb	0	; () banked
  3261  001342  516C               	movf	printf@f& (0+255),w,b
  3262  001344  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3263  001346  A4D8               	btfss	status,2,c
  3264  001348  0E00               	movlw	low (__mediumconst shr (0+16))
  3265  00134A  6F6E               	movwf	(printf@f+2)& (0+255),b
  3266  00134C  ECAF  F005         	call	_printf	;wreg free
  3267                           
  3268                           ;UART_Driver.c: 296: printf(":");printf("%d",data);
  3269  001350  0E91               	movlw	low STR_7
  3270  001352  0100               	movlb	0	; () banked
  3271  001354  6F6C               	movwf	printf@f& (0+255),b
  3272  001356  0E08               	movlw	high STR_7
  3273  001358  0100               	movlb	0	; () banked
  3274  00135A  6F6D               	movwf	(printf@f+1)& (0+255),b
  3275  00135C  0100               	movlb	0	; () banked
  3276  00135E  516C               	movf	printf@f& (0+255),w,b
  3277  001360  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3278  001362  A4D8               	btfss	status,2,c
  3279  001364  0E00               	movlw	low (__mediumconst shr (0+16))
  3280  001366  6F6E               	movwf	(printf@f+2)& (0+255),b
  3281  001368  ECAF  F005         	call	_printf	;wreg free
  3282  00136C  0E68               	movlw	low (STR_13+1)
  3283  00136E  0100               	movlb	0	; () banked
  3284  001370  6F6C               	movwf	printf@f& (0+255),b
  3285  001372  0E08               	movlw	high (STR_13+1)
  3286  001374  0100               	movlb	0	; () banked
  3287  001376  6F6D               	movwf	(printf@f+1)& (0+255),b
  3288  001378  0100               	movlb	0	; () banked
  3289  00137A  516C               	movf	printf@f& (0+255),w,b
  3290  00137C  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3291  00137E  A4D8               	btfss	status,2,c
  3292  001380  0E00               	movlw	low (__mediumconst shr (0+16))
  3293  001382  6F6E               	movwf	(printf@f+2)& (0+255),b
  3294  001384  C07E  F06F         	movff	D_UART_WriteInt@data,?_printf+3
  3295  001388  C07F  F070         	movff	D_UART_WriteInt@data+1,?_printf+4
  3296  00138C  ECAF  F005         	call	_printf	;wreg free
  3297                           
  3298                           ;UART_Driver.c: 298: printf(stopCharacter);
  3299  001390  C04F  F06C         	movff	_stopCharacter,printf@f
  3300  001394  C050  F06D         	movff	_stopCharacter+1,printf@f+1
  3301  001398  0100               	movlb	0	; () banked
  3302  00139A  516C               	movf	printf@f& (0+255),w,b
  3303  00139C  116D               	iorwf	(printf@f+1)& (0+255),w,b
  3304  00139E  A4D8               	btfss	status,2,c
  3305  0013A0  0E00               	movlw	low (__mediumconst shr (0+16))
  3306  0013A2  6F6E               	movwf	(printf@f+2)& (0+255),b
  3307  0013A4  ECAF  F005         	call	_printf	;wreg free
  3308                           
  3309                           ;UART_Driver.c: 299: _delay((unsigned long)((1)*(16000000/4000.0)));
  3310  0013A8  0E06               	movlw	6
  3311  0013AA  0100               	movlb	0	; () banked
  3312  0013AC  6F80               	movwf	??_D_UART_WriteInt& (0+255),b
  3313  0013AE  0E30               	movlw	48
  3314  0013B0                     u1967:
  3315  0013B0  2EE8               	decfsz	wreg,f,c
  3316  0013B2  D7FE               	goto	u1967
  3317  0013B4  2F80               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  3318  0013B6  D7FC               	goto	u1967
  3319  0013B8  D000               	nop2	
  3320  0013BA  0012               	return		;funcret
  3321  0013BC                     __end_of_D_UART_WriteInt:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           intcon	equ	0xFF2
  3328                           intcon2	equ	0xFF1
  3329                           postinc0	equ	0xFEE
  3330                           plusw0	equ	0xFEB
  3331                           fsr0h	equ	0xFEA
  3332                           fsr0l	equ	0xFE9
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1h	equ	0xFE2
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           plusw2	equ	0xFDB
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _printf *****************
  3344 ;; Defined at:
  3345 ;;		line 464 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  f               3   12[BANK0 ] PTR const unsigned char 
  3348 ;;		 -> STR_34(2), STR_33(3), STR_32(2), STR_31(3), 
  3349 ;;		 -> STR_30(32), STR_29(5), STR_23(3), STR_21(3), 
  3350 ;;		 -> STR_19(3), STR_18(3), STR_16(12), STR_15(3), 
  3351 ;;		 -> STR_14(6), STR_13(4), STR_12(3), STR_11(3), 
  3352 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  3353 ;;		 -> STR_6(3), STR_5(4), STR_3(4), ROM(32767), 
  3354 ;;		 -> STR_2(2), STR_1(2), 
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  idx             1   20[BANK0 ] unsigned char 
  3357 ;;  tmpval          4    0        struct .
  3358 ;;  cp              3    0        PTR const unsigned char 
  3359 ;;  val             2   25[BANK0 ] unsigned int 
  3360 ;;  ap              2   21[BANK0 ] PTR void [1]
  3361 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3362 ;;  len             2    0        unsigned int 
  3363 ;;  c               1   27[BANK0 ] char 
  3364 ;;  flag            1   24[BANK0 ] unsigned char 
  3365 ;;  prec            1   23[BANK0 ] char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  2   12[BANK0 ] int 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3375 ;;      Params:         0       5       0       0       0       0       0       0       0
  3376 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3377 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3378 ;;      Totals:         0      16       0       0       0       0       0       0       0
  3379 ;;Total ram usage:       16 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:   11
  3382 ;; This function calls:
  3383 ;;		___lwdiv
  3384 ;;		___lwmod
  3385 ;;		_putch
  3386 ;; This function is called by:
  3387 ;;		_D_UART_Write
  3388 ;;		_D_UART_WriteInt
  3389 ;;		_D_UART_Acknowledge
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text16
  3394  000B5E                     __ptext16:
  3395                           	opt stack 0
  3396  000B5E                     _printf:
  3397                           	opt stack 17
  3398                           
  3399                           ;doprnt.c: 466: va_list ap;
  3400                           ;doprnt.c: 499: signed char c;
  3401                           ;doprnt.c: 506: signed char prec;
  3402                           ;doprnt.c: 508: unsigned char flag;
  3403                           ;doprnt.c: 523: union {
  3404                           ;doprnt.c: 524: unsigned long vd;
  3405                           ;doprnt.c: 525: double integ;
  3406                           ;doprnt.c: 526: } tmpval;
  3407                           ;doprnt.c: 528: unsigned int val;
  3408                           ;doprnt.c: 529: unsigned len;
  3409                           ;doprnt.c: 530: const char * cp;
  3410                           ;doprnt.c: 533: *ap = __va_start();
  3411                           
  3412                           ;incstack = 0
  3413  000B5E  0E6F               	movlw	low (?_printf+3)
  3414  000B60  0100               	movlb	0	; () banked
  3415  000B62  6F75               	movwf	printf@ap& (0+255),b
  3416  000B64  0E00               	movlw	high (?_printf+3)
  3417  000B66  0100               	movlb	0	; () banked
  3418  000B68  6F76               	movwf	(printf@ap+1)& (0+255),b
  3419                           
  3420                           ;doprnt.c: 536: while(c = *f++) {
  3421  000B6A  D115               	goto	l2016
  3422  000B6C                     l1936:
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;doprnt.c: 538: if(c != '%')
  3426  000B6C  0E25               	movlw	37
  3427  000B6E  0100               	movlb	0	; () banked
  3428  000B70  197B               	xorwf	printf@c& (0+255),w,b
  3429  000B72  B4D8               	btfsc	status,2,c
  3430  000B74  D005               	goto	l1940
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;doprnt.c: 540: {
  3434                           ;doprnt.c: 541: (putch(c) );
  3435  000B76  0100               	movlb	0	; () banked
  3436  000B78  517B               	movf	printf@c& (0+255),w,b
  3437  000B7A  ECB6  F00E         	call	_putch
  3438                           
  3439                           ;doprnt.c: 542: continue;
  3440  000B7E  D10B               	goto	l2016
  3441  000B80                     l1940:
  3442                           
  3443                           ;doprnt.c: 543: }
  3444                           ;doprnt.c: 548: flag = 0;
  3445  000B80  0E00               	movlw	0
  3446  000B82  0100               	movlb	0	; () banked
  3447  000B84  6F78               	movwf	printf@flag& (0+255),b
  3448                           
  3449                           ;doprnt.c: 635: switch(c = *f++) {
  3450  000B86  D008               	goto	l1948
  3451  000B88                     l1942:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;doprnt.c: 721: flag |= 0x80;
  3455  000B88  0100               	movlb	0	; () banked
  3456  000B8A  8F78               	bsf	printf@flag& (0+255),7,b
  3457                           
  3458                           ;doprnt.c: 723: break;
  3459  000B8C  D028               	goto	l399
  3460  000B8E                     l1944:
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;doprnt.c: 809: (putch(c) );
  3464  000B8E  0100               	movlb	0	; () banked
  3465  000B90  517B               	movf	printf@c& (0+255),w,b
  3466  000B92  ECB6  F00E         	call	_putch
  3467                           
  3468                           ;doprnt.c: 810: continue;
  3469  000B96  D0FF               	goto	l2016
  3470  000B98                     l1948:
  3471  000B98  C06C  F071         	movff	printf@f,??_printf
  3472  000B9C  C06D  F072         	movff	printf@f+1,??_printf+1
  3473  000BA0  C06E  F073         	movff	printf@f+2,??_printf+2
  3474  000BA4  0100               	movlb	0	; () banked
  3475  000BA6  2B6C               	incf	printf@f& (0+255),f,b
  3476  000BA8  0E00               	movlw	0
  3477  000BAA  236D               	addwfc	(printf@f+1)& (0+255),f,b
  3478  000BAC  236E               	addwfc	(printf@f+2)& (0+255),f,b
  3479  000BAE  C071  FFF6         	movff	??_printf,tblptrl
  3480  000BB2  C072  FFF7         	movff	??_printf+1,tblptrh
  3481  000BB6  C073  FFF8         	movff	??_printf+2,tblptru
  3482  000BBA  0008               	tblrd		*
  3483  000BBC  CFF5 F07B          	movff	tablat,printf@c
  3484  000BC0  0100               	movlb	0	; () banked
  3485  000BC2  517B               	movf	printf@c& (0+255),w,b
  3486                           
  3487                           ; Switch size 1, requested type "space"
  3488                           ; Number of cases is 4, Range of values is 0 to 120
  3489                           ; switch strategies available:
  3490                           ; Name         Instructions Cycles
  3491                           ; simple_byte           13     7 (average)
  3492                           ;	Chosen strategy is simple_byte
  3493  000BC4  0A00               	xorlw	0	; case 0
  3494  000BC6  B4D8               	btfsc	status,2,c
  3495  000BC8  0012               	return	
  3496  000BCA  0A64               	xorlw	100	; case 100
  3497  000BCC  B4D8               	btfsc	status,2,c
  3498  000BCE  D007               	goto	l399
  3499  000BD0  0A0D               	xorlw	13	; case 105
  3500  000BD2  B4D8               	btfsc	status,2,c
  3501  000BD4  D004               	goto	l399
  3502  000BD6  0A11               	xorlw	17	; case 120
  3503  000BD8  B4D8               	btfsc	status,2,c
  3504  000BDA  D7D6               	goto	l1942
  3505  000BDC  D7D8               	goto	l1944
  3506  000BDE                     l399:
  3507                           
  3508                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3509  000BDE  0100               	movlb	0	; () banked
  3510  000BE0  BF78               	btfsc	printf@flag& (0+255),7,b
  3511  000BE2  D019               	goto	l1960
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;doprnt.c: 1253: {
  3515                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3516  000BE4  C075  FFD9         	movff	printf@ap,fsr2l
  3517  000BE8  C076  FFDA         	movff	printf@ap+1,fsr2h
  3518  000BEC  CFDE F079          	movff	postinc2,printf@val
  3519  000BF0  CFDD F07A          	movff	postdec2,printf@val+1
  3520                           
  3521                           ; BSR set to: 0
  3522  000BF4  0E02               	movlw	2
  3523  000BF6  0100               	movlb	0	; () banked
  3524  000BF8  2775               	addwf	printf@ap& (0+255),f,b
  3525  000BFA  0E00               	movlw	0
  3526  000BFC  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;doprnt.c: 1261: if((int)val < 0) {
  3530  000BFE  0100               	movlb	0	; () banked
  3531  000C00  AF7A               	btfss	(printf@val+1)& (0+255),7,b
  3532  000C02  D053               	goto	l1994
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;doprnt.c: 1262: flag |= 0x03;
  3536  000C04  0E03               	movlw	3
  3537  000C06  0100               	movlb	0	; () banked
  3538  000C08  1378               	iorwf	printf@flag& (0+255),f,b
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1263: val = -val;
  3542  000C0A  0100               	movlb	0	; () banked
  3543  000C0C  6D79               	negf	printf@val& (0+255),b
  3544  000C0E  1F7A               	comf	(printf@val+1)& (0+255),f,b
  3545  000C10  B0D8               	btfsc	status,0,c
  3546  000C12  2B7A               	incf	(printf@val+1)& (0+255),f,b
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;doprnt.c: 1264: }
  3550                           ;doprnt.c: 1266: }
  3551  000C14  D04A               	goto	l1994
  3552  000C16                     l1960:
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;doprnt.c: 1268: else
  3556                           ;doprnt.c: 1273: {
  3557                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3558  000C16  C075  FFD9         	movff	printf@ap,fsr2l
  3559  000C1A  C076  FFDA         	movff	printf@ap+1,fsr2h
  3560  000C1E  CFDE F079          	movff	postinc2,printf@val
  3561  000C22  CFDD F07A          	movff	postdec2,printf@val+1
  3562                           
  3563                           ; BSR set to: 0
  3564  000C26  0E02               	movlw	2
  3565  000C28  0100               	movlb	0	; () banked
  3566  000C2A  2775               	addwf	printf@ap& (0+255),f,b
  3567  000C2C  0E00               	movlw	0
  3568  000C2E  2376               	addwfc	(printf@ap+1)& (0+255),f,b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;doprnt.c: 1287: }
  3572                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3573  000C30  D03C               	goto	l1994
  3574  000C32                     l1964:
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3578  000C32  0E01               	movlw	1
  3579  000C34  0100               	movlb	0	; () banked
  3580  000C36  6F7B               	movwf	printf@c& (0+255),b
  3581  000C38                     l1966:
  3582                           
  3583                           ; BSR set to: 0
  3584  000C38  0E05               	movlw	5
  3585  000C3A  0100               	movlb	0	; () banked
  3586  000C3C  197B               	xorwf	printf@c& (0+255),w,b
  3587  000C3E  B4D8               	btfsc	status,2,c
  3588  000C40  D03D               	goto	l1996
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;doprnt.c: 1306: if(val < dpowers[c])
  3592                           
  3593                           ; BSR set to: 0
  3594                           
  3595                           ; BSR set to: 0
  3596  000C42  0100               	movlb	0	; () banked
  3597  000C44  517B               	movf	printf@c& (0+255),w,b
  3598  000C46  0D02               	mullw	2
  3599  000C48  0E01               	movlw	low _dpowers
  3600  000C4A  24F3               	addwf	prodl,w,c
  3601  000C4C  6EF6               	movwf	tblptrl,c
  3602  000C4E  0E08               	movlw	high _dpowers
  3603  000C50  20F4               	addwfc	prodh,w,c
  3604  000C52  6EF7               	movwf	tblptrh,c
  3605  000C54                     	if	0	;There are less than 3 active tblptr bytes
  3606  000C54                     	endif
  3607  000C54  0009               	tblrd		*+
  3608  000C56  50F5               	movf	tablat,w,c
  3609  000C58  0100               	movlb	0	; () banked
  3610  000C5A  5D79               	subwf	printf@val& (0+255),w,b
  3611  000C5C  0009               	tblrd		*+
  3612  000C5E  50F5               	movf	tablat,w,c
  3613  000C60  0100               	movlb	0	; () banked
  3614  000C62  597A               	subwfb	(printf@val+1)& (0+255),w,b
  3615  000C64  A0D8               	btfss	status,0,c
  3616  000C66  D02A               	goto	l1996
  3617                           
  3618                           ; BSR set to: 0
  3619                           
  3620                           ; BSR set to: 0
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;doprnt.c: 1307: break;
  3624  000C68  0100               	movlb	0	; () banked
  3625  000C6A  2B7B               	incf	printf@c& (0+255),f,b
  3626  000C6C  D7E5               	goto	l1966
  3627  000C6E                     l1978:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3631  000C6E  0E01               	movlw	1
  3632  000C70  0100               	movlb	0	; () banked
  3633  000C72  6F7B               	movwf	printf@c& (0+255),b
  3634  000C74                     l1980:
  3635                           
  3636                           ; BSR set to: 0
  3637  000C74  0E04               	movlw	4
  3638  000C76  0100               	movlb	0	; () banked
  3639  000C78  197B               	xorwf	printf@c& (0+255),w,b
  3640  000C7A  B4D8               	btfsc	status,2,c
  3641  000C7C  D01F               	goto	l1996
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3645                           
  3646                           ; BSR set to: 0
  3647                           
  3648                           ; BSR set to: 0
  3649  000C7E  0100               	movlb	0	; () banked
  3650  000C80  517B               	movf	printf@c& (0+255),w,b
  3651  000C82  0D02               	mullw	2
  3652  000C84  0E0B               	movlw	low _hexpowers
  3653  000C86  24F3               	addwf	prodl,w,c
  3654  000C88  6EF6               	movwf	tblptrl,c
  3655  000C8A  0E08               	movlw	high _hexpowers
  3656  000C8C  20F4               	addwfc	prodh,w,c
  3657  000C8E  6EF7               	movwf	tblptrh,c
  3658  000C90                     	if	0	;There are less than 3 active tblptr bytes
  3659  000C90                     	endif
  3660  000C90  0009               	tblrd		*+
  3661  000C92  50F5               	movf	tablat,w,c
  3662  000C94  0100               	movlb	0	; () banked
  3663  000C96  5D79               	subwf	printf@val& (0+255),w,b
  3664  000C98  0009               	tblrd		*+
  3665  000C9A  50F5               	movf	tablat,w,c
  3666  000C9C  0100               	movlb	0	; () banked
  3667  000C9E  597A               	subwfb	(printf@val+1)& (0+255),w,b
  3668  000CA0  A0D8               	btfss	status,0,c
  3669  000CA2  D00C               	goto	l1996
  3670                           
  3671                           ; BSR set to: 0
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;doprnt.c: 1318: break;
  3677  000CA4  0100               	movlb	0	; () banked
  3678  000CA6  2B7B               	incf	printf@c& (0+255),f,b
  3679  000CA8  D7E5               	goto	l1980
  3680  000CAA                     l1994:
  3681                           
  3682                           ; BSR set to: 0
  3683  000CAA  0100               	movlb	0	; () banked
  3684  000CAC  5178               	movf	printf@flag& (0+255),w,b
  3685  000CAE  0B80               	andlw	128
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 2, Range of values is 0 to 128
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte            7     4 (average)
  3692                           ;	Chosen strategy is simple_byte
  3693  000CB0  0A00               	xorlw	0	; case 0
  3694  000CB2  B4D8               	btfsc	status,2,c
  3695  000CB4  D7BE               	goto	l1964
  3696  000CB6  0A80               	xorlw	128	; case 128
  3697  000CB8  B4D8               	btfsc	status,2,c
  3698  000CBA  D7D9               	goto	l1978
  3699  000CBC                     l1996:
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 1422: {
  3703                           ;doprnt.c: 1438: if(flag & 0x03)
  3704  000CBC  C078  F071         	movff	printf@flag,??_printf
  3705  000CC0  0E03               	movlw	3
  3706  000CC2  0100               	movlb	0	; () banked
  3707  000CC4  1771               	andwf	??_printf& (0+255),f,b
  3708  000CC6  B4D8               	btfsc	status,2,c
  3709  000CC8  D003               	goto	l2000
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;doprnt.c: 1439: (putch('-') );
  3713  000CCA  0E2D               	movlw	45
  3714  000CCC  ECB6  F00E         	call	_putch
  3715  000CD0                     l2000:
  3716                           
  3717                           ;doprnt.c: 1469: }
  3718                           ;doprnt.c: 1472: prec = c;
  3719  000CD0  C07B  F077         	movff	printf@c,printf@prec
  3720                           
  3721                           ;doprnt.c: 1474: while(prec--) {
  3722  000CD4  D05A               	goto	l2014
  3723  000CD6                     l2002:
  3724                           
  3725                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3726  000CD6  0100               	movlb	0	; () banked
  3727  000CD8  5177               	movf	printf@prec& (0+255),w,b
  3728  000CDA  0D02               	mullw	2
  3729  000CDC  0E01               	movlw	low _dpowers
  3730  000CDE  24F3               	addwf	prodl,w,c
  3731  000CE0  6EF6               	movwf	tblptrl,c
  3732  000CE2  0E08               	movlw	high _dpowers
  3733  000CE4  20F4               	addwfc	prodh,w,c
  3734  000CE6  6EF7               	movwf	tblptrh,c
  3735  000CE8                     	if	0	;There are less than 3 active tblptr bytes
  3736  000CE8                     	endif
  3737  000CE8  0009               	tblrd		*+
  3738  000CEA  CFF5 F062          	movff	tablat,___lwdiv@divisor
  3739  000CEE  000A               	tblrd		*-
  3740  000CF0  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  3741  000CF4  C079  F060         	movff	printf@val,___lwdiv@dividend
  3742  000CF8  C07A  F061         	movff	printf@val+1,___lwdiv@dividend+1
  3743  000CFC  ECC5  F00B         	call	___lwdiv	;wreg free
  3744  000D00  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  3745  000D04  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  3746  000D08  0E00               	movlw	0
  3747  000D0A  0100               	movlb	0	; () banked
  3748  000D0C  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3749  000D0E  0E0A               	movlw	10
  3750  000D10  6F69               	movwf	___lwmod@divisor& (0+255),b
  3751  000D12  ECA7  F00C         	call	___lwmod	;wreg free
  3752  000D16  0100               	movlb	0	; () banked
  3753  000D18  5167               	movf	?___lwmod& (0+255),w,b
  3754  000D1A  0F30               	addlw	48
  3755  000D1C  0100               	movlb	0	; () banked
  3756  000D1E  6F7B               	movwf	printf@c& (0+255),b
  3757                           
  3758                           ;doprnt.c: 1491: break;
  3759  000D20  D030               	goto	l2012
  3760  000D22                     l2004:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 1499: {
  3764                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3765  000D22  C079  F060         	movff	printf@val,___lwdiv@dividend
  3766  000D26  C07A  F061         	movff	printf@val+1,___lwdiv@dividend+1
  3767  000D2A  0100               	movlb	0	; () banked
  3768  000D2C  5177               	movf	printf@prec& (0+255),w,b
  3769  000D2E  0D02               	mullw	2
  3770  000D30  0E0B               	movlw	low _hexpowers
  3771  000D32  24F3               	addwf	prodl,w,c
  3772  000D34  6EF6               	movwf	tblptrl,c
  3773  000D36  0E08               	movlw	high _hexpowers
  3774  000D38  20F4               	addwfc	prodh,w,c
  3775  000D3A  6EF7               	movwf	tblptrh,c
  3776  000D3C                     	if	0	;There are less than 3 active tblptr bytes
  3777  000D3C                     	endif
  3778  000D3C  0009               	tblrd		*+
  3779  000D3E  CFF5 F062          	movff	tablat,___lwdiv@divisor
  3780  000D42  000A               	tblrd		*-
  3781  000D44  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  3782  000D48  ECC5  F00B         	call	___lwdiv	;wreg free
  3783  000D4C  0100               	movlb	0	; () banked
  3784  000D4E  5160               	movf	?___lwdiv& (0+255),w,b
  3785  000D50  0B0F               	andlw	15
  3786  000D52  0100               	movlb	0	; () banked
  3787  000D54  6F74               	movwf	printf@idx& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3791  000D56  0100               	movlb	0	; () banked
  3792  000D58  5174               	movf	printf@idx& (0+255),w,b
  3793  000D5A  0D01               	mullw	1
  3794  000D5C  0E33               	movlw	low STR_35
  3795  000D5E  24F3               	addwf	prodl,w,c
  3796  000D60  6EF6               	movwf	tblptrl,c
  3797  000D62  0E08               	movlw	high STR_35
  3798  000D64  20F4               	addwfc	prodh,w,c
  3799  000D66  6EF7               	movwf	tblptrh,c
  3800  000D68                     	if	0	;There are less than 3 active tblptr bytes
  3801  000D68                     	endif
  3802  000D68  0008               	tblrd		*
  3803  000D6A  CFF5 F07B          	movff	tablat,printf@c
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;doprnt.c: 1523: }
  3807                           
  3808                           ;doprnt.c: 1508: }
  3809                           ;doprnt.c: 1510: break;
  3810  000D6E  D009               	goto	l2012
  3811  000D70                     l2010:
  3812  000D70  0100               	movlb	0	; () banked
  3813  000D72  5178               	movf	printf@flag& (0+255),w,b
  3814  000D74  0B80               	andlw	128
  3815                           
  3816                           ; Switch size 1, requested type "space"
  3817                           ; Number of cases is 2, Range of values is 0 to 128
  3818                           ; switch strategies available:
  3819                           ; Name         Instructions Cycles
  3820                           ; simple_byte            7     4 (average)
  3821                           ;	Chosen strategy is simple_byte
  3822  000D76  0A00               	xorlw	0	; case 0
  3823  000D78  B4D8               	btfsc	status,2,c
  3824  000D7A  D7AD               	goto	l2002
  3825  000D7C  0A80               	xorlw	128	; case 128
  3826  000D7E  B4D8               	btfsc	status,2,c
  3827  000D80  D7D0               	goto	l2004
  3828  000D82                     l2012:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1524: (putch(c) );
  3832  000D82  0100               	movlb	0	; () banked
  3833  000D84  517B               	movf	printf@c& (0+255),w,b
  3834  000D86  ECB6  F00E         	call	_putch
  3835  000D8A                     l2014:
  3836  000D8A  0100               	movlb	0	; () banked
  3837  000D8C  0777               	decf	printf@prec& (0+255),f,b
  3838  000D8E  0100               	movlb	0	; () banked
  3839  000D90  2977               	incf	printf@prec& (0+255),w,b
  3840  000D92  A4D8               	btfss	status,2,c
  3841  000D94  D7ED               	goto	l2010
  3842  000D96                     l2016:
  3843  000D96  C06C  F071         	movff	printf@f,??_printf
  3844  000D9A  C06D  F072         	movff	printf@f+1,??_printf+1
  3845  000D9E  C06E  F073         	movff	printf@f+2,??_printf+2
  3846  000DA2  0100               	movlb	0	; () banked
  3847  000DA4  2B6C               	incf	printf@f& (0+255),f,b
  3848  000DA6  0E00               	movlw	0
  3849  000DA8  236D               	addwfc	(printf@f+1)& (0+255),f,b
  3850  000DAA  236E               	addwfc	(printf@f+2)& (0+255),f,b
  3851  000DAC  C071  FFF6         	movff	??_printf,tblptrl
  3852  000DB0  C072  FFF7         	movff	??_printf+1,tblptrh
  3853  000DB4  C073  FFF8         	movff	??_printf+2,tblptru
  3854  000DB8  0008               	tblrd		*
  3855  000DBA  CFF5 F07B          	movff	tablat,printf@c
  3856  000DBE  0100               	movlb	0	; () banked
  3857  000DC0  517B               	movf	printf@c& (0+255),w,b
  3858  000DC2  B4D8               	btfsc	status,2,c
  3859  000DC4  0012               	return	
  3860  000DC6  D6D2               	goto	l1936
  3861  000DC8                     __end_of_printf:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           intcon2	equ	0xFF1
  3871                           postinc0	equ	0xFEE
  3872                           plusw0	equ	0xFEB
  3873                           fsr0h	equ	0xFEA
  3874                           fsr0l	equ	0xFE9
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           plusw2	equ	0xFDB
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887 ;; *************** function _putch *****************
  3888 ;; Defined at:
  3889 ;;		line 356 in file "Drivers/UART_Driver.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  data            1    wreg     unsigned char 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  data            1    2[BANK0 ] unsigned char 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, status,2, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3903 ;;      Params:         0       0       0       0       0       0       0       0       0
  3904 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3906 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3907 ;;Total ram usage:        1 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:   10
  3910 ;; This function calls:
  3911 ;;		_writeByte
  3912 ;; This function is called by:
  3913 ;;		_printf
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text17
  3918  001D6C                     __ptext17:
  3919                           	opt stack 0
  3920  001D6C                     _putch:
  3921                           	opt stack 17
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;incstack = 0
  3925                           ;putch@data stored from wreg
  3926  001D6C  0100               	movlb	0	; () banked
  3927  001D6E  6F62               	movwf	putch@data& (0+255),b
  3928                           
  3929                           ;UART_Driver.c: 357: writeByte(data);
  3930  001D70  0100               	movlb	0	; () banked
  3931  001D72  5162               	movf	putch@data& (0+255),w,b
  3932  001D74  EC92  F00E         	call	_writeByte
  3933  001D78  0012               	return		;funcret
  3934  001D7A                     __end_of_putch:
  3935                           	opt stack 0
  3936                           tblptru	equ	0xFF8
  3937                           tblptrh	equ	0xFF7
  3938                           tblptrl	equ	0xFF6
  3939                           tablat	equ	0xFF5
  3940                           prodh	equ	0xFF4
  3941                           prodl	equ	0xFF3
  3942                           intcon	equ	0xFF2
  3943                           intcon2	equ	0xFF1
  3944                           postinc0	equ	0xFEE
  3945                           plusw0	equ	0xFEB
  3946                           fsr0h	equ	0xFEA
  3947                           fsr0l	equ	0xFE9
  3948                           wreg	equ	0xFE8
  3949                           postdec1	equ	0xFE5
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           plusw2	equ	0xFDB
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _writeByte *****************
  3961 ;; Defined at:
  3962 ;;		line 84 in file "Drivers/UART_Driver.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  data            1    wreg     unsigned char 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  data            1    1[BANK0 ] unsigned char 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3976 ;;      Params:         0       0       0       0       0       0       0       0       0
  3977 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3979 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3980 ;;Total ram usage:        1 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    9
  3983 ;; This function calls:
  3984 ;;		_D_UART_Enable
  3985 ;; This function is called by:
  3986 ;;		_putch
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text18
  3991  001D24                     __ptext18:
  3992                           	opt stack 0
  3993  001D24                     _writeByte:
  3994                           	opt stack 17
  3995                           
  3996                           ;incstack = 0
  3997                           ;writeByte@data stored from wreg
  3998  001D24  0100               	movlb	0	; () banked
  3999  001D26  6F61               	movwf	writeByte@data& (0+255),b
  4000                           
  4001                           ;UART_Driver.c: 85: D_UART_Enable(1);
  4002  001D28  0E01               	movlw	1
  4003  001D2A  EC33  F00E         	call	_D_UART_Enable
  4004  001D2E                     l86:
  4005  001D2E  A2AC               	btfss	4012,1,c	;volatile
  4006  001D30  D7FE               	goto	l86
  4007                           
  4008                           ;UART_Driver.c: 87: TXREG = data;
  4009  001D32  C061  FFAD         	movff	writeByte@data,4013	;volatile
  4010  001D36  0012               	return		;funcret
  4011  001D38                     __end_of_writeByte:
  4012                           	opt stack 0
  4013                           tblptru	equ	0xFF8
  4014                           tblptrh	equ	0xFF7
  4015                           tblptrl	equ	0xFF6
  4016                           tablat	equ	0xFF5
  4017                           prodh	equ	0xFF4
  4018                           prodl	equ	0xFF3
  4019                           intcon	equ	0xFF2
  4020                           intcon2	equ	0xFF1
  4021                           postinc0	equ	0xFEE
  4022                           plusw0	equ	0xFEB
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           postdec2	equ	0xFDD
  4032                           plusw2	equ	0xFDB
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _D_UART_Enable *****************
  4038 ;; Defined at:
  4039 ;;		line 322 in file "Drivers/UART_Driver.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  enable          1    wreg     unsigned char 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  enable          1    0[BANK0 ] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, status,2
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4053 ;;      Params:         0       0       0       0       0       0       0       0       0
  4054 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4056 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4057 ;;Total ram usage:        1 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    8
  4060 ;; This function calls:
  4061 ;;		Nothing
  4062 ;; This function is called by:
  4063 ;;		_writeByte
  4064 ;;		_D_UART_Init
  4065 ;;		_initialize
  4066 ;;		_handle_message
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text19
  4071  001C66                     __ptext19:
  4072                           	opt stack 0
  4073  001C66                     _D_UART_Enable:
  4074                           	opt stack 17
  4075                           
  4076                           ;incstack = 0
  4077                           ;D_UART_Enable@enable stored from wreg
  4078  001C66  0100               	movlb	0	; () banked
  4079  001C68  6F60               	movwf	D_UART_Enable@enable& (0+255),b
  4080                           
  4081                           ;UART_Driver.c: 323: if(enable) {
  4082  001C6A  0100               	movlb	0	; () banked
  4083  001C6C  5160               	movf	D_UART_Enable@enable& (0+255),w,b
  4084  001C6E  0100               	movlb	0	; () banked
  4085  001C70  B4D8               	btfsc	status,2,c
  4086  001C72  D006               	goto	l164
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;UART_Driver.c: 324: TRISCbits.TRISC6 = 0;
  4090  001C74  9C94               	bcf	3988,6,c	;volatile
  4091                           
  4092                           ;UART_Driver.c: 325: TRISCbits.TRISC7 = 1;
  4093  001C76  8E94               	bsf	3988,7,c	;volatile
  4094                           
  4095                           ;UART_Driver.c: 326: TXSTAbits.TXEN = 1;
  4096  001C78  8AAC               	bsf	4012,5,c	;volatile
  4097                           
  4098                           ;UART_Driver.c: 327: RCSTAbits.CREN = 1;
  4099  001C7A  88AB               	bsf	4011,4,c	;volatile
  4100                           
  4101                           ;UART_Driver.c: 328: RCSTAbits.SPEN = 1;
  4102  001C7C  8EAB               	bsf	4011,7,c	;volatile
  4103                           
  4104                           ;UART_Driver.c: 329: } else {
  4105  001C7E  0012               	return	
  4106  001C80                     l164:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;UART_Driver.c: 330: TRISCbits.TRISC6 = 0;
  4110  001C80  9C94               	bcf	3988,6,c	;volatile
  4111                           
  4112                           ;UART_Driver.c: 331: TRISCbits.TRISC7 = 0;
  4113  001C82  9E94               	bcf	3988,7,c	;volatile
  4114                           
  4115                           ;UART_Driver.c: 332: TXSTAbits.TXEN = 0;
  4116  001C84  9AAC               	bcf	4012,5,c	;volatile
  4117                           
  4118                           ;UART_Driver.c: 333: RCSTAbits.CREN = 0;
  4119  001C86  98AB               	bcf	4011,4,c	;volatile
  4120                           
  4121                           ;UART_Driver.c: 334: RCSTAbits.SPEN = 0;
  4122  001C88  9EAB               	bcf	4011,7,c	;volatile
  4123  001C8A  0012               	return	
  4124  001C8C                     __end_of_D_UART_Enable:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           intcon2	equ	0xFF1
  4134                           postinc0	equ	0xFEE
  4135                           plusw0	equ	0xFEB
  4136                           fsr0h	equ	0xFEA
  4137                           fsr0l	equ	0xFE9
  4138                           wreg	equ	0xFE8
  4139                           postdec1	equ	0xFE5
  4140                           fsr1h	equ	0xFE2
  4141                           fsr1l	equ	0xFE1
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           plusw2	equ	0xFDB
  4146                           fsr2h	equ	0xFDA
  4147                           fsr2l	equ	0xFD9
  4148                           status	equ	0xFD8
  4149                           
  4150 ;; *************** function ___lwmod *****************
  4151 ;; Defined at:
  4152 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwmod.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  dividend        2    7[BANK0 ] unsigned int 
  4155 ;;  divisor         2    9[BANK0 ] unsigned int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  counter         1   11[BANK0 ] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  2    7[BANK0 ] unsigned int 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4167 ;;      Params:         0       4       0       0       0       0       0       0       0
  4168 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4170 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4171 ;;Total ram usage:        5 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    8
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_printf
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text20
  4182  00194E                     __ptext20:
  4183                           	opt stack 0
  4184  00194E                     ___lwmod:
  4185                           	opt stack 19
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;incstack = 0
  4189  00194E  0100               	movlb	0	; () banked
  4190  001950  5169               	movf	___lwmod@divisor& (0+255),w,b
  4191  001952  0100               	movlb	0	; () banked
  4192  001954  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4193  001956  B4D8               	btfsc	status,2,c
  4194  001958  D026               	goto	l837
  4195                           
  4196                           ; BSR set to: 0
  4197  00195A  0E01               	movlw	1
  4198  00195C  0100               	movlb	0	; () banked
  4199  00195E  6F6B               	movwf	___lwmod@counter& (0+255),b
  4200  001960  D006               	goto	l1906
  4201  001962                     l1904:
  4202                           
  4203                           ; BSR set to: 0
  4204  001962  0100               	movlb	0	; () banked
  4205  001964  90D8               	bcf	status,0,c
  4206  001966  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  4207  001968  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4208  00196A  0100               	movlb	0	; () banked
  4209  00196C  2B6B               	incf	___lwmod@counter& (0+255),f,b
  4210  00196E                     l1906:
  4211                           
  4212                           ; BSR set to: 0
  4213  00196E  0100               	movlb	0	; () banked
  4214  001970  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4215  001972  D7F7               	goto	l1904
  4216  001974                     l1908:
  4217                           
  4218                           ; BSR set to: 0
  4219  001974  0100               	movlb	0	; () banked
  4220  001976  5169               	movf	___lwmod@divisor& (0+255),w,b
  4221  001978  0100               	movlb	0	; () banked
  4222  00197A  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  4223  00197C  0100               	movlb	0	; () banked
  4224  00197E  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4225  001980  0100               	movlb	0	; () banked
  4226  001982  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4227  001984  A0D8               	btfss	status,0,c
  4228  001986  D008               	goto	l1912
  4229                           
  4230                           ; BSR set to: 0
  4231  001988  0100               	movlb	0	; () banked
  4232  00198A  5169               	movf	___lwmod@divisor& (0+255),w,b
  4233  00198C  0100               	movlb	0	; () banked
  4234  00198E  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  4235  001990  0100               	movlb	0	; () banked
  4236  001992  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4237  001994  0100               	movlb	0	; () banked
  4238  001996  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4239  001998                     l1912:
  4240                           
  4241                           ; BSR set to: 0
  4242  001998  0100               	movlb	0	; () banked
  4243  00199A  90D8               	bcf	status,0,c
  4244  00199C  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4245  00199E  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  4246                           
  4247                           ; BSR set to: 0
  4248  0019A0  0100               	movlb	0	; () banked
  4249  0019A2  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  4250  0019A4  D7E7               	goto	l1908
  4251  0019A6                     l837:
  4252                           
  4253                           ; BSR set to: 0
  4254  0019A6  C067  F067         	movff	___lwmod@dividend,?___lwmod
  4255  0019AA  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  4256                           
  4257                           ; BSR set to: 0
  4258  0019AE  0012               	return		;funcret
  4259  0019B0                     __end_of___lwmod:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           intcon	equ	0xFF2
  4268                           intcon2	equ	0xFF1
  4269                           postinc0	equ	0xFEE
  4270                           plusw0	equ	0xFEB
  4271                           fsr0h	equ	0xFEA
  4272                           fsr0l	equ	0xFE9
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           plusw2	equ	0xFDB
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function ___lwdiv *****************
  4286 ;; Defined at:
  4287 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwdiv.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  dividend        2    0[BANK0 ] unsigned int 
  4290 ;;  divisor         2    2[BANK0 ] unsigned int 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  quotient        2    4[BANK0 ] unsigned int 
  4293 ;;  counter         1    6[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  2    0[BANK0 ] unsigned int 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         0       4       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4307 ;;Total ram usage:        7 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    8
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_printf
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text21
  4318  00178A                     __ptext21:
  4319                           	opt stack 0
  4320  00178A                     ___lwdiv:
  4321                           	opt stack 19
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;incstack = 0
  4325  00178A  0E00               	movlw	0
  4326  00178C  0100               	movlb	0	; () banked
  4327  00178E  6F65               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4328  001790  0E00               	movlw	0
  4329  001792  6F64               	movwf	___lwdiv@quotient& (0+255),b
  4330                           
  4331                           ; BSR set to: 0
  4332  001794  0100               	movlb	0	; () banked
  4333  001796  5162               	movf	___lwdiv@divisor& (0+255),w,b
  4334  001798  0100               	movlb	0	; () banked
  4335  00179A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4336  00179C  B4D8               	btfsc	status,2,c
  4337  00179E  D02C               	goto	l827
  4338                           
  4339                           ; BSR set to: 0
  4340  0017A0  0E01               	movlw	1
  4341  0017A2  0100               	movlb	0	; () banked
  4342  0017A4  6F66               	movwf	___lwdiv@counter& (0+255),b
  4343  0017A6  D006               	goto	l1886
  4344  0017A8                     l1884:
  4345                           
  4346                           ; BSR set to: 0
  4347  0017A8  0100               	movlb	0	; () banked
  4348  0017AA  90D8               	bcf	status,0,c
  4349  0017AC  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  4350  0017AE  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4351  0017B0  0100               	movlb	0	; () banked
  4352  0017B2  2B66               	incf	___lwdiv@counter& (0+255),f,b
  4353  0017B4                     l1886:
  4354                           
  4355                           ; BSR set to: 0
  4356  0017B4  0100               	movlb	0	; () banked
  4357  0017B6  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4358  0017B8  D7F7               	goto	l1884
  4359  0017BA                     l1888:
  4360                           
  4361                           ; BSR set to: 0
  4362  0017BA  0100               	movlb	0	; () banked
  4363  0017BC  90D8               	bcf	status,0,c
  4364  0017BE  3764               	rlcf	___lwdiv@quotient& (0+255),f,b
  4365  0017C0  3765               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4366                           
  4367                           ; BSR set to: 0
  4368  0017C2  0100               	movlb	0	; () banked
  4369  0017C4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  4370  0017C6  0100               	movlb	0	; () banked
  4371  0017C8  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  4372  0017CA  0100               	movlb	0	; () banked
  4373  0017CC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4374  0017CE  0100               	movlb	0	; () banked
  4375  0017D0  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4376  0017D2  A0D8               	btfss	status,0,c
  4377  0017D4  D00A               	goto	l1896
  4378                           
  4379                           ; BSR set to: 0
  4380  0017D6  0100               	movlb	0	; () banked
  4381  0017D8  5162               	movf	___lwdiv@divisor& (0+255),w,b
  4382  0017DA  0100               	movlb	0	; () banked
  4383  0017DC  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  4384  0017DE  0100               	movlb	0	; () banked
  4385  0017E0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4386  0017E2  0100               	movlb	0	; () banked
  4387  0017E4  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4388                           
  4389                           ; BSR set to: 0
  4390  0017E6  0100               	movlb	0	; () banked
  4391  0017E8  8164               	bsf	___lwdiv@quotient& (0+255),0,b
  4392  0017EA                     l1896:
  4393                           
  4394                           ; BSR set to: 0
  4395  0017EA  0100               	movlb	0	; () banked
  4396  0017EC  90D8               	bcf	status,0,c
  4397  0017EE  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4398  0017F0  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  4399                           
  4400                           ; BSR set to: 0
  4401  0017F2  0100               	movlb	0	; () banked
  4402  0017F4  2F66               	decfsz	___lwdiv@counter& (0+255),f,b
  4403  0017F6  D7E1               	goto	l1888
  4404  0017F8                     l827:
  4405                           
  4406                           ; BSR set to: 0
  4407  0017F8  C064  F060         	movff	___lwdiv@quotient,?___lwdiv
  4408  0017FC  C065  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4409                           
  4410                           ; BSR set to: 0
  4411  001800  0012               	return		;funcret
  4412  001802                     __end_of___lwdiv:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           tblptrh	equ	0xFF7
  4416                           tblptrl	equ	0xFF6
  4417                           tablat	equ	0xFF5
  4418                           prodh	equ	0xFF4
  4419                           prodl	equ	0xFF3
  4420                           intcon	equ	0xFF2
  4421                           intcon2	equ	0xFF1
  4422                           postinc0	equ	0xFEE
  4423                           plusw0	equ	0xFEB
  4424                           fsr0h	equ	0xFEA
  4425                           fsr0l	equ	0xFE9
  4426                           wreg	equ	0xFE8
  4427                           postdec1	equ	0xFE5
  4428                           fsr1h	equ	0xFE2
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           plusw2	equ	0xFDB
  4434                           fsr2h	equ	0xFDA
  4435                           fsr2l	equ	0xFD9
  4436                           status	equ	0xFD8
  4437                           
  4438 ;; *************** function _D_UART_GetDeviceName *****************
  4439 ;; Defined at:
  4440 ;;		line 352 in file "Drivers/UART_Driver.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;		None
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  3    0[BANK0 ] PTR const unsigned char 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4454 ;;      Params:         0       3       0       0       0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4457 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4458 ;;Total ram usage:        3 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    8
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_handle_message
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text22
  4469  001D7A                     __ptext22:
  4470                           	opt stack 0
  4471  001D7A                     _D_UART_GetDeviceName:
  4472                           	opt stack 21
  4473                           
  4474                           ;UART_Driver.c: 353: return deviceName;
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;incstack = 0
  4478  001D7A  C0E5  F060         	movff	_deviceName,?_D_UART_GetDeviceName
  4479  001D7E  C0E6  F061         	movff	_deviceName+1,?_D_UART_GetDeviceName+1
  4480  001D82  C0E7  F062         	movff	_deviceName+2,?_D_UART_GetDeviceName+2
  4481  001D86  0012               	return	
  4482  001D88                     __end_of_D_UART_GetDeviceName:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           intcon2	equ	0xFF1
  4492                           postinc0	equ	0xFEE
  4493                           plusw0	equ	0xFEB
  4494                           fsr0h	equ	0xFEA
  4495                           fsr0l	equ	0xFE9
  4496                           wreg	equ	0xFE8
  4497                           postdec1	equ	0xFE5
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           plusw2	equ	0xFDB
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _D_MCP3201_Read *****************
  4509 ;; Defined at:
  4510 ;;		line 78 in file "Drivers/MCP3201_Driver.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  2    5[BANK0 ] unsigned int 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4524 ;;      Params:         0       2       0       0       0       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4527 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4528 ;;Total ram usage:        2 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    9
  4531 ;; This function calls:
  4532 ;;		_D_SPI_Write
  4533 ;;		_convertData
  4534 ;; This function is called by:
  4535 ;;		_handle_message
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text23
  4540  001BA0                     __ptext23:
  4541                           	opt stack 0
  4542  001BA0                     _D_MCP3201_Read:
  4543                           	opt stack 20
  4544                           
  4545                           ;MCP3201_Driver.c: 79: PORTBbits.RB2 = 0;
  4546                           
  4547                           ;incstack = 0
  4548  001BA0  9481               	bcf	3969,2,c	;volatile
  4549                           
  4550                           ;MCP3201_Driver.c: 80: _delay((unsigned long)((1)*(16000000/4000000.0)));
  4551  001BA2  D000               	nop2		;2 cycle nop
  4552  001BA4  D000               	nop2		;2 cycle nop
  4553                           
  4554                           ;MCP3201_Driver.c: 81: msbBits = D_SPI_Write(0x00);
  4555  001BA6  0E00               	movlw	0
  4556  001BA8  EC9C  F00E         	call	_D_SPI_Write
  4557  001BAC  0100               	movlb	0	; () banked
  4558  001BAE  6FE4               	movwf	_msbBits& (0+255),b
  4559                           
  4560                           ;MCP3201_Driver.c: 82: lsbBits = D_SPI_Write(0x00);
  4561  001BB0  0E00               	movlw	0
  4562  001BB2  EC9C  F00E         	call	_D_SPI_Write
  4563  001BB6  0100               	movlb	0	; () banked
  4564  001BB8  6FE3               	movwf	_lsbBits& (0+255),b
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;MCP3201_Driver.c: 83: _delay((unsigned long)((1)*(16000000/4000000.0)));
  4568  001BBA  D000               	nop2		;2 cycle nop
  4569  001BBC  D000               	nop2		;2 cycle nop
  4570                           
  4571                           ;MCP3201_Driver.c: 84: PORTBbits.RB2 = 1;
  4572  001BBE  8481               	bsf	3969,2,c	;volatile
  4573                           
  4574                           ;MCP3201_Driver.c: 86: analogValue = convertData(msbBits, lsbBits);
  4575  001BC0  C0E3  F060         	movff	_lsbBits,convertData@low
  4576  001BC4  0100               	movlb	0	; () banked
  4577  001BC6  51E4               	movf	_msbBits& (0+255),w,b
  4578  001BC8  ECD8  F00C         	call	_convertData
  4579  001BCC  C060  F0DC         	movff	?_convertData,_analogValue
  4580  001BD0  C061  F0DD         	movff	?_convertData+1,_analogValue+1
  4581                           
  4582                           ;MCP3201_Driver.c: 88: return analogValue;
  4583  001BD4  C0DC  F065         	movff	_analogValue,?_D_MCP3201_Read
  4584  001BD8  C0DD  F066         	movff	_analogValue+1,?_D_MCP3201_Read+1
  4585  001BDC  0012               	return	
  4586  001BDE                     __end_of_D_MCP3201_Read:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           intcon	equ	0xFF2
  4595                           intcon2	equ	0xFF1
  4596                           postinc0	equ	0xFEE
  4597                           plusw0	equ	0xFEB
  4598                           fsr0h	equ	0xFEA
  4599                           fsr0l	equ	0xFE9
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1h	equ	0xFE2
  4603                           fsr1l	equ	0xFE1
  4604                           indf2	equ	0xFDF
  4605                           postinc2	equ	0xFDE
  4606                           postdec2	equ	0xFDD
  4607                           plusw2	equ	0xFDB
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _convertData *****************
  4613 ;; Defined at:
  4614 ;;		line 32 in file "Drivers/MCP3201_Driver.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  high            1    wreg     unsigned char 
  4617 ;;  low             1    0[BANK0 ] unsigned char 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  high            1    4[BANK0 ] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  2    0[BANK0 ] unsigned int 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4629 ;;      Params:         0       2       0       0       0       0       0       0       0
  4630 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4631 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4632 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4633 ;;Total ram usage:        5 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    8
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_D_MCP3201_Read
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text24
  4644  0019B0                     __ptext24:
  4645                           	opt stack 0
  4646  0019B0                     _convertData:
  4647                           	opt stack 20
  4648                           
  4649                           ;incstack = 0
  4650                           ;convertData@high stored from wreg
  4651  0019B0  0100               	movlb	0	; () banked
  4652  0019B2  6F64               	movwf	convertData@high& (0+255),b
  4653                           
  4654                           ;MCP3201_Driver.c: 36: high = (high & 0x1F);
  4655  0019B4  0100               	movlb	0	; () banked
  4656  0019B6  5164               	movf	convertData@high& (0+255),w,b
  4657  0019B8  0B1F               	andlw	31
  4658  0019BA  0100               	movlb	0	; () banked
  4659  0019BC  6F64               	movwf	convertData@high& (0+255),b
  4660                           
  4661                           ;MCP3201_Driver.c: 37: low = (low & 0xFE);
  4662  0019BE  0100               	movlb	0	; () banked
  4663  0019C0  5160               	movf	convertData@low& (0+255),w,b
  4664  0019C2  0BFE               	andlw	254
  4665  0019C4  0100               	movlb	0	; () banked
  4666  0019C6  6F60               	movwf	convertData@low& (0+255),b
  4667                           
  4668                           ;MCP3201_Driver.c: 40: low = (low >> 1);
  4669  0019C8  0100               	movlb	0	; () banked
  4670  0019CA  90D8               	bcf	status,0,c
  4671  0019CC  3160               	rrcf	convertData@low& (0+255),w,b
  4672  0019CE  0100               	movlb	0	; () banked
  4673  0019D0  6F60               	movwf	convertData@low& (0+255),b
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;MCP3201_Driver.c: 43: if ((high & 0x0001) == 0x0001) {
  4677  0019D2  0100               	movlb	0	; () banked
  4678  0019D4  A164               	btfss	convertData@high& (0+255),0,b
  4679  0019D6  D005               	goto	l222
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;MCP3201_Driver.c: 44: low = (low | 0x0080);
  4683  0019D8  0100               	movlb	0	; () banked
  4684  0019DA  5160               	movf	convertData@low& (0+255),w,b
  4685  0019DC  0980               	iorlw	128
  4686  0019DE  0100               	movlb	0	; () banked
  4687  0019E0  6F60               	movwf	convertData@low& (0+255),b
  4688  0019E2                     l222:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;MCP3201_Driver.c: 45: }
  4692                           ;MCP3201_Driver.c: 48: high = (high >> 1);
  4693  0019E2  0100               	movlb	0	; () banked
  4694  0019E4  90D8               	bcf	status,0,c
  4695  0019E6  3164               	rrcf	convertData@high& (0+255),w,b
  4696  0019E8  0100               	movlb	0	; () banked
  4697  0019EA  6F64               	movwf	convertData@high& (0+255),b
  4698                           
  4699                           ;MCP3201_Driver.c: 49: return (low + (high << 8));
  4700  0019EC  0100               	movlb	0	; () banked
  4701  0019EE  5164               	movf	convertData@high& (0+255),w,b
  4702  0019F0  0100               	movlb	0	; () banked
  4703  0019F2  6F63               	movwf	(??_convertData+1)& (0+255),b
  4704  0019F4  6B62               	clrf	??_convertData& (0+255),b
  4705  0019F6  0100               	movlb	0	; () banked
  4706  0019F8  5160               	movf	convertData@low& (0+255),w,b
  4707  0019FA  0100               	movlb	0	; () banked
  4708  0019FC  2562               	addwf	??_convertData& (0+255),w,b
  4709  0019FE  0100               	movlb	0	; () banked
  4710  001A00  6F60               	movwf	?_convertData& (0+255),b
  4711  001A02  0E00               	movlw	0
  4712  001A04  0100               	movlb	0	; () banked
  4713  001A06  2163               	addwfc	(??_convertData+1)& (0+255),w,b
  4714  001A08  0100               	movlb	0	; () banked
  4715  001A0A  6F61               	movwf	(?_convertData+1)& (0+255),b
  4716  001A0C  0012               	return	
  4717  001A0E                     __end_of_convertData:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           intcon2	equ	0xFF1
  4727                           postinc0	equ	0xFEE
  4728                           plusw0	equ	0xFEB
  4729                           fsr0h	equ	0xFEA
  4730                           fsr0l	equ	0xFE9
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           plusw2	equ	0xFDB
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function _D_SPI_Write *****************
  4744 ;; Defined at:
  4745 ;;		line 55 in file "Drivers/SPI_Driver.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  data            1    wreg     unsigned char 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  data            1    0[BANK0 ] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      unsigned char 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4759 ;;      Params:         0       0       0       0       0       0       0       0       0
  4760 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4762 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4763 ;;Total ram usage:        1 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    8
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_D_MCP3201_Read
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text25
  4774  001D38                     __ptext25:
  4775                           	opt stack 0
  4776  001D38                     _D_SPI_Write:
  4777                           	opt stack 20
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;incstack = 0
  4781                           ;D_SPI_Write@data stored from wreg
  4782  001D38  0100               	movlb	0	; () banked
  4783  001D3A  6F60               	movwf	D_SPI_Write@data& (0+255),b
  4784                           
  4785                           ;SPI_Driver.c: 56: SSPBUF = data;
  4786  001D3C  C060  FFC9         	movff	D_SPI_Write@data,4041	;volatile
  4787  001D40                     l18:
  4788  001D40  A69E               	btfss	3998,3,c	;volatile
  4789  001D42  D7FE               	goto	l18
  4790                           
  4791                           ;SPI_Driver.c: 58: PIR1bits.SSPIF = 0;
  4792  001D44  969E               	bcf	3998,3,c	;volatile
  4793                           
  4794                           ;SPI_Driver.c: 59: return SSPBUF;
  4795  001D46  50C9               	movf	4041,w,c	;volatile
  4796  001D48  0012               	return		;funcret
  4797  001D4A                     __end_of_D_SPI_Write:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           intcon	equ	0xFF2
  4806                           intcon2	equ	0xFF1
  4807                           postinc0	equ	0xFEE
  4808                           plusw0	equ	0xFEB
  4809                           fsr0h	equ	0xFEA
  4810                           fsr0l	equ	0xFE9
  4811                           wreg	equ	0xFE8
  4812                           postdec1	equ	0xFE5
  4813                           fsr1h	equ	0xFE2
  4814                           fsr1l	equ	0xFE1
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           plusw2	equ	0xFDB
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function _handle_inputs *****************
  4824 ;; Defined at:
  4825 ;;		line 144 in file "main.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0
  4840 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4842 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4843 ;;Total ram usage:        0 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    8
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text26
  4854  001D5C                     __ptext26:
  4855                           	opt stack 0
  4856  001D5C                     _handle_inputs:
  4857                           	opt stack 22
  4858                           
  4859                           ;main.c: 145: if (isDoorOpen) {
  4860                           
  4861                           ;incstack = 0
  4862  001D5C  0100               	movlb	0	; () banked
  4863  001D5E  51E2               	movf	_isDoorOpen& (0+255),w,b
  4864  001D60  B4D8               	btfsc	status,2,c
  4865  001D62  D002               	goto	l376
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;main.c: 146: LATBbits.LATB6 = 1;
  4869  001D64  8C8A               	bsf	3978,6,c	;volatile
  4870                           
  4871                           ;main.c: 147: } else {
  4872  001D66  0012               	return	
  4873  001D68                     l376:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;main.c: 148: LATBbits.LATB6 = 0;
  4877  001D68  9C8A               	bcf	3978,6,c	;volatile
  4878  001D6A  0012               	return	
  4879  001D6C                     __end_of_handle_inputs:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon2	equ	0xFF1
  4889                           postinc0	equ	0xFEE
  4890                           plusw0	equ	0xFEB
  4891                           fsr0h	equ	0xFEA
  4892                           fsr0l	equ	0xFE9
  4893                           wreg	equ	0xFE8
  4894                           postdec1	equ	0xFE5
  4895                           fsr1h	equ	0xFE2
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           plusw2	equ	0xFDB
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905 ;; *************** function _D_UART_ReadBlock *****************
  4906 ;; Defined at:
  4907 ;;		line 310 in file "Drivers/UART_Driver.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  cnt             1    wreg     unsigned char 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  cnt             1    7[BANK0 ] unsigned char 
  4912 ;;  cm            102    8[BANK0 ] struct .
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  6    0[BANK0 ] struct .
  4915 ;; Registers used:
  4916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4922 ;;      Params:         0       7       0       0       0       0       0       0       0
  4923 ;;      Locals:         0     103       0       0       0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4925 ;;      Totals:         0     110       0       0       0       0       0       0       0
  4926 ;;Total ram usage:      110 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    8
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text27
  4937  001A0E                     __ptext27:
  4938                           	opt stack 0
  4939  001A0E                     _D_UART_ReadBlock:
  4940                           	opt stack 22
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;incstack = 0
  4944                           ;D_UART_ReadBlock@cnt stored from wreg
  4945  001A0E  0100               	movlb	0	; () banked
  4946  001A10  6F67               	movwf	D_UART_ReadBlock@cnt& (0+255),b
  4947                           
  4948                           ;UART_Driver.c: 311: READ_ComMes cm = readBuffer.comMes[cnt];
  4949  001A12  0100               	movlb	0	; () banked
  4950  001A14  5167               	movf	D_UART_ReadBlock@cnt& (0+255),w,b
  4951  001A16  0D66               	mullw	102
  4952  001A18  0EA5               	movlw	low (_readBuffer+63)
  4953  001A1A  24F3               	addwf	prodl,w,c
  4954  001A1C  6ED9               	movwf	fsr2l,c
  4955  001A1E  0E01               	movlw	high (_readBuffer+63)
  4956  001A20  20F4               	addwfc	prodh,w,c
  4957  001A22  6EDA               	movwf	fsr2h,c
  4958  001A24  EE10  F068         	lfsr	1,D_UART_ReadBlock@cm
  4959  001A28  0E65               	movlw	101
  4960  001A2A                     u1711:
  4961  001A2A  CFDB FFE3          	movff	plusw2,plusw1
  4962  001A2E  06E8               	decf	wreg,f,c
  4963  001A30  E2FC               	bc	u1711
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;UART_Driver.c: 312: readData.sender = readBuffer.sender;
  4967  001A32  0E72               	movlw	low (_readBuffer+12)
  4968  001A34  0100               	movlb	0	; () banked
  4969  001A36  6FD6               	movwf	_readData& (0+255),b
  4970  001A38  0E01               	movlw	high (_readBuffer+12)
  4971  001A3A  0100               	movlb	0	; () banked
  4972  001A3C  6FD7               	movwf	(_readData+1)& (0+255),b
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;UART_Driver.c: 313: readData.command = cm.command;
  4976  001A3E  0E68               	movlw	low D_UART_ReadBlock@cm
  4977  001A40  0100               	movlb	0	; () banked
  4978  001A42  6FD8               	movwf	(_readData+2)& (0+255),b
  4979  001A44  0E00               	movlw	high D_UART_ReadBlock@cm
  4980  001A46  0100               	movlb	0	; () banked
  4981  001A48  6FD9               	movwf	(_readData+3)& (0+255),b
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;UART_Driver.c: 314: readData.message = cm.message;
  4985  001A4A  0E9B               	movlw	low (D_UART_ReadBlock@cm+51)
  4986  001A4C  0100               	movlb	0	; () banked
  4987  001A4E  6FDA               	movwf	(_readData+4)& (0+255),b
  4988  001A50  0E00               	movlw	high (D_UART_ReadBlock@cm+51)
  4989  001A52  0100               	movlb	0	; () banked
  4990  001A54  6FDB               	movwf	(_readData+5)& (0+255),b
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;UART_Driver.c: 315: return readData;
  4994  001A56  EE20  F0D6         	lfsr	2,_readData
  4995  001A5A  EE00  F060         	lfsr	0,?_D_UART_ReadBlock
  4996  001A5E  0E05               	movlw	5
  4997  001A60                     u1721:
  4998  001A60  CFDB FFEB          	movff	plusw2,plusw0
  4999  001A64  06E8               	decf	wreg,f,c
  5000  001A66  E2FC               	bc	u1721
  5001  001A68  0012               	return	
  5002  001A6A                     __end_of_D_UART_ReadBlock:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           postinc0	equ	0xFEE
  5013                           plusw0	equ	0xFEB
  5014                           fsr0h	equ	0xFEA
  5015                           fsr0l	equ	0xFE9
  5016                           wreg	equ	0xFE8
  5017                           postdec1	equ	0xFE5
  5018                           plusw1	equ	0xFE3
  5019                           fsr1h	equ	0xFE2
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           plusw2	equ	0xFDB
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _D_UART_Read *****************
  5030 ;; Defined at:
  5031 ;;		line 302 in file "Drivers/UART_Driver.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  cm            102    6[BANK0 ] struct .
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  6    0[BANK0 ] struct .
  5038 ;; Registers used:
  5039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5045 ;;      Params:         0       6       0       0       0       0       0       0       0
  5046 ;;      Locals:         0     102       0       0       0       0       0       0       0
  5047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5048 ;;      Totals:         0     108       0       0       0       0       0       0       0
  5049 ;;Total ram usage:      108 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    8
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text28
  5060  001B14                     __ptext28:
  5061                           	opt stack 0
  5062  001B14                     _D_UART_Read:
  5063                           	opt stack 22
  5064                           
  5065                           ;UART_Driver.c: 303: READ_ComMes cm = readBuffer.comMes[0];
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;incstack = 0
  5069  001B14  EE21  F0A5         	lfsr	2,_readBuffer+63
  5070  001B18  EE10  F066         	lfsr	1,D_UART_Read@cm
  5071  001B1C  0E65               	movlw	101
  5072  001B1E                     u1691:
  5073  001B1E  CFDB FFE3          	movff	plusw2,plusw1
  5074  001B22  06E8               	decf	wreg,f,c
  5075  001B24  E2FC               	bc	u1691
  5076                           
  5077                           ;UART_Driver.c: 304: readData.sender = readBuffer.sender;
  5078  001B26  0E72               	movlw	low (_readBuffer+12)
  5079  001B28  0100               	movlb	0	; () banked
  5080  001B2A  6FD6               	movwf	_readData& (0+255),b
  5081  001B2C  0E01               	movlw	high (_readBuffer+12)
  5082  001B2E  0100               	movlb	0	; () banked
  5083  001B30  6FD7               	movwf	(_readData+1)& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;UART_Driver.c: 305: readData.command = cm.command;
  5087  001B32  0E66               	movlw	low D_UART_Read@cm
  5088  001B34  0100               	movlb	0	; () banked
  5089  001B36  6FD8               	movwf	(_readData+2)& (0+255),b
  5090  001B38  0E00               	movlw	high D_UART_Read@cm
  5091  001B3A  0100               	movlb	0	; () banked
  5092  001B3C  6FD9               	movwf	(_readData+3)& (0+255),b
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;UART_Driver.c: 306: readData.message = cm.message;
  5096  001B3E  0E99               	movlw	low (D_UART_Read@cm+51)
  5097  001B40  0100               	movlb	0	; () banked
  5098  001B42  6FDA               	movwf	(_readData+4)& (0+255),b
  5099  001B44  0E00               	movlw	high (D_UART_Read@cm+51)
  5100  001B46  0100               	movlb	0	; () banked
  5101  001B48  6FDB               	movwf	(_readData+5)& (0+255),b
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;UART_Driver.c: 307: return readData;
  5105  001B4A  EE20  F0D6         	lfsr	2,_readData
  5106  001B4E  EE00  F060         	lfsr	0,?_D_UART_Read
  5107  001B52  0E05               	movlw	5
  5108  001B54                     u1701:
  5109  001B54  CFDB FFEB          	movff	plusw2,plusw0
  5110  001B58  06E8               	decf	wreg,f,c
  5111  001B5A  E2FC               	bc	u1701
  5112  001B5C  0012               	return	
  5113  001B5E                     __end_of_D_UART_Read:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           intcon	equ	0xFF2
  5122                           intcon2	equ	0xFF1
  5123                           postinc0	equ	0xFEE
  5124                           plusw0	equ	0xFEB
  5125                           fsr0h	equ	0xFEA
  5126                           fsr0l	equ	0xFE9
  5127                           wreg	equ	0xFE8
  5128                           postdec1	equ	0xFE5
  5129                           plusw1	equ	0xFE3
  5130                           fsr1h	equ	0xFE2
  5131                           fsr1l	equ	0xFE1
  5132                           indf2	equ	0xFDF
  5133                           postinc2	equ	0xFDE
  5134                           postdec2	equ	0xFDD
  5135                           plusw2	equ	0xFDB
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function _D_UART_BlockLength *****************
  5141 ;; Defined at:
  5142 ;;		line 318 in file "Drivers/UART_Driver.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  1    wreg      unsigned char 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr2l, fsr2h
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5159 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    8
  5163 ;; This function calls:
  5164 ;;		Nothing
  5165 ;; This function is called by:
  5166 ;;		_main
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text29
  5171  001D9A                     __ptext29:
  5172                           	opt stack 0
  5173  001D9A                     _D_UART_BlockLength:
  5174                           	opt stack 22
  5175                           
  5176                           ;UART_Driver.c: 319: return readBuffer.blockLength;
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;incstack = 0
  5180  001D9A  EE21  F071         	lfsr	2,_readBuffer+11
  5181  001D9E  50DF               	movf	indf2,w,c
  5182  001DA0  0012               	return	
  5183  001DA2                     __end_of_D_UART_BlockLength:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           intcon2	equ	0xFF1
  5193                           postinc0	equ	0xFEE
  5194                           plusw0	equ	0xFEB
  5195                           fsr0h	equ	0xFEA
  5196                           fsr0l	equ	0xFE9
  5197                           wreg	equ	0xFE8
  5198                           postdec1	equ	0xFE5
  5199                           plusw1	equ	0xFE3
  5200                           fsr1h	equ	0xFE2
  5201                           fsr1l	equ	0xFE1
  5202                           indf2	equ	0xFDF
  5203                           postinc2	equ	0xFDE
  5204                           postdec2	equ	0xFDD
  5205                           plusw2	equ	0xFDB
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _LowISR *****************
  5211 ;; Defined at:
  5212 ;;		line 360 in file "Drivers/UART_Driver.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5228 ;;      Temps:         17       0       0       0       0       0       0       0       0
  5229 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5230 ;;Total ram usage:       17 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    7
  5233 ;; This function calls:
  5234 ;;		_fillDataBuffer
  5235 ;;		_readByte
  5236 ;; This function is called by:
  5237 ;;		Interrupt level 1
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	intcodelo
  5242  000018                     __pintcodelo:
  5243                           	opt stack 0
  5244  000018                     _LowISR:
  5245                           	opt stack 16
  5246                           
  5247                           ;incstack = 0
  5248  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5249  00001A  CFD8 F02F          	movff	status,??_LowISR
  5250  00001E  CFE8 F030          	movff	wreg,??_LowISR+1
  5251  000022  CFE0 F031          	movff	bsr,??_LowISR+2
  5252  000026  CFFA F032          	movff	pclath,??_LowISR+3
  5253  00002A  CFFB F033          	movff	pclatu,??_LowISR+4
  5254  00002E  CFE9 F034          	movff	fsr0l,??_LowISR+5
  5255  000032  CFEA F035          	movff	fsr0h,??_LowISR+6
  5256  000036  CFE1 F036          	movff	fsr1l,??_LowISR+7
  5257  00003A  CFE2 F037          	movff	fsr1h,??_LowISR+8
  5258  00003E  CFD9 F038          	movff	fsr2l,??_LowISR+9
  5259  000042  CFDA F039          	movff	fsr2h,??_LowISR+10
  5260  000046  CFF3 F03A          	movff	prodl,??_LowISR+11
  5261  00004A  CFF4 F03B          	movff	prodh,??_LowISR+12
  5262  00004E  CFF6 F03C          	movff	tblptrl,??_LowISR+13
  5263  000052  CFF7 F03D          	movff	tblptrh,??_LowISR+14
  5264  000056  CFF8 F03E          	movff	tblptru,??_LowISR+15
  5265  00005A  CFF5 F03F          	movff	tablat,??_LowISR+16
  5266                           
  5267                           ;UART_Driver.c: 361: if (PIR1bits.RC1IF) {
  5268  00005E  AA9E               	btfss	3998,5,c	;volatile
  5269  000060  D005               	goto	i1l180
  5270                           
  5271                           ;UART_Driver.c: 362: fillDataBuffer(readByte());
  5272  000062  ECEF  F00D         	call	_readByte	;wreg free
  5273  000066  EC4A  F004         	call	_fillDataBuffer
  5274                           
  5275                           ;UART_Driver.c: 363: PIR1bits.RC1IF = 0;
  5276  00006A  9A9E               	bcf	3998,5,c	;volatile
  5277  00006C                     i1l180:
  5278  00006C  C03F  FFF5         	movff	??_LowISR+16,tablat
  5279  000070  C03E  FFF8         	movff	??_LowISR+15,tblptru
  5280  000074  C03D  FFF7         	movff	??_LowISR+14,tblptrh
  5281  000078  C03C  FFF6         	movff	??_LowISR+13,tblptrl
  5282  00007C  C03B  FFF4         	movff	??_LowISR+12,prodh
  5283  000080  C03A  FFF3         	movff	??_LowISR+11,prodl
  5284  000084  C039  FFDA         	movff	??_LowISR+10,fsr2h
  5285  000088  C038  FFD9         	movff	??_LowISR+9,fsr2l
  5286  00008C  C037  FFE2         	movff	??_LowISR+8,fsr1h
  5287  000090  C036  FFE1         	movff	??_LowISR+7,fsr1l
  5288  000094  C035  FFEA         	movff	??_LowISR+6,fsr0h
  5289  000098  C034  FFE9         	movff	??_LowISR+5,fsr0l
  5290  00009C  C033  FFFB         	movff	??_LowISR+4,pclatu
  5291  0000A0  C032  FFFA         	movff	??_LowISR+3,pclath
  5292  0000A4  C031  FFE0         	movff	??_LowISR+2,bsr
  5293  0000A8  C030  FFE8         	movff	??_LowISR+1,wreg
  5294  0000AC  C02F  FFD8         	movff	??_LowISR,status
  5295  0000B0  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5296  0000B2  0010               	retfie	
  5297  0000B4                     __end_of_LowISR:
  5298                           	opt stack 0
  5299                           pclatu	equ	0xFFB
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           intcon2	equ	0xFF1
  5309                           postinc0	equ	0xFEE
  5310                           plusw0	equ	0xFEB
  5311                           fsr0h	equ	0xFEA
  5312                           fsr0l	equ	0xFE9
  5313                           wreg	equ	0xFE8
  5314                           postdec1	equ	0xFE5
  5315                           plusw1	equ	0xFE3
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           bsr	equ	0xFE0
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           plusw2	equ	0xFDB
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function _readByte *****************
  5328 ;; Defined at:
  5329 ;;		line 90 in file "Drivers/UART_Driver.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  dum             1   15[COMRAM] unsigned char 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      unsigned char 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5343 ;;      Params:         0       0       0       0       0       0       0       0       0
  5344 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5346 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5347 ;;Total ram usage:        1 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    2
  5350 ;; This function calls:
  5351 ;;		i1_D_UART_Enable
  5352 ;; This function is called by:
  5353 ;;		_LowISR
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text31
  5358  001BDE                     __ptext31:
  5359                           	opt stack 0
  5360  001BDE                     _readByte:
  5361                           	opt stack 20
  5362                           
  5363                           ;UART_Driver.c: 91: if(RCSTAbits.FERR == 1) {
  5364                           
  5365                           ;incstack = 0
  5366  001BDE  A4AB               	btfss	4011,2,c	;volatile
  5367  001BE0  D005               	goto	i1l92
  5368                           
  5369                           ;UART_Driver.c: 92: uint8_t dum = RCREG;
  5370  001BE2  CFAE F010          	movff	4014,readByte@dum	;volatile
  5371                           
  5372                           ;UART_Driver.c: 93: LATBbits.LATB5 = 1;
  5373  001BE6  8A8A               	bsf	3978,5,c	;volatile
  5374                           
  5375                           ;UART_Driver.c: 94: return 0;
  5376  001BE8  0E00               	movlw	0
  5377  001BEA  0012               	return	
  5378  001BEC                     i1l92:
  5379                           
  5380                           ;UART_Driver.c: 95: }
  5381                           ;UART_Driver.c: 96: if(RCSTAbits.OERR == 1) {
  5382  001BEC  A2AB               	btfss	4011,1,c	;volatile
  5383  001BEE  D00D               	goto	i1l94
  5384                           
  5385                           ;UART_Driver.c: 97: D_UART_Enable(0);
  5386  001BF0  0E00               	movlw	0
  5387  001BF2  EC66  F00E         	call	i1_D_UART_Enable
  5388                           
  5389                           ;UART_Driver.c: 98: _delay((unsigned long)((10)*(16000000/4000000.0)));
  5390  001BF6  0E0D               	movlw	13
  5391  001BF8                     i1u197_27:
  5392  001BF8  2EE8               	decfsz	wreg,f,c
  5393  001BFA  D7FE               	goto	i1u197_27
  5394  001BFC  F000               	nop	
  5395                           
  5396                           ;UART_Driver.c: 99: D_UART_Enable(1);
  5397  001BFE  0E01               	movlw	1
  5398  001C00  EC66  F00E         	call	i1_D_UART_Enable
  5399                           
  5400                           ;UART_Driver.c: 100: LATBbits.LATB5 = 1;
  5401  001C04  8A8A               	bsf	3978,5,c	;volatile
  5402                           
  5403                           ;UART_Driver.c: 101: return 0;
  5404  001C06  0E00               	movlw	0
  5405  001C08  0012               	return	
  5406  001C0A                     i1l94:
  5407                           
  5408                           ;UART_Driver.c: 102: }
  5409                           ;UART_Driver.c: 103: LATBbits.LATB5 = 0;
  5410  001C0A  9A8A               	bcf	3978,5,c	;volatile
  5411                           
  5412                           ;UART_Driver.c: 104: return RCREG;
  5413  001C0C  50AE               	movf	4014,w,c	;volatile
  5414  001C0E  0012               	return	
  5415  001C10                     __end_of_readByte:
  5416                           	opt stack 0
  5417                           pclatu	equ	0xFFB
  5418                           pclath	equ	0xFFA
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           intcon2	equ	0xFF1
  5427                           postinc0	equ	0xFEE
  5428                           plusw0	equ	0xFEB
  5429                           fsr0h	equ	0xFEA
  5430                           fsr0l	equ	0xFE9
  5431                           wreg	equ	0xFE8
  5432                           postdec1	equ	0xFE5
  5433                           plusw1	equ	0xFE3
  5434                           fsr1h	equ	0xFE2
  5435                           fsr1l	equ	0xFE1
  5436                           bsr	equ	0xFE0
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           plusw2	equ	0xFDB
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445 ;; *************** function _fillDataBuffer *****************
  5446 ;; Defined at:
  5447 ;;		line 110 in file "Drivers/UART_Driver.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;  data            1    wreg     unsigned char 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  data            1   45[COMRAM] unsigned char 
  5452 ;;  i               1   44[COMRAM] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0
  5463 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5464 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5465 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5466 ;;Total ram usage:        3 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    6
  5469 ;; This function calls:
  5470 ;;		_acknowledge
  5471 ;; This function is called by:
  5472 ;;		_LowISR
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text32
  5477  000894                     __ptext32:
  5478                           	opt stack 0
  5479  000894                     _fillDataBuffer:
  5480                           	opt stack 16
  5481                           
  5482                           ;incstack = 0
  5483                           ;fillDataBuffer@data stored from wreg
  5484  000894  6E2E               	movwf	fillDataBuffer@data,c
  5485                           
  5486                           ;UART_Driver.c: 111: switch(readBuffer.state) {
  5487  000896  D14A               	goto	i1l2502
  5488  000898                     i1l2390:
  5489                           
  5490                           ;UART_Driver.c: 113: if(data == 0x26) {
  5491  000898  0E26               	movlw	38
  5492  00089A  182E               	xorwf	fillDataBuffer@data,w,c
  5493  00089C  A4D8               	btfss	status,2,c
  5494  00089E  D01A               	goto	i1l105
  5495                           
  5496                           ;UART_Driver.c: 114: readBuffer.typeCnt = 0;
  5497  0008A0  0E00               	movlw	0
  5498  0008A2  CFE8 F170          	movff	wreg,_readBuffer+10
  5499                           
  5500                           ;UART_Driver.c: 115: readBuffer.blockLength = 0;
  5501  0008A6  0E00               	movlw	0
  5502  0008A8  CFE8 F171          	movff	wreg,_readBuffer+11
  5503                           
  5504                           ;UART_Driver.c: 116: blockLength = 0;
  5505  0008AC  0E00               	movlw	0
  5506  0008AE  6E47               	movwf	_blockLength,c
  5507                           
  5508                           ;UART_Driver.c: 117: readBuffer.senderCnt = 0;
  5509  0008B0  0E00               	movlw	0
  5510  0008B2  CFE8 F1A4          	movff	wreg,_readBuffer+62
  5511                           
  5512                           ;UART_Driver.c: 118: bufferCnt = 0;
  5513  0008B6  0E00               	movlw	0
  5514  0008B8  6E48               	movwf	_bufferCnt,c
  5515                           
  5516                           ;UART_Driver.c: 119: comMes.commandCnt = 0;
  5517  0008BA  0E00               	movlw	0
  5518  0008BC  0101               	movlb	1	; () banked
  5519  0008BE  6F32               	movwf	(_comMes+50)& (0+255),b
  5520                           
  5521                           ;UART_Driver.c: 120: comMes.messageCnt = 0;
  5522  0008C0  0E00               	movlw	0
  5523  0008C2  0101               	movlb	1	; () banked
  5524  0008C4  6F65               	movwf	(_comMes+101)& (0+255),b
  5525                           
  5526                           ;UART_Driver.c: 121: D_UART_ReadFlag = 0;
  5527  0008C6  0E00               	movlw	0
  5528  0008C8  0100               	movlb	0	; () banked
  5529  0008CA  6FE1               	movwf	_D_UART_ReadFlag& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;UART_Driver.c: 122: readBuffer.state = 0x01;
  5533  0008CC  0E01               	movlw	1
  5534  0008CE  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5535                           
  5536                           ;UART_Driver.c: 123: } else {
  5537  0008D2  0012               	return	
  5538  0008D4                     i1l105:
  5539                           
  5540                           ;UART_Driver.c: 124: readBuffer.state = 0x00;
  5541  0008D4  0E00               	movlw	0
  5542  0008D6  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5543                           
  5544                           ;UART_Driver.c: 126: }
  5545                           ;UART_Driver.c: 127: break;
  5546                           
  5547                           ;UART_Driver.c: 125: return;
  5548  0008DA  0012               	return	
  5549  0008DC                     i1l2400:
  5550                           
  5551                           ;UART_Driver.c: 130: if (data == 0x3A) {
  5552  0008DC  0E3A               	movlw	58
  5553  0008DE  182E               	xorwf	fillDataBuffer@data,w,c
  5554  0008E0  A4D8               	btfss	status,2,c
  5555  0008E2  D010               	goto	i1l2406
  5556                           
  5557                           ;UART_Driver.c: 131: readBuffer.state = 0x02;
  5558  0008E4  0E02               	movlw	2
  5559  0008E6  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5560                           
  5561                           ;UART_Driver.c: 132: readBuffer.type[readBuffer.typeCnt] = '\0';
  5562  0008EA  C170  F02C         	movff	_readBuffer+10,??_fillDataBuffer
  5563  0008EE  502C               	movf	??_fillDataBuffer,w,c
  5564  0008F0  0D01               	mullw	1
  5565  0008F2  0E66               	movlw	low _readBuffer
  5566  0008F4  24F3               	addwf	prodl,w,c
  5567  0008F6  6ED9               	movwf	fsr2l,c
  5568  0008F8  0E01               	movlw	high _readBuffer
  5569  0008FA  20F4               	addwfc	prodh,w,c
  5570  0008FC  6EDA               	movwf	fsr2h,c
  5571  0008FE  0E00               	movlw	0
  5572  000900  6EDF               	movwf	indf2,c
  5573                           
  5574                           ;UART_Driver.c: 133: } else {
  5575  000902  0012               	return	
  5576  000904                     i1l2406:
  5577                           
  5578                           ;UART_Driver.c: 134: readBuffer.type[readBuffer.typeCnt] = data;
  5579  000904  C170  F02C         	movff	_readBuffer+10,??_fillDataBuffer
  5580  000908  502C               	movf	??_fillDataBuffer,w,c
  5581  00090A  0D01               	mullw	1
  5582  00090C  0E66               	movlw	low _readBuffer
  5583  00090E  24F3               	addwf	prodl,w,c
  5584  000910  6ED9               	movwf	fsr2l,c
  5585  000912  0E01               	movlw	high _readBuffer
  5586  000914  20F4               	addwfc	prodh,w,c
  5587  000916  6EDA               	movwf	fsr2h,c
  5588  000918  C02E  FFDF         	movff	fillDataBuffer@data,indf2
  5589                           
  5590                           ;UART_Driver.c: 135: readBuffer.typeCnt++;
  5591  00091C  C170  FFE8         	movff	_readBuffer+10,wreg
  5592  000920  0F01               	addlw	1
  5593  000922  CFE8 F170          	movff	wreg,_readBuffer+10
  5594                           
  5595                           ;UART_Driver.c: 136: if(readBuffer.typeCnt > 10) {
  5596  000926  EE21  F070         	lfsr	2,_readBuffer+10
  5597  00092A  0E0A               	movlw	10
  5598  00092C  64DF               	cpfsgt	indf2,c
  5599  00092E  0012               	return	
  5600                           
  5601                           ;UART_Driver.c: 137: readBuffer.typeCnt = 0;
  5602  000930  0E00               	movlw	0
  5603  000932  CFE8 F170          	movff	wreg,_readBuffer+10
  5604                           
  5605                           ;UART_Driver.c: 138: }
  5606                           ;UART_Driver.c: 139: }
  5607                           ;UART_Driver.c: 140: break;
  5608  000936  0012               	return	
  5609  000938                     i1l2414:
  5610                           
  5611                           ;UART_Driver.c: 143: if (data == 0x3A) {
  5612  000938  0E3A               	movlw	58
  5613  00093A  182E               	xorwf	fillDataBuffer@data,w,c
  5614  00093C  A4D8               	btfss	status,2,c
  5615  00093E  D010               	goto	i1l2420
  5616                           
  5617                           ;UART_Driver.c: 144: readBuffer.state = 0x03;
  5618  000940  0E03               	movlw	3
  5619  000942  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5620                           
  5621                           ;UART_Driver.c: 145: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5622  000946  C1A4  F02C         	movff	_readBuffer+62,??_fillDataBuffer
  5623  00094A  502C               	movf	??_fillDataBuffer,w,c
  5624  00094C  0D01               	mullw	1
  5625  00094E  0E72               	movlw	low (_readBuffer+12)
  5626  000950  24F3               	addwf	prodl,w,c
  5627  000952  6ED9               	movwf	fsr2l,c
  5628  000954  0E01               	movlw	high (_readBuffer+12)
  5629  000956  20F4               	addwfc	prodh,w,c
  5630  000958  6EDA               	movwf	fsr2h,c
  5631  00095A  0E00               	movlw	0
  5632  00095C  6EDF               	movwf	indf2,c
  5633                           
  5634                           ;UART_Driver.c: 146: } else {
  5635  00095E  0012               	return	
  5636  000960                     i1l2420:
  5637                           
  5638                           ;UART_Driver.c: 147: readBuffer.sender[readBuffer.senderCnt] = data;
  5639  000960  C1A4  F02C         	movff	_readBuffer+62,??_fillDataBuffer
  5640  000964  502C               	movf	??_fillDataBuffer,w,c
  5641  000966  0D01               	mullw	1
  5642  000968  0E72               	movlw	low (_readBuffer+12)
  5643  00096A  24F3               	addwf	prodl,w,c
  5644  00096C  6ED9               	movwf	fsr2l,c
  5645  00096E  0E01               	movlw	high (_readBuffer+12)
  5646  000970  20F4               	addwfc	prodh,w,c
  5647  000972  6EDA               	movwf	fsr2h,c
  5648  000974  C02E  FFDF         	movff	fillDataBuffer@data,indf2
  5649                           
  5650                           ;UART_Driver.c: 148: readBuffer.senderCnt++;
  5651  000978  C1A4  FFE8         	movff	_readBuffer+62,wreg
  5652  00097C  0F01               	addlw	1
  5653  00097E  CFE8 F1A4          	movff	wreg,_readBuffer+62
  5654                           
  5655                           ;UART_Driver.c: 149: if(readBuffer.senderCnt > 50) {
  5656  000982  EE21  F0A4         	lfsr	2,_readBuffer+62
  5657  000986  0E32               	movlw	50
  5658  000988  64DF               	cpfsgt	indf2,c
  5659  00098A  0012               	return	
  5660                           
  5661                           ;UART_Driver.c: 150: readBuffer.senderCnt = 0;
  5662  00098C  0E00               	movlw	0
  5663  00098E  CFE8 F1A4          	movff	wreg,_readBuffer+62
  5664                           
  5665                           ;UART_Driver.c: 151: }
  5666                           ;UART_Driver.c: 152: }
  5667                           ;UART_Driver.c: 153: break;
  5668  000992  0012               	return	
  5669  000994                     i1l2428:
  5670                           
  5671                           ;UART_Driver.c: 156: if (data == 0x3A) {
  5672  000994  0E3A               	movlw	58
  5673  000996  182E               	xorwf	fillDataBuffer@data,w,c
  5674  000998  A4D8               	btfss	status,2,c
  5675  00099A  D010               	goto	i1l2434
  5676                           
  5677                           ;UART_Driver.c: 157: readBuffer.state = 0x04;
  5678  00099C  0E04               	movlw	4
  5679  00099E  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5680                           
  5681                           ;UART_Driver.c: 158: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5682  0009A2  C1A4  F02C         	movff	_readBuffer+62,??_fillDataBuffer
  5683  0009A6  502C               	movf	??_fillDataBuffer,w,c
  5684  0009A8  0D01               	mullw	1
  5685  0009AA  0E72               	movlw	low (_readBuffer+12)
  5686  0009AC  24F3               	addwf	prodl,w,c
  5687  0009AE  6ED9               	movwf	fsr2l,c
  5688  0009B0  0E01               	movlw	high (_readBuffer+12)
  5689  0009B2  20F4               	addwfc	prodh,w,c
  5690  0009B4  6EDA               	movwf	fsr2h,c
  5691  0009B6  0E00               	movlw	0
  5692  0009B8  6EDF               	movwf	indf2,c
  5693                           
  5694                           ;UART_Driver.c: 159: } else {
  5695  0009BA  0012               	return	
  5696  0009BC                     i1l2434:
  5697                           
  5698                           ;UART_Driver.c: 160: readBuffer.blockLength = (data - 0x30);
  5699  0009BC  C02E  F02C         	movff	fillDataBuffer@data,??_fillDataBuffer
  5700  0009C0  0ED0               	movlw	208
  5701  0009C2  262C               	addwf	??_fillDataBuffer,f,c
  5702  0009C4  C02C  F171         	movff	??_fillDataBuffer,_readBuffer+11
  5703                           
  5704                           ;UART_Driver.c: 161: blockLength = (data - 0x30);
  5705  0009C8  502E               	movf	fillDataBuffer@data,w,c
  5706  0009CA  0FD0               	addlw	208
  5707  0009CC  6E47               	movwf	_blockLength,c
  5708                           
  5709                           ;UART_Driver.c: 162: }
  5710                           ;UART_Driver.c: 163: break;
  5711  0009CE  0012               	return	
  5712  0009D0                     i1l2436:
  5713                           
  5714                           ;UART_Driver.c: 166: if (data == 0x3A) {
  5715  0009D0  0E3A               	movlw	58
  5716  0009D2  182E               	xorwf	fillDataBuffer@data,w,c
  5717  0009D4  A4D8               	btfss	status,2,c
  5718  0009D6  D00F               	goto	i1l2442
  5719                           
  5720                           ;UART_Driver.c: 167: readBuffer.state = 0x05;
  5721  0009D8  0E05               	movlw	5
  5722  0009DA  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5723                           
  5724                           ;UART_Driver.c: 168: comMes.command[comMes.commandCnt] = '\0';
  5725  0009DE  0101               	movlb	1	; () banked
  5726  0009E0  5132               	movf	(_comMes+50)& (0+255),w,b
  5727  0009E2  0D01               	mullw	1
  5728  0009E4  0E00               	movlw	low _comMes
  5729  0009E6  24F3               	addwf	prodl,w,c
  5730  0009E8  6ED9               	movwf	fsr2l,c
  5731  0009EA  0E01               	movlw	high _comMes
  5732  0009EC  20F4               	addwfc	prodh,w,c
  5733  0009EE  6EDA               	movwf	fsr2h,c
  5734  0009F0  0E00               	movlw	0
  5735  0009F2  6EDF               	movwf	indf2,c
  5736                           
  5737                           ;UART_Driver.c: 169: } else {
  5738  0009F4  0012               	return	
  5739  0009F6                     i1l2442:
  5740                           
  5741                           ;UART_Driver.c: 170: comMes.command[comMes.commandCnt] = data;
  5742  0009F6  0101               	movlb	1	; () banked
  5743  0009F8  5132               	movf	(_comMes+50)& (0+255),w,b
  5744  0009FA  0D01               	mullw	1
  5745  0009FC  0E00               	movlw	low _comMes
  5746  0009FE  24F3               	addwf	prodl,w,c
  5747  000A00  6ED9               	movwf	fsr2l,c
  5748  000A02  0E01               	movlw	high _comMes
  5749  000A04  20F4               	addwfc	prodh,w,c
  5750  000A06  6EDA               	movwf	fsr2h,c
  5751  000A08  C02E  FFDF         	movff	fillDataBuffer@data,indf2
  5752                           
  5753                           ; BSR set to: 1
  5754                           ;UART_Driver.c: 171: comMes.commandCnt++;
  5755  000A0C  0101               	movlb	1	; () banked
  5756  000A0E  2B32               	incf	(_comMes+50)& (0+255),f,b
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;UART_Driver.c: 172: if(comMes.commandCnt > 50) {
  5760  000A10  0E32               	movlw	50
  5761  000A12  0101               	movlb	1	; () banked
  5762  000A14  6532               	cpfsgt	(_comMes+50)& (0+255),b
  5763  000A16  0012               	return	
  5764                           
  5765                           ; BSR set to: 1
  5766                           ;UART_Driver.c: 173: comMes.commandCnt = 0;
  5767  000A18  0E00               	movlw	0
  5768  000A1A  0101               	movlb	1	; () banked
  5769  000A1C  6F32               	movwf	(_comMes+50)& (0+255),b
  5770                           
  5771                           ; BSR set to: 1
  5772                           ;UART_Driver.c: 174: }
  5773                           ;UART_Driver.c: 175: }
  5774                           ;UART_Driver.c: 176: break;
  5775                           
  5776                           ; BSR set to: 1
  5777  000A1E  0012               	return	
  5778  000A20                     i1l2450:
  5779                           
  5780                           ;UART_Driver.c: 179: if (data == 0x3A) {
  5781  000A20  0E3A               	movlw	58
  5782  000A22  182E               	xorwf	fillDataBuffer@data,w,c
  5783  000A24  A4D8               	btfss	status,2,c
  5784  000A26  D055               	goto	i1l2482
  5785                           
  5786                           ;UART_Driver.c: 180: comMes.message[comMes.messageCnt] = '\0';
  5787  000A28  0101               	movlb	1	; () banked
  5788  000A2A  5165               	movf	(_comMes+101)& (0+255),w,b
  5789  000A2C  0D01               	mullw	1
  5790  000A2E  0E33               	movlw	low (_comMes+51)
  5791  000A30  24F3               	addwf	prodl,w,c
  5792  000A32  6ED9               	movwf	fsr2l,c
  5793  000A34  0E01               	movlw	high (_comMes+51)
  5794  000A36  20F4               	addwfc	prodh,w,c
  5795  000A38  6EDA               	movwf	fsr2h,c
  5796  000A3A  0E00               	movlw	0
  5797  000A3C  6EDF               	movwf	indf2,c
  5798                           
  5799                           ; BSR set to: 1
  5800                           ;UART_Driver.c: 181: readBuffer.comMes[bufferCnt] = comMes;
  5801  000A3E  EE21  F000         	lfsr	2,_comMes
  5802  000A42  5048               	movf	_bufferCnt,w,c
  5803  000A44  0D66               	mullw	102
  5804  000A46  0EA5               	movlw	low (_readBuffer+63)
  5805  000A48  24F3               	addwf	prodl,w,c
  5806  000A4A  6EE1               	movwf	fsr1l,c
  5807  000A4C  0E01               	movlw	high (_readBuffer+63)
  5808  000A4E  20F4               	addwfc	prodh,w,c
  5809  000A50  6EE2               	movwf	fsr1h,c
  5810  000A52  0E65               	movlw	101
  5811  000A54                     i1u163_21:
  5812  000A54  CFDB FFE3          	movff	plusw2,plusw1
  5813  000A58  06E8               	decf	wreg,f,c
  5814  000A5A  E2FC               	bc	i1u163_21
  5815                           
  5816                           ; BSR set to: 1
  5817                           ;UART_Driver.c: 182: uint8_t i = 0;
  5818  000A5C  0E00               	movlw	0
  5819  000A5E  6E2D               	movwf	fillDataBuffer@i,c
  5820                           
  5821                           ; BSR set to: 1
  5822                           ;UART_Driver.c: 183: for (i=0; i < comMes.commandCnt; i++) {
  5823  000A60  0E00               	movlw	0
  5824  000A62  6E2D               	movwf	fillDataBuffer@i,c
  5825  000A64  D00B               	goto	i1l2464
  5826  000A66                     i1l2460:
  5827                           
  5828                           ; BSR set to: 1
  5829                           ;UART_Driver.c: 184: comMes.command[i] = 0;
  5830  000A66  502D               	movf	fillDataBuffer@i,w,c
  5831  000A68  0D01               	mullw	1
  5832  000A6A  0E00               	movlw	low _comMes
  5833  000A6C  24F3               	addwf	prodl,w,c
  5834  000A6E  6ED9               	movwf	fsr2l,c
  5835  000A70  0E01               	movlw	high _comMes
  5836  000A72  20F4               	addwfc	prodh,w,c
  5837  000A74  6EDA               	movwf	fsr2h,c
  5838  000A76  0E00               	movlw	0
  5839  000A78  6EDF               	movwf	indf2,c
  5840                           
  5841                           ; BSR set to: 1
  5842  000A7A  2A2D               	incf	fillDataBuffer@i,f,c
  5843  000A7C                     i1l2464:
  5844                           
  5845                           ; BSR set to: 1
  5846  000A7C  0101               	movlb	1	; () banked
  5847  000A7E  5132               	movf	(_comMes+50)& (0+255),w,b
  5848  000A80  5C2D               	subwf	fillDataBuffer@i,w,c
  5849  000A82  A0D8               	btfss	status,0,c
  5850  000A84  D7F0               	goto	i1l2460
  5851                           
  5852                           ; BSR set to: 1
  5853                           ;UART_Driver.c: 185: }
  5854                           ;UART_Driver.c: 186: for (i=0; i < comMes.messageCnt; i++) {
  5855                           
  5856                           ; BSR set to: 1
  5857  000A86  0E00               	movlw	0
  5858  000A88  6E2D               	movwf	fillDataBuffer@i,c
  5859  000A8A  D00B               	goto	i1l2472
  5860  000A8C                     i1l2468:
  5861                           
  5862                           ; BSR set to: 1
  5863                           ;UART_Driver.c: 187: comMes.message[i] = 0;
  5864  000A8C  502D               	movf	fillDataBuffer@i,w,c
  5865  000A8E  0D01               	mullw	1
  5866  000A90  0E33               	movlw	low (_comMes+51)
  5867  000A92  24F3               	addwf	prodl,w,c
  5868  000A94  6ED9               	movwf	fsr2l,c
  5869  000A96  0E01               	movlw	high (_comMes+51)
  5870  000A98  20F4               	addwfc	prodh,w,c
  5871  000A9A  6EDA               	movwf	fsr2h,c
  5872  000A9C  0E00               	movlw	0
  5873  000A9E  6EDF               	movwf	indf2,c
  5874                           
  5875                           ; BSR set to: 1
  5876  000AA0  2A2D               	incf	fillDataBuffer@i,f,c
  5877  000AA2                     i1l2472:
  5878                           
  5879                           ; BSR set to: 1
  5880  000AA2  0101               	movlb	1	; () banked
  5881  000AA4  5165               	movf	(_comMes+101)& (0+255),w,b
  5882  000AA6  5C2D               	subwf	fillDataBuffer@i,w,c
  5883  000AA8  A0D8               	btfss	status,0,c
  5884  000AAA  D7F0               	goto	i1l2468
  5885                           
  5886                           ; BSR set to: 1
  5887                           ;UART_Driver.c: 188: }
  5888                           ;UART_Driver.c: 189: comMes.commandCnt = 0;
  5889                           
  5890                           ; BSR set to: 1
  5891  000AAC  0E00               	movlw	0
  5892  000AAE  0101               	movlb	1	; () banked
  5893  000AB0  6F32               	movwf	(_comMes+50)& (0+255),b
  5894                           
  5895                           ;UART_Driver.c: 190: comMes.messageCnt = 0;
  5896  000AB2  0E00               	movlw	0
  5897  000AB4  0101               	movlb	1	; () banked
  5898  000AB6  6F65               	movwf	(_comMes+101)& (0+255),b
  5899                           
  5900                           ; BSR set to: 1
  5901                           ;UART_Driver.c: 191: blockLength--;
  5902  000AB8  0647               	decf	_blockLength,f,c
  5903                           
  5904                           ; BSR set to: 1
  5905                           ;UART_Driver.c: 192: bufferCnt++;
  5906  000ABA  2A48               	incf	_bufferCnt,f,c
  5907                           
  5908                           ;UART_Driver.c: 193: if (blockLength == 0) {
  5909  000ABC  5047               	movf	_blockLength,w,c
  5910  000ABE  A4D8               	btfss	status,2,c
  5911  000AC0  D004               	goto	i1l132
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;UART_Driver.c: 194: readBuffer.state = 0x06;
  5915  000AC2  0E06               	movlw	6
  5916  000AC4  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5917                           
  5918                           ;UART_Driver.c: 195: } else {
  5919  000AC8  0012               	return	
  5920  000ACA                     i1l132:
  5921                           
  5922                           ; BSR set to: 1
  5923                           ;UART_Driver.c: 196: readBuffer.state = 0x04;
  5924  000ACA  0E04               	movlw	4
  5925  000ACC  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5926                           
  5927                           ; BSR set to: 1
  5928                           ;UART_Driver.c: 197: }
  5929                           ;UART_Driver.c: 198: } else {
  5930  000AD0  0012               	return	
  5931  000AD2                     i1l2482:
  5932                           
  5933                           ;UART_Driver.c: 199: comMes.message[comMes.messageCnt] = data;
  5934  000AD2  0101               	movlb	1	; () banked
  5935  000AD4  5165               	movf	(_comMes+101)& (0+255),w,b
  5936  000AD6  0D01               	mullw	1
  5937  000AD8  0E33               	movlw	low (_comMes+51)
  5938  000ADA  24F3               	addwf	prodl,w,c
  5939  000ADC  6ED9               	movwf	fsr2l,c
  5940  000ADE  0E01               	movlw	high (_comMes+51)
  5941  000AE0  20F4               	addwfc	prodh,w,c
  5942  000AE2  6EDA               	movwf	fsr2h,c
  5943  000AE4  C02E  FFDF         	movff	fillDataBuffer@data,indf2
  5944                           
  5945                           ; BSR set to: 1
  5946                           ;UART_Driver.c: 200: comMes.messageCnt++;
  5947  000AE8  0101               	movlb	1	; () banked
  5948  000AEA  2B65               	incf	(_comMes+101)& (0+255),f,b
  5949                           
  5950                           ; BSR set to: 1
  5951                           ;UART_Driver.c: 201: if(comMes.messageCnt > 50) {
  5952  000AEC  0E32               	movlw	50
  5953  000AEE  0101               	movlb	1	; () banked
  5954  000AF0  6565               	cpfsgt	(_comMes+101)& (0+255),b
  5955  000AF2  0012               	return	
  5956                           
  5957                           ; BSR set to: 1
  5958                           ;UART_Driver.c: 202: comMes.messageCnt = 0;
  5959  000AF4  0E00               	movlw	0
  5960  000AF6  0101               	movlb	1	; () banked
  5961  000AF8  6F65               	movwf	(_comMes+101)& (0+255),b
  5962                           
  5963                           ; BSR set to: 1
  5964                           ;UART_Driver.c: 203: }
  5965                           ;UART_Driver.c: 204: }
  5966                           ;UART_Driver.c: 205: break;
  5967                           
  5968                           ; BSR set to: 1
  5969  000AFA  0012               	return	
  5970  000AFC                     i1l2490:
  5971                           
  5972                           ;UART_Driver.c: 208: if (data == 0x24) {
  5973  000AFC  0E24               	movlw	36
  5974  000AFE  182E               	xorwf	fillDataBuffer@data,w,c
  5975  000B00  A4D8               	btfss	status,2,c
  5976  000B02  D009               	goto	i1l2498
  5977                           
  5978                           ;UART_Driver.c: 209: acknowledge();
  5979  000B04  EC75  F00C         	call	_acknowledge	;wreg free
  5980                           
  5981                           ;UART_Driver.c: 210: readBuffer.state = 0x00;
  5982  000B08  0E00               	movlw	0
  5983  000B0A  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  5984                           
  5985                           ;UART_Driver.c: 211: D_UART_ReadFlag = 1;
  5986  000B0E  0E01               	movlw	1
  5987  000B10  0100               	movlb	0	; () banked
  5988  000B12  6FE1               	movwf	_D_UART_ReadFlag& (0+255),b
  5989                           
  5990                           ;UART_Driver.c: 212: } else {
  5991  000B14  0012               	return	
  5992  000B16                     i1l2498:
  5993                           
  5994                           ;UART_Driver.c: 213: readBuffer.readId = (data - 0x30);
  5995  000B16  C02E  F02C         	movff	fillDataBuffer@data,??_fillDataBuffer
  5996  000B1A  0ED0               	movlw	208
  5997  000B1C  262C               	addwf	??_fillDataBuffer,f,c
  5998  000B1E  C02C  F5A1         	movff	??_fillDataBuffer,_readBuffer+1083
  5999                           
  6000                           ;UART_Driver.c: 214: }
  6001                           ;UART_Driver.c: 215: break;
  6002  000B22  0012               	return	
  6003  000B24                     i1l139:
  6004                           
  6005                           ;UART_Driver.c: 218: readBuffer.state = 0x00;
  6006  000B24  0E00               	movlw	0
  6007  000B26  CFE8 F5A2          	movff	wreg,_readBuffer+1084
  6008                           
  6009                           ;UART_Driver.c: 220: }
  6010                           
  6011                           ;UART_Driver.c: 219: break;
  6012  000B2A  0012               	return	
  6013  000B2C                     i1l2502:
  6014  000B2C  EE25  F0A2         	lfsr	2,_readBuffer+1084
  6015  000B30  50DF               	movf	indf2,w,c
  6016                           
  6017                           ; Switch size 1, requested type "space"
  6018                           ; Number of cases is 7, Range of values is 0 to 6
  6019                           ; switch strategies available:
  6020                           ; Name         Instructions Cycles
  6021                           ; simple_byte           22    12 (average)
  6022                           ;	Chosen strategy is simple_byte
  6023  000B32  0A00               	xorlw	0	; case 0
  6024  000B34  B4D8               	btfsc	status,2,c
  6025  000B36  D6B0               	goto	i1l2390
  6026  000B38  0A01               	xorlw	1	; case 1
  6027  000B3A  B4D8               	btfsc	status,2,c
  6028  000B3C  D6CF               	goto	i1l2400
  6029  000B3E  0A03               	xorlw	3	; case 2
  6030  000B40  B4D8               	btfsc	status,2,c
  6031  000B42  D6FA               	goto	i1l2414
  6032  000B44  0A01               	xorlw	1	; case 3
  6033  000B46  B4D8               	btfsc	status,2,c
  6034  000B48  D725               	goto	i1l2428
  6035  000B4A  0A07               	xorlw	7	; case 4
  6036  000B4C  B4D8               	btfsc	status,2,c
  6037  000B4E  D740               	goto	i1l2436
  6038  000B50  0A01               	xorlw	1	; case 5
  6039  000B52  B4D8               	btfsc	status,2,c
  6040  000B54  D765               	goto	i1l2450
  6041  000B56  0A03               	xorlw	3	; case 6
  6042  000B58  B4D8               	btfsc	status,2,c
  6043  000B5A  D7D0               	goto	i1l2490
  6044  000B5C  D7E3               	goto	i1l139
  6045  000B5E                     __end_of_fillDataBuffer:
  6046                           	opt stack 0
  6047                           pclatu	equ	0xFFB
  6048                           pclath	equ	0xFFA
  6049                           tblptru	equ	0xFF8
  6050                           tblptrh	equ	0xFF7
  6051                           tblptrl	equ	0xFF6
  6052                           tablat	equ	0xFF5
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           intcon	equ	0xFF2
  6056                           intcon2	equ	0xFF1
  6057                           postinc0	equ	0xFEE
  6058                           plusw0	equ	0xFEB
  6059                           fsr0h	equ	0xFEA
  6060                           fsr0l	equ	0xFE9
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           plusw1	equ	0xFE3
  6064                           fsr1h	equ	0xFE2
  6065                           fsr1l	equ	0xFE1
  6066                           bsr	equ	0xFE0
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           plusw2	equ	0xFDB
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _acknowledge *****************
  6076 ;; Defined at:
  6077 ;;		line 223 in file "Drivers/UART_Driver.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6091 ;;      Params:         0       0       0       0       0       0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6093 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6094 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6095 ;;Total ram usage:        1 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    5
  6098 ;; This function calls:
  6099 ;;		i1_printf
  6100 ;; This function is called by:
  6101 ;;		_fillDataBuffer
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text33
  6106  0018EA                     __ptext33:
  6107                           	opt stack 0
  6108  0018EA                     _acknowledge:
  6109                           	opt stack 16
  6110                           
  6111                           ;UART_Driver.c: 224: printf(startCharacter);
  6112                           
  6113                           ;incstack = 0
  6114  0018EA  C04D  F01B         	movff	_startCharacter,i1printf@f
  6115  0018EE  C04E  F01C         	movff	_startCharacter+1,i1printf@f+1
  6116  0018F2  501B               	movf	i1printf@f,w,c
  6117  0018F4  101C               	iorwf	i1printf@f+1,w,c
  6118  0018F6  A4D8               	btfss	status,2,c
  6119  0018F8  0E00               	movlw	low (__mediumconst shr (0+16))
  6120  0018FA  6E1D               	movwf	i1printf@f+2,c
  6121  0018FC  ECE4  F006         	call	i1_printf	;wreg free
  6122                           
  6123                           ;UART_Driver.c: 226: printf(ackCharacter);
  6124  001900  C049  F01B         	movff	_ackCharacter,i1printf@f
  6125  001904  C04A  F01C         	movff	_ackCharacter+1,i1printf@f+1
  6126  001908  501B               	movf	i1printf@f,w,c
  6127  00190A  101C               	iorwf	i1printf@f+1,w,c
  6128  00190C  A4D8               	btfss	status,2,c
  6129  00190E  0E00               	movlw	low (__mediumconst shr (0+16))
  6130  001910  6E1D               	movwf	i1printf@f+2,c
  6131  001912  ECE4  F006         	call	i1_printf	;wreg free
  6132                           
  6133                           ;UART_Driver.c: 228: printf("%x",readBuffer.readId);
  6134  001916  0E86               	movlw	low STR_6
  6135  001918  6E1B               	movwf	i1printf@f,c
  6136  00191A  0E08               	movlw	high STR_6
  6137  00191C  6E1C               	movwf	i1printf@f+1,c
  6138  00191E  501B               	movf	i1printf@f,w,c
  6139  001920  101C               	iorwf	i1printf@f+1,w,c
  6140  001922  A4D8               	btfss	status,2,c
  6141  001924  0E00               	movlw	low (__mediumconst shr (0+16))
  6142  001926  6E1D               	movwf	i1printf@f+2,c
  6143  001928  C5A1  F02B         	movff	_readBuffer+1083,??_acknowledge
  6144  00192C  502B               	movf	??_acknowledge,w,c
  6145  00192E  6E1E               	movwf	?i1_printf+3,c
  6146  001930  6A1F               	clrf	?i1_printf+4,c
  6147  001932  ECE4  F006         	call	i1_printf	;wreg free
  6148                           
  6149                           ;UART_Driver.c: 230: printf(stopCharacter);
  6150  001936  C04F  F01B         	movff	_stopCharacter,i1printf@f
  6151  00193A  C050  F01C         	movff	_stopCharacter+1,i1printf@f+1
  6152  00193E  501B               	movf	i1printf@f,w,c
  6153  001940  101C               	iorwf	i1printf@f+1,w,c
  6154  001942  A4D8               	btfss	status,2,c
  6155  001944  0E00               	movlw	low (__mediumconst shr (0+16))
  6156  001946  6E1D               	movwf	i1printf@f+2,c
  6157  001948  ECE4  F006         	call	i1_printf	;wreg free
  6158  00194C  0012               	return		;funcret
  6159  00194E                     __end_of_acknowledge:
  6160                           	opt stack 0
  6161                           pclatu	equ	0xFFB
  6162                           pclath	equ	0xFFA
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           intcon2	equ	0xFF1
  6171                           postinc0	equ	0xFEE
  6172                           plusw0	equ	0xFEB
  6173                           fsr0h	equ	0xFEA
  6174                           fsr0l	equ	0xFE9
  6175                           wreg	equ	0xFE8
  6176                           postdec1	equ	0xFE5
  6177                           plusw1	equ	0xFE3
  6178                           fsr1h	equ	0xFE2
  6179                           fsr1l	equ	0xFE1
  6180                           bsr	equ	0xFE0
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           plusw2	equ	0xFDB
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189 ;; *************** function i1_printf *****************
  6190 ;; Defined at:
  6191 ;;		line 464 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  f               3   26[COMRAM] PTR const unsigned char 
  6194 ;;		 -> STR_34(2), STR_33(3), STR_32(2), STR_31(3), 
  6195 ;;		 -> STR_30(32), STR_29(5), STR_23(3), STR_21(3), 
  6196 ;;		 -> STR_19(3), STR_18(3), STR_16(12), STR_15(3), 
  6197 ;;		 -> STR_14(6), STR_13(4), STR_12(3), STR_11(3), 
  6198 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  6199 ;;		 -> STR_6(3), STR_5(4), STR_3(4), ROM(32767), 
  6200 ;;		 -> STR_2(2), STR_1(2), 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  printf          4    0        struct .
  6203 ;;  printf          3    0        PTR const unsigned char 
  6204 ;;  printf          2   39[COMRAM] unsigned int 
  6205 ;;  printf          2   35[COMRAM] PTR void [1]
  6206 ;;		 -> ?i1_printf(2), ?_printf(2), 
  6207 ;;  printf          2    0        unsigned int 
  6208 ;;  printf          1   41[COMRAM] char 
  6209 ;;  printf          1   38[COMRAM] unsigned char 
  6210 ;;  printf          1   37[COMRAM] char 
  6211 ;;  printf          1   34[COMRAM] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  2   26[COMRAM] int 
  6214 ;; Registers used:
  6215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6221 ;;      Params:         5       0       0       0       0       0       0       0       0
  6222 ;;      Locals:         8       0       0       0       0       0       0       0       0
  6223 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6224 ;;      Totals:        16       0       0       0       0       0       0       0       0
  6225 ;;Total ram usage:       16 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    4
  6228 ;; This function calls:
  6229 ;;		i1___lwdiv
  6230 ;;		i1___lwmod
  6231 ;;		i1_putch
  6232 ;; This function is called by:
  6233 ;;		_acknowledge
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text34
  6238  000DC8                     __ptext34:
  6239                           	opt stack 0
  6240  000DC8                     i1_printf:
  6241                           	opt stack 16
  6242                           
  6243                           ;doprnt.c: 466: va_list ap;
  6244                           ;doprnt.c: 499: signed char c;
  6245                           ;doprnt.c: 506: signed char prec;
  6246                           ;doprnt.c: 508: unsigned char flag;
  6247                           ;doprnt.c: 523: union {
  6248                           ;doprnt.c: 524: unsigned long vd;
  6249                           ;doprnt.c: 525: double integ;
  6250                           ;doprnt.c: 526: } tmpval;
  6251                           ;doprnt.c: 528: unsigned int val;
  6252                           ;doprnt.c: 529: unsigned len;
  6253                           ;doprnt.c: 530: const char * cp;
  6254                           ;doprnt.c: 533: *ap = __va_start();
  6255                           
  6256                           ;incstack = 0
  6257  000DC8  0E1E               	movlw	low (?i1_printf+3)
  6258  000DCA  6E24               	movwf	i1printf@ap,c
  6259  000DCC  0E00               	movlw	high (?i1_printf+3)
  6260  000DCE  6E25               	movwf	i1printf@ap+1,c
  6261                           
  6262                           ;doprnt.c: 536: while(c = *f++) {
  6263  000DD0  D0EE               	goto	i1l2314
  6264  000DD2                     i1l2234:
  6265                           
  6266                           ;doprnt.c: 538: if(c != '%')
  6267  000DD2  0E25               	movlw	37
  6268  000DD4  182A               	xorwf	i1printf@c,w,c
  6269  000DD6  B4D8               	btfsc	status,2,c
  6270  000DD8  D004               	goto	i1l2238
  6271                           
  6272                           ;doprnt.c: 540: {
  6273                           ;doprnt.c: 541: (putch(c) );
  6274  000DDA  502A               	movf	i1printf@c,w,c
  6275  000DDC  ECC4  F00E         	call	i1_putch
  6276                           
  6277                           ;doprnt.c: 542: continue;
  6278  000DE0  D0E6               	goto	i1l2314
  6279  000DE2                     i1l2238:
  6280                           
  6281                           ;doprnt.c: 543: }
  6282                           ;doprnt.c: 548: flag = 0;
  6283  000DE2  0E00               	movlw	0
  6284  000DE4  6E27               	movwf	i1printf@flag,c
  6285                           
  6286                           ;doprnt.c: 635: switch(c = *f++) {
  6287  000DE6  D006               	goto	i1l2246
  6288  000DE8                     i1l2240:
  6289                           
  6290                           ;doprnt.c: 721: flag |= 0x80;
  6291  000DE8  8E27               	bsf	i1printf@flag,7,c
  6292                           
  6293                           ;doprnt.c: 723: break;
  6294  000DEA  D025               	goto	i1l399
  6295  000DEC                     i1l2242:
  6296                           
  6297                           ;doprnt.c: 809: (putch(c) );
  6298  000DEC  502A               	movf	i1printf@c,w,c
  6299  000DEE  ECC4  F00E         	call	i1_putch
  6300                           
  6301                           ;doprnt.c: 810: continue;
  6302  000DF2  D0DD               	goto	i1l2314
  6303  000DF4                     i1l2246:
  6304  000DF4  C01B  F020         	movff	i1printf@f,??i1_printf
  6305  000DF8  C01C  F021         	movff	i1printf@f+1,??i1_printf+1
  6306  000DFC  C01D  F022         	movff	i1printf@f+2,??i1_printf+2
  6307  000E00  2A1B               	incf	i1printf@f,f,c
  6308  000E02  0E00               	movlw	0
  6309  000E04  221C               	addwfc	i1printf@f+1,f,c
  6310  000E06  221D               	addwfc	i1printf@f+2,f,c
  6311  000E08  C020  FFF6         	movff	??i1_printf,tblptrl
  6312  000E0C  C021  FFF7         	movff	??i1_printf+1,tblptrh
  6313  000E10  C022  FFF8         	movff	??i1_printf+2,tblptru
  6314  000E14  0008               	tblrd		*
  6315  000E16  CFF5 F02A          	movff	tablat,i1printf@c
  6316  000E1A  502A               	movf	i1printf@c,w,c
  6317                           
  6318                           ; Switch size 1, requested type "space"
  6319                           ; Number of cases is 4, Range of values is 0 to 120
  6320                           ; switch strategies available:
  6321                           ; Name         Instructions Cycles
  6322                           ; simple_byte           13     7 (average)
  6323                           ;	Chosen strategy is simple_byte
  6324  000E1C  0A00               	xorlw	0	; case 0
  6325  000E1E  B4D8               	btfsc	status,2,c
  6326  000E20  0012               	return	
  6327  000E22  0A64               	xorlw	100	; case 100
  6328  000E24  B4D8               	btfsc	status,2,c
  6329  000E26  D007               	goto	i1l399
  6330  000E28  0A0D               	xorlw	13	; case 105
  6331  000E2A  B4D8               	btfsc	status,2,c
  6332  000E2C  D004               	goto	i1l399
  6333  000E2E  0A11               	xorlw	17	; case 120
  6334  000E30  B4D8               	btfsc	status,2,c
  6335  000E32  D7DA               	goto	i1l2240
  6336  000E34  D7DB               	goto	i1l2242
  6337  000E36                     i1l399:
  6338                           
  6339                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6340  000E36  BE27               	btfsc	i1printf@flag,7,c
  6341  000E38  D015               	goto	i1l2258
  6342                           
  6343                           ;doprnt.c: 1253: {
  6344                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6345  000E3A  C024  FFD9         	movff	i1printf@ap,fsr2l
  6346  000E3E  C025  FFDA         	movff	i1printf@ap+1,fsr2h
  6347  000E42  CFDE F028          	movff	postinc2,i1printf@val
  6348  000E46  CFDD F029          	movff	postdec2,i1printf@val+1
  6349  000E4A  0E02               	movlw	2
  6350  000E4C  2624               	addwf	i1printf@ap,f,c
  6351  000E4E  0E00               	movlw	0
  6352  000E50  2225               	addwfc	i1printf@ap+1,f,c
  6353                           
  6354                           ;doprnt.c: 1261: if((int)val < 0) {
  6355  000E52  AE29               	btfss	i1printf@val+1,7,c
  6356  000E54  D044               	goto	i1l2292
  6357                           
  6358                           ;doprnt.c: 1262: flag |= 0x03;
  6359  000E56  0E03               	movlw	3
  6360  000E58  1227               	iorwf	i1printf@flag,f,c
  6361                           
  6362                           ;doprnt.c: 1263: val = -val;
  6363  000E5A  6C28               	negf	i1printf@val,c
  6364  000E5C  1E29               	comf	i1printf@val+1,f,c
  6365  000E5E  B0D8               	btfsc	status,0,c
  6366  000E60  2A29               	incf	i1printf@val+1,f,c
  6367                           
  6368                           ;doprnt.c: 1264: }
  6369                           ;doprnt.c: 1266: }
  6370  000E62  D03D               	goto	i1l2292
  6371  000E64                     i1l2258:
  6372                           
  6373                           ;doprnt.c: 1268: else
  6374                           ;doprnt.c: 1273: {
  6375                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6376  000E64  C024  FFD9         	movff	i1printf@ap,fsr2l
  6377  000E68  C025  FFDA         	movff	i1printf@ap+1,fsr2h
  6378  000E6C  CFDE F028          	movff	postinc2,i1printf@val
  6379  000E70  CFDD F029          	movff	postdec2,i1printf@val+1
  6380  000E74  0E02               	movlw	2
  6381  000E76  2624               	addwf	i1printf@ap,f,c
  6382  000E78  0E00               	movlw	0
  6383  000E7A  2225               	addwfc	i1printf@ap+1,f,c
  6384                           
  6385                           ;doprnt.c: 1287: }
  6386                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6387  000E7C  D030               	goto	i1l2292
  6388  000E7E                     i1l2262:
  6389                           
  6390                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6391  000E7E  0E01               	movlw	1
  6392  000E80  6E2A               	movwf	i1printf@c,c
  6393  000E82                     i1l2264:
  6394  000E82  0E05               	movlw	5
  6395  000E84  182A               	xorwf	i1printf@c,w,c
  6396  000E86  B4D8               	btfsc	status,2,c
  6397  000E88  D032               	goto	i1l2294
  6398                           
  6399                           ;doprnt.c: 1306: if(val < dpowers[c])
  6400  000E8A  502A               	movf	i1printf@c,w,c
  6401  000E8C  0D02               	mullw	2
  6402  000E8E  0E01               	movlw	low _dpowers
  6403  000E90  24F3               	addwf	prodl,w,c
  6404  000E92  6EF6               	movwf	tblptrl,c
  6405  000E94  0E08               	movlw	high _dpowers
  6406  000E96  20F4               	addwfc	prodh,w,c
  6407  000E98  6EF7               	movwf	tblptrh,c
  6408  000E9A                     	if	0	;There are less than 3 active tblptr bytes
  6409  000E9A                     	endif
  6410  000E9A  0009               	tblrd		*+
  6411  000E9C  50F5               	movf	tablat,w,c
  6412  000E9E  5C28               	subwf	i1printf@val,w,c
  6413  000EA0  0009               	tblrd		*+
  6414  000EA2  50F5               	movf	tablat,w,c
  6415  000EA4  5829               	subwfb	i1printf@val+1,w,c
  6416  000EA6  A0D8               	btfss	status,0,c
  6417  000EA8  D022               	goto	i1l2294
  6418                           
  6419                           ;doprnt.c: 1307: break;
  6420  000EAA  2A2A               	incf	i1printf@c,f,c
  6421  000EAC  D7EA               	goto	i1l2264
  6422  000EAE                     i1l2276:
  6423                           
  6424                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6425  000EAE  0E01               	movlw	1
  6426  000EB0  6E2A               	movwf	i1printf@c,c
  6427  000EB2                     i1l2278:
  6428  000EB2  0E04               	movlw	4
  6429  000EB4  182A               	xorwf	i1printf@c,w,c
  6430  000EB6  B4D8               	btfsc	status,2,c
  6431  000EB8  D01A               	goto	i1l2294
  6432                           
  6433                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6434  000EBA  502A               	movf	i1printf@c,w,c
  6435  000EBC  0D02               	mullw	2
  6436  000EBE  0E0B               	movlw	low _hexpowers
  6437  000EC0  24F3               	addwf	prodl,w,c
  6438  000EC2  6EF6               	movwf	tblptrl,c
  6439  000EC4  0E08               	movlw	high _hexpowers
  6440  000EC6  20F4               	addwfc	prodh,w,c
  6441  000EC8  6EF7               	movwf	tblptrh,c
  6442  000ECA                     	if	0	;There are less than 3 active tblptr bytes
  6443  000ECA                     	endif
  6444  000ECA  0009               	tblrd		*+
  6445  000ECC  50F5               	movf	tablat,w,c
  6446  000ECE  5C28               	subwf	i1printf@val,w,c
  6447  000ED0  0009               	tblrd		*+
  6448  000ED2  50F5               	movf	tablat,w,c
  6449  000ED4  5829               	subwfb	i1printf@val+1,w,c
  6450  000ED6  A0D8               	btfss	status,0,c
  6451  000ED8  D00A               	goto	i1l2294
  6452                           
  6453                           ;doprnt.c: 1318: break;
  6454  000EDA  2A2A               	incf	i1printf@c,f,c
  6455  000EDC  D7EA               	goto	i1l2278
  6456  000EDE                     i1l2292:
  6457  000EDE  5027               	movf	i1printf@flag,w,c
  6458  000EE0  0B80               	andlw	128
  6459                           
  6460                           ; Switch size 1, requested type "space"
  6461                           ; Number of cases is 2, Range of values is 0 to 128
  6462                           ; switch strategies available:
  6463                           ; Name         Instructions Cycles
  6464                           ; simple_byte            7     4 (average)
  6465                           ;	Chosen strategy is simple_byte
  6466  000EE2  0A00               	xorlw	0	; case 0
  6467  000EE4  B4D8               	btfsc	status,2,c
  6468  000EE6  D7CB               	goto	i1l2262
  6469  000EE8  0A80               	xorlw	128	; case 128
  6470  000EEA  B4D8               	btfsc	status,2,c
  6471  000EEC  D7E0               	goto	i1l2276
  6472  000EEE                     i1l2294:
  6473                           
  6474                           ;doprnt.c: 1422: {
  6475                           ;doprnt.c: 1438: if(flag & 0x03)
  6476  000EEE  C027  F020         	movff	i1printf@flag,??i1_printf
  6477  000EF2  0E03               	movlw	3
  6478  000EF4  1620               	andwf	??i1_printf,f,c
  6479  000EF6  B4D8               	btfsc	status,2,c
  6480  000EF8  D003               	goto	i1l2298
  6481                           
  6482                           ;doprnt.c: 1439: (putch('-') );
  6483  000EFA  0E2D               	movlw	45
  6484  000EFC  ECC4  F00E         	call	i1_putch
  6485  000F00                     i1l2298:
  6486                           
  6487                           ;doprnt.c: 1469: }
  6488                           ;doprnt.c: 1472: prec = c;
  6489  000F00  C02A  F026         	movff	i1printf@c,i1printf@prec
  6490                           
  6491                           ;doprnt.c: 1474: while(prec--) {
  6492  000F04  D050               	goto	i1l2312
  6493  000F06                     i1l2300:
  6494                           
  6495                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6496  000F06  5026               	movf	i1printf@prec,w,c
  6497  000F08  0D02               	mullw	2
  6498  000F0A  0E01               	movlw	low _dpowers
  6499  000F0C  24F3               	addwf	prodl,w,c
  6500  000F0E  6EF6               	movwf	tblptrl,c
  6501  000F10  0E08               	movlw	high _dpowers
  6502  000F12  20F4               	addwfc	prodh,w,c
  6503  000F14  6EF7               	movwf	tblptrh,c
  6504  000F16                     	if	0	;There are less than 3 active tblptr bytes
  6505  000F16                     	endif
  6506  000F16  0009               	tblrd		*+
  6507  000F18  CFF5 F011          	movff	tablat,i1___lwdiv@divisor
  6508  000F1C  000A               	tblrd		*-
  6509  000F1E  CFF5 F012          	movff	tablat,i1___lwdiv@divisor+1
  6510  000F22  C028  F00F         	movff	i1printf@val,i1___lwdiv@dividend
  6511  000F26  C029  F010         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  6512  000F2A  EC61  F00D         	call	i1___lwdiv	;wreg free
  6513  000F2E  C00F  F016         	movff	?i1___lwdiv,i1___lwmod@dividend
  6514  000F32  C010  F017         	movff	?i1___lwdiv+1,i1___lwmod@dividend+1
  6515  000F36  0E00               	movlw	0
  6516  000F38  6E19               	movwf	i1___lwmod@divisor+1,c
  6517  000F3A  0E0A               	movlw	10
  6518  000F3C  6E18               	movwf	i1___lwmod@divisor,c
  6519  000F3E  ECAF  F00D         	call	i1___lwmod	;wreg free
  6520  000F42  5016               	movf	?i1___lwmod,w,c
  6521  000F44  0F30               	addlw	48
  6522  000F46  6E2A               	movwf	i1printf@c,c
  6523                           
  6524                           ;doprnt.c: 1491: break;
  6525  000F48  D02B               	goto	i1l2310
  6526  000F4A                     i1l2302:
  6527                           
  6528                           ;doprnt.c: 1499: {
  6529                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6530  000F4A  C028  F00F         	movff	i1printf@val,i1___lwdiv@dividend
  6531  000F4E  C029  F010         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  6532  000F52  5026               	movf	i1printf@prec,w,c
  6533  000F54  0D02               	mullw	2
  6534  000F56  0E0B               	movlw	low _hexpowers
  6535  000F58  24F3               	addwf	prodl,w,c
  6536  000F5A  6EF6               	movwf	tblptrl,c
  6537  000F5C  0E08               	movlw	high _hexpowers
  6538  000F5E  20F4               	addwfc	prodh,w,c
  6539  000F60  6EF7               	movwf	tblptrh,c
  6540  000F62                     	if	0	;There are less than 3 active tblptr bytes
  6541  000F62                     	endif
  6542  000F62  0009               	tblrd		*+
  6543  000F64  CFF5 F011          	movff	tablat,i1___lwdiv@divisor
  6544  000F68  000A               	tblrd		*-
  6545  000F6A  CFF5 F012          	movff	tablat,i1___lwdiv@divisor+1
  6546  000F6E  EC61  F00D         	call	i1___lwdiv	;wreg free
  6547  000F72  500F               	movf	?i1___lwdiv,w,c
  6548  000F74  0B0F               	andlw	15
  6549  000F76  6E23               	movwf	i1printf@idx,c
  6550                           
  6551                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6552  000F78  5023               	movf	i1printf@idx,w,c
  6553  000F7A  0D01               	mullw	1
  6554  000F7C  0E33               	movlw	low STR_35
  6555  000F7E  24F3               	addwf	prodl,w,c
  6556  000F80  6EF6               	movwf	tblptrl,c
  6557  000F82  0E08               	movlw	high STR_35
  6558  000F84  20F4               	addwfc	prodh,w,c
  6559  000F86  6EF7               	movwf	tblptrh,c
  6560  000F88                     	if	0	;There are less than 3 active tblptr bytes
  6561  000F88                     	endif
  6562  000F88  0008               	tblrd		*
  6563  000F8A  CFF5 F02A          	movff	tablat,i1printf@c
  6564                           
  6565                           ;doprnt.c: 1523: }
  6566                           
  6567                           ;doprnt.c: 1508: }
  6568                           ;doprnt.c: 1510: break;
  6569  000F8E  D008               	goto	i1l2310
  6570  000F90                     i1l2308:
  6571  000F90  5027               	movf	i1printf@flag,w,c
  6572  000F92  0B80               	andlw	128
  6573                           
  6574                           ; Switch size 1, requested type "space"
  6575                           ; Number of cases is 2, Range of values is 0 to 128
  6576                           ; switch strategies available:
  6577                           ; Name         Instructions Cycles
  6578                           ; simple_byte            7     4 (average)
  6579                           ;	Chosen strategy is simple_byte
  6580  000F94  0A00               	xorlw	0	; case 0
  6581  000F96  B4D8               	btfsc	status,2,c
  6582  000F98  D7B6               	goto	i1l2300
  6583  000F9A  0A80               	xorlw	128	; case 128
  6584  000F9C  B4D8               	btfsc	status,2,c
  6585  000F9E  D7D5               	goto	i1l2302
  6586  000FA0                     i1l2310:
  6587                           
  6588                           ;doprnt.c: 1524: (putch(c) );
  6589  000FA0  502A               	movf	i1printf@c,w,c
  6590  000FA2  ECC4  F00E         	call	i1_putch
  6591  000FA6                     i1l2312:
  6592  000FA6  0626               	decf	i1printf@prec,f,c
  6593  000FA8  2826               	incf	i1printf@prec,w,c
  6594  000FAA  A4D8               	btfss	status,2,c
  6595  000FAC  D7F1               	goto	i1l2308
  6596  000FAE                     i1l2314:
  6597  000FAE  C01B  F020         	movff	i1printf@f,??i1_printf
  6598  000FB2  C01C  F021         	movff	i1printf@f+1,??i1_printf+1
  6599  000FB6  C01D  F022         	movff	i1printf@f+2,??i1_printf+2
  6600  000FBA  2A1B               	incf	i1printf@f,f,c
  6601  000FBC  0E00               	movlw	0
  6602  000FBE  221C               	addwfc	i1printf@f+1,f,c
  6603  000FC0  221D               	addwfc	i1printf@f+2,f,c
  6604  000FC2  C020  FFF6         	movff	??i1_printf,tblptrl
  6605  000FC6  C021  FFF7         	movff	??i1_printf+1,tblptrh
  6606  000FCA  C022  FFF8         	movff	??i1_printf+2,tblptru
  6607  000FCE  0008               	tblrd		*
  6608  000FD0  CFF5 F02A          	movff	tablat,i1printf@c
  6609  000FD4  502A               	movf	i1printf@c,w,c
  6610  000FD6  B4D8               	btfsc	status,2,c
  6611  000FD8  0012               	return	
  6612  000FDA  D6FB               	goto	i1l2234
  6613  000FDC                     __end_ofi1_printf:
  6614                           	opt stack 0
  6615                           pclatu	equ	0xFFB
  6616                           pclath	equ	0xFFA
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           intcon2	equ	0xFF1
  6625                           postinc0	equ	0xFEE
  6626                           plusw0	equ	0xFEB
  6627                           fsr0h	equ	0xFEA
  6628                           fsr0l	equ	0xFE9
  6629                           wreg	equ	0xFE8
  6630                           postdec1	equ	0xFE5
  6631                           plusw1	equ	0xFE3
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           bsr	equ	0xFE0
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           plusw2	equ	0xFDB
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function i1_putch *****************
  6644 ;; Defined at:
  6645 ;;		line 356 in file "Drivers/UART_Driver.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  data            1    wreg     unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  data            1   16[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0
  6660 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6662 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6663 ;;Total ram usage:        1 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    3
  6666 ;; This function calls:
  6667 ;;		i1_writeByte
  6668 ;; This function is called by:
  6669 ;;		i1_printf
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text35
  6674  001D88                     __ptext35:
  6675                           	opt stack 0
  6676  001D88                     i1_putch:
  6677                           	opt stack 16
  6678                           
  6679                           ;incstack = 0
  6680                           ;i1putch@data stored from wreg
  6681  001D88  6E11               	movwf	i1putch@data,c
  6682                           
  6683                           ;UART_Driver.c: 357: writeByte(data);
  6684  001D8A  5011               	movf	i1putch@data,w,c
  6685  001D8C  ECA5  F00E         	call	i1_writeByte
  6686  001D90  0012               	return		;funcret
  6687  001D92                     __end_ofi1_putch:
  6688                           	opt stack 0
  6689                           pclatu	equ	0xFFB
  6690                           pclath	equ	0xFFA
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           intcon	equ	0xFF2
  6698                           intcon2	equ	0xFF1
  6699                           postinc0	equ	0xFEE
  6700                           plusw0	equ	0xFEB
  6701                           fsr0h	equ	0xFEA
  6702                           fsr0l	equ	0xFE9
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           plusw1	equ	0xFE3
  6706                           fsr1h	equ	0xFE2
  6707                           fsr1l	equ	0xFE1
  6708                           bsr	equ	0xFE0
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           plusw2	equ	0xFDB
  6713                           fsr2h	equ	0xFDA
  6714                           fsr2l	equ	0xFD9
  6715                           status	equ	0xFD8
  6716                           
  6717 ;; *************** function i1_writeByte *****************
  6718 ;; Defined at:
  6719 ;;		line 84 in file "Drivers/UART_Driver.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  data            1    wreg     unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  data            1   15[COMRAM] unsigned char 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  1    wreg      void 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, cstack
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0
  6734 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6736 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6737 ;;Total ram usage:        1 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    2
  6740 ;; This function calls:
  6741 ;;		i1_D_UART_Enable
  6742 ;; This function is called by:
  6743 ;;		i1_putch
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           	psect	text36
  6748  001D4A                     __ptext36:
  6749                           	opt stack 0
  6750  001D4A                     i1_writeByte:
  6751                           	opt stack 16
  6752                           
  6753                           ;incstack = 0
  6754                           ;i1writeByte@data stored from wreg
  6755  001D4A  6E10               	movwf	i1writeByte@data,c
  6756                           
  6757                           ;UART_Driver.c: 85: D_UART_Enable(1);
  6758  001D4C  0E01               	movlw	1
  6759  001D4E  EC66  F00E         	call	i1_D_UART_Enable
  6760  001D52                     i1l86:
  6761  001D52  A2AC               	btfss	4012,1,c	;volatile
  6762  001D54  D7FE               	goto	i1l86
  6763                           
  6764                           ;UART_Driver.c: 87: TXREG = data;
  6765  001D56  C010  FFAD         	movff	i1writeByte@data,4013	;volatile
  6766  001D5A  0012               	return		;funcret
  6767  001D5C                     __end_ofi1_writeByte:
  6768                           	opt stack 0
  6769                           pclatu	equ	0xFFB
  6770                           pclath	equ	0xFFA
  6771                           tblptru	equ	0xFF8
  6772                           tblptrh	equ	0xFF7
  6773                           tblptrl	equ	0xFF6
  6774                           tablat	equ	0xFF5
  6775                           prodh	equ	0xFF4
  6776                           prodl	equ	0xFF3
  6777                           intcon	equ	0xFF2
  6778                           intcon2	equ	0xFF1
  6779                           postinc0	equ	0xFEE
  6780                           plusw0	equ	0xFEB
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           postdec1	equ	0xFE5
  6785                           plusw1	equ	0xFE3
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           bsr	equ	0xFE0
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           plusw2	equ	0xFDB
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function i1_D_UART_Enable *****************
  6798 ;; Defined at:
  6799 ;;		line 322 in file "Drivers/UART_Driver.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  enable          1    wreg     unsigned char 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  enable          1   14[COMRAM] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0
  6814 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6816 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6817 ;;Total ram usage:        1 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    1
  6820 ;; This function calls:
  6821 ;;		Nothing
  6822 ;; This function is called by:
  6823 ;;		_readByte
  6824 ;;		i1_writeByte
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text37
  6829  001CCC                     __ptext37:
  6830                           	opt stack 0
  6831  001CCC                     i1_D_UART_Enable:
  6832                           	opt stack 20
  6833                           
  6834                           ;incstack = 0
  6835                           ;i1D_UART_Enable@enable stored from wreg
  6836  001CCC  6E0F               	movwf	i1D_UART_Enable@enable,c
  6837                           
  6838                           ;UART_Driver.c: 323: if(enable) {
  6839  001CCE  500F               	movf	i1D_UART_Enable@enable,w,c
  6840  001CD0  B4D8               	btfsc	status,2,c
  6841  001CD2  D006               	goto	i1l164
  6842                           
  6843                           ;UART_Driver.c: 324: TRISCbits.TRISC6 = 0;
  6844  001CD4  9C94               	bcf	3988,6,c	;volatile
  6845                           
  6846                           ;UART_Driver.c: 325: TRISCbits.TRISC7 = 1;
  6847  001CD6  8E94               	bsf	3988,7,c	;volatile
  6848                           
  6849                           ;UART_Driver.c: 326: TXSTAbits.TXEN = 1;
  6850  001CD8  8AAC               	bsf	4012,5,c	;volatile
  6851                           
  6852                           ;UART_Driver.c: 327: RCSTAbits.CREN = 1;
  6853  001CDA  88AB               	bsf	4011,4,c	;volatile
  6854                           
  6855                           ;UART_Driver.c: 328: RCSTAbits.SPEN = 1;
  6856  001CDC  8EAB               	bsf	4011,7,c	;volatile
  6857                           
  6858                           ;UART_Driver.c: 329: } else {
  6859  001CDE  0012               	return	
  6860  001CE0                     i1l164:
  6861                           
  6862                           ;UART_Driver.c: 330: TRISCbits.TRISC6 = 0;
  6863  001CE0  9C94               	bcf	3988,6,c	;volatile
  6864                           
  6865                           ;UART_Driver.c: 331: TRISCbits.TRISC7 = 0;
  6866  001CE2  9E94               	bcf	3988,7,c	;volatile
  6867                           
  6868                           ;UART_Driver.c: 332: TXSTAbits.TXEN = 0;
  6869  001CE4  9AAC               	bcf	4012,5,c	;volatile
  6870                           
  6871                           ;UART_Driver.c: 333: RCSTAbits.CREN = 0;
  6872  001CE6  98AB               	bcf	4011,4,c	;volatile
  6873                           
  6874                           ;UART_Driver.c: 334: RCSTAbits.SPEN = 0;
  6875  001CE8  9EAB               	bcf	4011,7,c	;volatile
  6876  001CEA  0012               	return	
  6877  001CEC                     __end_ofi1_D_UART_Enable:
  6878                           	opt stack 0
  6879                           pclatu	equ	0xFFB
  6880                           pclath	equ	0xFFA
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           postinc0	equ	0xFEE
  6890                           plusw0	equ	0xFEB
  6891                           fsr0h	equ	0xFEA
  6892                           fsr0l	equ	0xFE9
  6893                           wreg	equ	0xFE8
  6894                           postdec1	equ	0xFE5
  6895                           plusw1	equ	0xFE3
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           bsr	equ	0xFE0
  6899                           indf2	equ	0xFDF
  6900                           postinc2	equ	0xFDE
  6901                           postdec2	equ	0xFDD
  6902                           plusw2	equ	0xFDB
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function i1___lwmod *****************
  6908 ;; Defined at:
  6909 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwmod.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  dividend        2   21[COMRAM] unsigned int 
  6912 ;;  divisor         2   23[COMRAM] unsigned int 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  __lwmod         1   25[COMRAM] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  2   21[COMRAM] unsigned int 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6924 ;;      Params:         4       0       0       0       0       0       0       0       0
  6925 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6927 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6928 ;;Total ram usage:        5 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    1
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		i1_printf
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text38
  6939  001B5E                     __ptext38:
  6940                           	opt stack 0
  6941  001B5E                     i1___lwmod:
  6942                           	opt stack 18
  6943                           
  6944                           ;incstack = 0
  6945  001B5E  5018               	movf	i1___lwmod@divisor,w,c
  6946  001B60  1019               	iorwf	i1___lwmod@divisor+1,w,c
  6947  001B62  B4D8               	btfsc	status,2,c
  6948  001B64  D018               	goto	i1l837
  6949  001B66  0E01               	movlw	1
  6950  001B68  6E1A               	movwf	i1___lwmod@counter,c
  6951  001B6A  D004               	goto	i1l2100
  6952  001B6C                     i1l2098:
  6953  001B6C  90D8               	bcf	status,0,c
  6954  001B6E  3618               	rlcf	i1___lwmod@divisor,f,c
  6955  001B70  3619               	rlcf	i1___lwmod@divisor+1,f,c
  6956  001B72  2A1A               	incf	i1___lwmod@counter,f,c
  6957  001B74                     i1l2100:
  6958  001B74  AE19               	btfss	i1___lwmod@divisor+1,7,c
  6959  001B76  D7FA               	goto	i1l2098
  6960  001B78                     i1l2102:
  6961  001B78  5018               	movf	i1___lwmod@divisor,w,c
  6962  001B7A  5C16               	subwf	i1___lwmod@dividend,w,c
  6963  001B7C  5019               	movf	i1___lwmod@divisor+1,w,c
  6964  001B7E  5817               	subwfb	i1___lwmod@dividend+1,w,c
  6965  001B80  A0D8               	btfss	status,0,c
  6966  001B82  D004               	goto	i1l2106
  6967  001B84  5018               	movf	i1___lwmod@divisor,w,c
  6968  001B86  5E16               	subwf	i1___lwmod@dividend,f,c
  6969  001B88  5019               	movf	i1___lwmod@divisor+1,w,c
  6970  001B8A  5A17               	subwfb	i1___lwmod@dividend+1,f,c
  6971  001B8C                     i1l2106:
  6972  001B8C  90D8               	bcf	status,0,c
  6973  001B8E  3219               	rrcf	i1___lwmod@divisor+1,f,c
  6974  001B90  3218               	rrcf	i1___lwmod@divisor,f,c
  6975  001B92  2E1A               	decfsz	i1___lwmod@counter,f,c
  6976  001B94  D7F1               	goto	i1l2102
  6977  001B96                     i1l837:
  6978  001B96  C016  F016         	movff	i1___lwmod@dividend,?i1___lwmod
  6979  001B9A  C017  F017         	movff	i1___lwmod@dividend+1,?i1___lwmod+1
  6980  001B9E  0012               	return		;funcret
  6981  001BA0                     __end_ofi1___lwmod:
  6982                           	opt stack 0
  6983                           pclatu	equ	0xFFB
  6984                           pclath	equ	0xFFA
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           prodh	equ	0xFF4
  6990                           prodl	equ	0xFF3
  6991                           intcon	equ	0xFF2
  6992                           intcon2	equ	0xFF1
  6993                           postinc0	equ	0xFEE
  6994                           plusw0	equ	0xFEB
  6995                           fsr0h	equ	0xFEA
  6996                           fsr0l	equ	0xFE9
  6997                           wreg	equ	0xFE8
  6998                           postdec1	equ	0xFE5
  6999                           plusw1	equ	0xFE3
  7000                           fsr1h	equ	0xFE2
  7001                           fsr1l	equ	0xFE1
  7002                           bsr	equ	0xFE0
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           plusw2	equ	0xFDB
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function i1___lwdiv *****************
  7012 ;; Defined at:
  7013 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwdiv.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  dividend        2   14[COMRAM] unsigned int 
  7016 ;;  divisor         2   16[COMRAM] unsigned int 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  __lwdiv         2   18[COMRAM] unsigned int 
  7019 ;;  __lwdiv         1   20[COMRAM] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  2   14[COMRAM] unsigned int 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7029 ;;      Params:         4       0       0       0       0       0       0       0       0
  7030 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7032 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7033 ;;Total ram usage:        7 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    1
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		i1_printf
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text39
  7044  001AC2                     __ptext39:
  7045                           	opt stack 0
  7046  001AC2                     i1___lwdiv:
  7047                           	opt stack 18
  7048                           
  7049                           ;incstack = 0
  7050  001AC2  0E00               	movlw	0
  7051  001AC4  6E14               	movwf	i1___lwdiv@quotient+1,c
  7052  001AC6  0E00               	movlw	0
  7053  001AC8  6E13               	movwf	i1___lwdiv@quotient,c
  7054  001ACA  5011               	movf	i1___lwdiv@divisor,w,c
  7055  001ACC  1012               	iorwf	i1___lwdiv@divisor+1,w,c
  7056  001ACE  B4D8               	btfsc	status,2,c
  7057  001AD0  D01C               	goto	i1l827
  7058  001AD2  0E01               	movlw	1
  7059  001AD4  6E15               	movwf	i1___lwdiv@counter,c
  7060  001AD6  D004               	goto	i1l2080
  7061  001AD8                     i1l2078:
  7062  001AD8  90D8               	bcf	status,0,c
  7063  001ADA  3611               	rlcf	i1___lwdiv@divisor,f,c
  7064  001ADC  3612               	rlcf	i1___lwdiv@divisor+1,f,c
  7065  001ADE  2A15               	incf	i1___lwdiv@counter,f,c
  7066  001AE0                     i1l2080:
  7067  001AE0  AE12               	btfss	i1___lwdiv@divisor+1,7,c
  7068  001AE2  D7FA               	goto	i1l2078
  7069  001AE4                     i1l2082:
  7070  001AE4  90D8               	bcf	status,0,c
  7071  001AE6  3613               	rlcf	i1___lwdiv@quotient,f,c
  7072  001AE8  3614               	rlcf	i1___lwdiv@quotient+1,f,c
  7073  001AEA  5011               	movf	i1___lwdiv@divisor,w,c
  7074  001AEC  5C0F               	subwf	i1___lwdiv@dividend,w,c
  7075  001AEE  5012               	movf	i1___lwdiv@divisor+1,w,c
  7076  001AF0  5810               	subwfb	i1___lwdiv@dividend+1,w,c
  7077  001AF2  A0D8               	btfss	status,0,c
  7078  001AF4  D005               	goto	i1l2090
  7079  001AF6  5011               	movf	i1___lwdiv@divisor,w,c
  7080  001AF8  5E0F               	subwf	i1___lwdiv@dividend,f,c
  7081  001AFA  5012               	movf	i1___lwdiv@divisor+1,w,c
  7082  001AFC  5A10               	subwfb	i1___lwdiv@dividend+1,f,c
  7083  001AFE  8013               	bsf	i1___lwdiv@quotient,0,c
  7084  001B00                     i1l2090:
  7085  001B00  90D8               	bcf	status,0,c
  7086  001B02  3212               	rrcf	i1___lwdiv@divisor+1,f,c
  7087  001B04  3211               	rrcf	i1___lwdiv@divisor,f,c
  7088  001B06  2E15               	decfsz	i1___lwdiv@counter,f,c
  7089  001B08  D7ED               	goto	i1l2082
  7090  001B0A                     i1l827:
  7091  001B0A  C013  F00F         	movff	i1___lwdiv@quotient,?i1___lwdiv
  7092  001B0E  C014  F010         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  7093  001B12  0012               	return		;funcret
  7094  001B14                     __end_ofi1___lwdiv:
  7095                           	opt stack 0
  7096                           pclatu	equ	0xFFB
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           postinc0	equ	0xFEE
  7107                           plusw0	equ	0xFEB
  7108                           fsr0h	equ	0xFEA
  7109                           fsr0l	equ	0xFE9
  7110                           wreg	equ	0xFE8
  7111                           postdec1	equ	0xFE5
  7112                           plusw1	equ	0xFE3
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           bsr	equ	0xFE0
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           plusw2	equ	0xFDB
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _HighISR *****************
  7125 ;; Defined at:
  7126 ;;		line 74 in file "Drivers/TIMER0_Driver.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7142 ;;      Temps:         14       0       0       0       0       0       0       0       0
  7143 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7144 ;;Total ram usage:       14 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		Interrupt level 2
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	intcode
  7154  000008                     __pintcode:
  7155                           	opt stack 0
  7156  000008                     _HighISR:
  7157                           	opt stack 16
  7158                           
  7159                           ;incstack = 0
  7160  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7161  00000A  CFFA F001          	movff	pclath,??_HighISR
  7162  00000E  CFFB F002          	movff	pclatu,??_HighISR+1
  7163  000012  ED45  F00B         	call	int_func,f	;refresh shadow registers
  7164                           pclatu	equ	0xFFB
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon2	equ	0xFF1
  7174                           postinc0	equ	0xFEE
  7175                           plusw0	equ	0xFEB
  7176                           fsr0h	equ	0xFEA
  7177                           fsr0l	equ	0xFE9
  7178                           wreg	equ	0xFE8
  7179                           postdec1	equ	0xFE5
  7180                           plusw1	equ	0xFE3
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           bsr	equ	0xFE0
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           plusw2	equ	0xFDB
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8
  7191                           
  7192                           	psect	intcode_body
  7193  00168A                     __pintcode_body:
  7194                           	opt stack 16
  7195  00168A                     int_func:
  7196                           	opt stack 16
  7197  00168A  0006               	pop		; remove dummy address from shadow register refresh
  7198  00168C  CFE9 F003          	movff	fsr0l,??_HighISR+2
  7199  001690  CFEA F004          	movff	fsr0h,??_HighISR+3
  7200  001694  CFE1 F005          	movff	fsr1l,??_HighISR+4
  7201  001698  CFE2 F006          	movff	fsr1h,??_HighISR+5
  7202  00169C  CFD9 F007          	movff	fsr2l,??_HighISR+6
  7203  0016A0  CFDA F008          	movff	fsr2h,??_HighISR+7
  7204  0016A4  CFF3 F009          	movff	prodl,??_HighISR+8
  7205  0016A8  CFF4 F00A          	movff	prodh,??_HighISR+9
  7206  0016AC  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  7207  0016B0  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  7208  0016B4  CFF8 F00D          	movff	tblptru,??_HighISR+12
  7209  0016B8  CFF5 F00E          	movff	tablat,??_HighISR+13
  7210                           
  7211                           ;TIMER0_Driver.c: 75: if (INTCONbits.TMR0IF) {
  7212  0016BC  A4F2               	btfss	intcon,2,c	;volatile
  7213  0016BE  D008               	goto	i2l279
  7214                           
  7215                           ;TIMER0_Driver.c: 76: TMR0L = 0;
  7216  0016C0  0E00               	movlw	0
  7217  0016C2  6ED6               	movwf	4054,c	;volatile
  7218                           
  7219                           ;TIMER0_Driver.c: 77: TMR0H = 0;
  7220  0016C4  0E00               	movlw	0
  7221  0016C6  6ED7               	movwf	4055,c	;volatile
  7222                           
  7223                           ;TIMER0_Driver.c: 78: INTCONbits.TMR0IF = 0;
  7224  0016C8  94F2               	bcf	intcon,2,c	;volatile
  7225                           
  7226                           ;TIMER0_Driver.c: 79: D_TIMER0_Flag = 1;
  7227  0016CA  0E01               	movlw	1
  7228  0016CC  0100               	movlb	0	; () banked
  7229  0016CE  6FE0               	movwf	_D_TIMER0_Flag& (0+255),b
  7230  0016D0                     i2l279:
  7231  0016D0  C00E  FFF5         	movff	??_HighISR+13,tablat
  7232  0016D4  C00D  FFF8         	movff	??_HighISR+12,tblptru
  7233  0016D8  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  7234  0016DC  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  7235  0016E0  C00A  FFF4         	movff	??_HighISR+9,prodh
  7236  0016E4  C009  FFF3         	movff	??_HighISR+8,prodl
  7237  0016E8  C008  FFDA         	movff	??_HighISR+7,fsr2h
  7238  0016EC  C007  FFD9         	movff	??_HighISR+6,fsr2l
  7239  0016F0  C006  FFE2         	movff	??_HighISR+5,fsr1h
  7240  0016F4  C005  FFE1         	movff	??_HighISR+4,fsr1l
  7241  0016F8  C004  FFEA         	movff	??_HighISR+3,fsr0h
  7242  0016FC  C003  FFE9         	movff	??_HighISR+2,fsr0l
  7243  001700  C002  FFFB         	movff	??_HighISR+1,pclatu
  7244  001704  C001  FFFA         	movff	??_HighISR,pclath
  7245  001708  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7246  00170A  0011               	retfie		f
  7247  00170C                     __end_of_HighISR:
  7248                           	opt stack 0
  7249                           pclatu	equ	0xFFB
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           intcon2	equ	0xFF1
  7259                           postinc0	equ	0xFEE
  7260                           plusw0	equ	0xFEB
  7261                           fsr0h	equ	0xFEA
  7262                           fsr0l	equ	0xFE9
  7263                           wreg	equ	0xFE8
  7264                           postdec1	equ	0xFE5
  7265                           plusw1	equ	0xFE3
  7266                           fsr1h	equ	0xFE2
  7267                           fsr1l	equ	0xFE1
  7268                           bsr	equ	0xFE0
  7269                           indf2	equ	0xFDF
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           plusw2	equ	0xFDB
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           pclatu	equ	0xFFB
  7277                           pclath	equ	0xFFA
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           postinc0	equ	0xFEE
  7287                           plusw0	equ	0xFEB
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           postdec1	equ	0xFE5
  7292                           plusw1	equ	0xFE3
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           bsr	equ	0xFE0
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           plusw2	equ	0xFDB
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304                           	psect	rparam
  7305  0000                     pclatu	equ	0xFFB
  7306                           pclath	equ	0xFFA
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           prodh	equ	0xFF4
  7312                           prodl	equ	0xFF3
  7313                           intcon	equ	0xFF2
  7314                           intcon2	equ	0xFF1
  7315                           postinc0	equ	0xFEE
  7316                           plusw0	equ	0xFEB
  7317                           fsr0h	equ	0xFEA
  7318                           fsr0l	equ	0xFE9
  7319                           wreg	equ	0xFE8
  7320                           postdec1	equ	0xFE5
  7321                           plusw1	equ	0xFE3
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           bsr	equ	0xFE0
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           plusw2	equ	0xFDB
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333                           	psect	temp
  7334  000051                     btemp:
  7335                           	opt stack 0
  7336  000051                     	ds	1
  7337  0000                     int$flags	set	btemp
  7338                           pclatu	equ	0xFFB
  7339                           pclath	equ	0xFFA
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodh	equ	0xFF4
  7345                           prodl	equ	0xFF3
  7346                           intcon	equ	0xFF2
  7347                           intcon2	equ	0xFF1
  7348                           postinc0	equ	0xFEE
  7349                           plusw0	equ	0xFEB
  7350                           fsr0h	equ	0xFEA
  7351                           fsr0l	equ	0xFE9
  7352                           wreg	equ	0xFE8
  7353                           postdec1	equ	0xFE5
  7354                           plusw1	equ	0xFE3
  7355                           fsr1h	equ	0xFE2
  7356                           fsr1l	equ	0xFE1
  7357                           bsr	equ	0xFE0
  7358                           indf2	equ	0xFDF
  7359                           postinc2	equ	0xFDE
  7360                           postdec2	equ	0xFDD
  7361                           plusw2	equ	0xFDB
  7362                           fsr2h	equ	0xFDA
  7363                           fsr2l	equ	0xFD9
  7364                           status	equ	0xFD8


Data Sizes:
    Strings     128
    Constant    18
    Data        10
    BSS         1211
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      80
    BANK0           160    118     138
    BANK1           256      0     102
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_ReadBlock.message	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    ?_D_UART_ReadBlock.command	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    ?_D_UART_ReadBlock.sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer(BIGRAM[1085]), 

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer(BIGRAM[1085]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_22(CODE[3]), STR_20(CODE[3]), STR_17(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_34(CODE[2]), STR_33(CODE[3]), STR_32(CODE[2]), STR_31(CODE[3]), 
		 -> STR_30(CODE[32]), STR_29(CODE[5]), STR_23(CODE[3]), STR_21(CODE[3]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_16(CODE[12]), STR_15(CODE[3]), 
		 -> STR_14(CODE[6]), STR_13(CODE[4]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    msg.message	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    msg.command	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    msg.sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer(BIGRAM[1085]), 

    read.message	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    read.command	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer(BIGRAM[1085]), 

    sp__D_UART_GetDeviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_14(CODE[6]), ROM(CODE[32767]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_21(CODE[3]), 

    D_UART_Write@data	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_34(CODE[2]), STR_32(CODE[2]), STR_30(CODE[32]), STR_19(CODE[3]), 
		 -> STR_16(CODE[12]), STR_14(CODE[6]), ROM(CODE[32767]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_33(CODE[3]), STR_31(CODE[3]), STR_29(CODE[5]), STR_23(CODE[3]), 
		 -> STR_18(CODE[3]), STR_15(CODE[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_14(CODE[6]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_14(CODE[6]), ROM(CODE[32767]), 

    S334$message	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 102
		 -> cm.message(BANK0[50]), D_UART_ReadBlock@cm(BANK0[102]), cm.message(BANK0[50]), D_UART_Read@cm(BANK0[102]), 

    S334$command	PTR const unsigned char  size(2) Largest target is 102
		 -> D_UART_ReadBlock@cm(BANK0[102]), D_UART_Read@cm(BANK0[102]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 102
		 -> cm.command(BANK0[50]), D_UART_ReadBlock@cm(BANK0[102]), cm.command(BANK0[50]), D_UART_Read@cm(BANK0[102]), 

    S334$sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer(BIGRAM[1085]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 1085
		 -> readBuffer.sender(BIGRAM[50]), readBuffer(BIGRAM[1085]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    blockCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _readByte->i1_D_UART_Enable
    _fillDataBuffer->_acknowledge
    _acknowledge->i1_printf
    i1_printf->i1___lwmod
    i1_putch->i1_writeByte
    i1_writeByte->i1_D_UART_Enable
    i1___lwmod->i1___lwdiv

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_handle_message
    _read_inputs->_D_UART_Write
    _handle_message->_D_UART_ReadBlock
    _initialize->_D_UART_Write
    _D_UART_Write->_printf
    _D_UART_Init->___aldiv
    _D_TIMRER0_Init->_D_TIMER0_Enable
    _D_SPI_Init->_D_SPI_Enable
    _D_MCP3201_Enable->_D_SPI_Enable
    _D_UART_WriteInt->_printf
    _printf->___lwmod
    _putch->_writeByte
    _writeByte->_D_UART_Enable
    ___lwmod->___lwdiv
    _D_MCP3201_Read->_convertData

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   22205
                                            116 BANK0      2     2      0
                 _D_UART_BlockLength
                        _D_UART_Read
                   _D_UART_ReadBlock
                      _handle_inputs
                     _handle_message
                         _initialize
                        _read_inputs
 ---------------------------------------------------------------------------------
 (1) _read_inputs                                          0     0      0    3736
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (1) _handle_message                                       6     0      6   13427
                                            110 BANK0      6     0      6
                   _D_MCP3201_Enable
                     _D_MCP3201_Read
                    _D_TIMER0_Enable
                      _D_UART_Enable
               _D_UART_GetDeviceName
                        _D_UART_Read (ARG)
                   _D_UART_ReadBlock (ARG)
                       _D_UART_Write
                    _D_UART_WriteInt
                         _initialize
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1115
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0    4813
                   _D_MCP3201_Enable
                     _D_MCP3201_Init
                        _D_PORT_Init
                    _D_TIMER0_Enable
                     _D_TIMRER0_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         6     1      5    3736
                                             28 BANK0      6     1      5
               _D_UART_GetDeviceName (ARG)
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Init                                          9     4      5     859
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     556
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_TIMRER0_Init                                       4     2      2     108
                                              1 BANK0      4     2      2
                    _D_TIMER0_Enable
 ---------------------------------------------------------------------------------
 (3) _D_TIMER0_Enable                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _D_MCP3201_Init                                       0     0      0      22
                         _D_SPI_Init
 ---------------------------------------------------------------------------------
 (3) _D_SPI_Init                                           0     0      0      22
                       _D_SPI_Enable
 ---------------------------------------------------------------------------------
 (2) _D_MCP3201_Enable                                     1     1      0      44
                                              1 BANK0      1     1      0
                       _D_SPI_Enable
 ---------------------------------------------------------------------------------
 (4) _D_SPI_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    3096
                                             28 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              25    20      5    2924
                                             12 BANK0     16    11      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (5) _writeByte                                            1     1      0      44
                                              1 BANK0      1     1      0
                      _D_UART_Enable
 ---------------------------------------------------------------------------------
 (6) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _D_UART_GetDeviceName                                 3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _D_MCP3201_Read                                       2     0      2     267
                                              5 BANK0      2     0      2
                        _D_SPI_Write
                        _convertData
 ---------------------------------------------------------------------------------
 (3) _convertData                                          5     3      2     245
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _D_SPI_Write                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _handle_inputs                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_UART_ReadBlock                                   110   103      7      69
                                              0 BANK0    110   103      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                        108   102      6      47
                                              0 BANK0    108   102      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_BlockLength                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowISR                                              17    17      0    1728
                                             46 COMRAM    17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (9) _readByte                                             1     1      0      23
                                             15 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (9) _fillDataBuffer                                       3     3      0    1705
                                             43 COMRAM     3     3      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (10) _acknowledge                                         1     1      0    1304
                                             42 COMRAM     1     1      0
                           i1_printf
 ---------------------------------------------------------------------------------
 (11) i1_printf                                           25    20      5    1304
                                             26 COMRAM    16    11      5
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (12) i1_putch                                             1     1      0      66
                                             16 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (13) i1_writeByte                                         1     1      0      44
                                             15 COMRAM     1     1      0
                    i1_D_UART_Enable
 ---------------------------------------------------------------------------------
 (10) i1_D_UART_Enable                                     1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i1___lwmod                                           5     1      4     211
                                             21 COMRAM     5     1      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (12) i1___lwdiv                                           7     3      4     266
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _HighISR                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_UART_BlockLength
   _D_UART_Read
   _D_UART_ReadBlock
   _handle_inputs
   _handle_message
     _D_MCP3201_Enable
       _D_SPI_Enable
     _D_MCP3201_Read
       _D_SPI_Write
       _convertData
     _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_GetDeviceName
     _D_UART_Read (ARG)
     _D_UART_ReadBlock (ARG)
     _D_UART_Write (ARG)
       _D_UART_GetDeviceName (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _D_UART_WriteInt (ARG)
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
     _initialize (ARG)
       _D_MCP3201_Enable
         _D_SPI_Enable
       _D_MCP3201_Init
         _D_SPI_Init
           _D_SPI_Enable
       _D_PORT_Init
       _D_TIMER0_Enable
       _D_TIMRER0_Init
         _D_TIMER0_Enable
       _D_UART_Enable
       _D_UART_Init
         _D_UART_Enable
         ___aldiv
       _D_UART_Write
         _D_UART_GetDeviceName (ARG)
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _writeByte
               _D_UART_Enable
     _strcmp (ARG)
   _initialize
     _D_MCP3201_Enable
       _D_SPI_Enable
     _D_MCP3201_Init
       _D_SPI_Init
         _D_SPI_Enable
     _D_PORT_Init
     _D_TIMER0_Enable
     _D_TIMRER0_Init
       _D_TIMER0_Enable
     _D_UART_Enable
     _D_UART_Init
       _D_UART_Enable
       ___aldiv
     _D_UART_Write
       _D_UART_GetDeviceName (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable
   _read_inputs
     _D_UART_Write
       _D_UART_GetDeviceName (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _writeByte
             _D_UART_Enable

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1___lwmod
           i1___lwdiv (ARG)
         i1_putch
           i1_writeByte
             i1_D_UART_Enable
   _readByte
     i1_D_UART_Enable

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     43D      21       53.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      66       7       39.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     76      8A       5       86.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      50       1       85.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     140      20        0.0%
DATA                 0      0     57D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Jan  1 12:23:15 2017

                  _SSPSTATbits 000FC7                             l18 1D40                             l27 1D20  
                           l86 1D2E                    __CFG_BOR$ON 000000                             bsr 000FE0  
                  __CFG_BORV$3 000000                   _ackCharacter 0049                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                          l222 19E2                            l164 1C80                            l262 1496  
                          l273 1C5A                            l361 1158                            l269 14D0  
                          l357 1108                            l376 1D68                            l399 0BDE  
                          l827 17F8                            l837 19A6                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000           _D_UART_GetDeviceName 1D7A                            prod 000FF3  
                          wreg 000FE8                   __CFG_FOSC$HS 000000                   ?_convertData 0060  
     __size_of_D_TIMER0_Enable 0026            __end_ofi1_writeByte 1D5C                   __CFG_LVP$OFF 000000  
      __size_of_D_MCP3201_Init 0020        __size_of_D_MCP3201_Read 003E                   __CFG_WDT$OFF 000000  
                         l2000 0CD0                           l2002 0CD6                           l2010 0D70  
                         l2004 0D22                           l2012 0D82                           l2014 0D8A  
                         l2016 0D96                           l2200 14C6                           l2040 1204  
                         l2050 1248                           l2034 11E6                           l2204 14D8  
                         l2206 152E                           l2046 1232                           l2062 12AE  
                         l2048 1242                           l2066 12CA                           l2058 129C  
                         l2180 1D02                           l2190 149E                           l2192 14A6  
                         l2194 14AE                           l2362 1AB2                           l2196 14B6  
                         l2356 1A6C                           l2540 1840                           l2612 1608  
                         l2604 15F2                           l2198 14BE                           l2358 1A78  
                         l2630 167C                           l2622 1646                           l1912 1998  
                         l1904 1962                           l2560 1076                           l2544 1870  
                         l1906 196E                           l2570 110C                           l2554 102C  
                         l2538 1838                           l2626 1656                           l1908 1974  
                         l1940 0B80                           l2564 10BC                           l1942 0B88  
                         l2582 1198                           l1960 0C16                           l1944 0B8E  
                         l1936 0B6C                           l2576 115C                           l1884 17A8  
                         l1980 0C74                           l1964 0C32                           l1948 0B98  
                         l2692 14F2                           l1886 17B4                           l1966 0C38  
                         l2694 1522                           l1896 17EA                           l1888 17BA  
                         l1978 0C6E                           l1994 0CAA                           l1996 0CBC  
                         STR_1 088F                           STR_2 088D                           STR_3 0863  
                         STR_4 085F                           STR_5 085B                           STR_6 0886  
                         STR_7 0891                           STR_8 0891                           STR_9 0891  
                         u1701 1B54                           u1711 1A2A                           u1721 1A60  
                         u1911 1638                           u1691 1B1E                           u1931 166C  
                         u1957 147C                           u1967 13B0                           i1l92 1BEC  
                         i1l86 1D52                           i1l94 1C0A                           _baud 0046  
                         _main 15EE                           _read 0040                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0051                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00B4                  D_UART_Read@cm 0066  
                __CFG_IESO$OFF 000000                __end_ofi1_putch 1D92                __end_of_HighISR 170C  
                __CFG_MCLRE$ON 000000                    ?_D_SPI_Init 0001                   ___param_bank 000010  
        D_TIMER0_Enable@enable 0060                 _startCharacter 004D                  __CFG_PLLDIV$5 000000  
              __end_of___aldiv 12DC                          ?_main 0001                          STR_10 0891  
                        STR_11 0868                          STR_20 0883                          STR_21 0883  
                        STR_13 0867                          STR_22 087A                          STR_14 0850  
                        STR_30 0813                          STR_23 087A                          STR_15 087D  
                        STR_31 0877                          STR_32 088B                          STR_24 0871  
                        STR_16 0844                          STR_33 0877                          STR_17 087D  
                        STR_25 0880                          STR_18 087D                          STR_34 0889  
                        STR_26 086B                          STR_27 0880                          STR_19 0874  
                        STR_35 0833                          STR_28 086E                          STR_29 0856  
        ?_D_UART_GetDeviceName 0060                __end_of___lwdiv 1802                          i1l105 08D4  
                        i1l132 0ACA                          i1l139 0B24                          i1l164 1CE0  
                        i1l180 006C                __end_of___lwmod 19B0                          i1l399 0E36  
                        i1l827 1B0A                          i1l837 1B96                          i2l279 16D0  
                        _RCREG 000FAE                          _TMR0H 000FD7                          _TMR0L 000FD6  
         __size_of_acknowledge 0064                          _SPBRG 000FAF                          _PORTA 000F80  
                        _PORTB 000F81                          _PORTC 000F82                  __CFG_USBDIV$1 000000  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
           i1___lwmod@dividend 0016                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                   ?_read_inputs 0001                __end_of_dpowers 080B  
                        _value 00DE                          _putch 1D6C                          main@i 00D4  
              i1writeByte@data 0010                          tablat 000FF5                   ?_D_UART_Init 006E  
                 ?_D_UART_Read 0060                          plusw0 000FEB                          plusw1 000FE3  
                        plusw2 000FDB                          status 000FD8             D_SPI_Enable@enable 0060  
                 ?_D_PORT_Init 0001             __size_ofi1___lwdiv 0052             __size_ofi1___lwmod 0042  
                _stopCharacter 004F               __end_ofi1_printf 0FDC                     i1printf@ap 0024  
              __initialization 170C               ??_D_TIMRER0_Init 0063               _D_UART_Init$2161 0073  
                 ?_D_SPI_Write 0001                   __end_of_main 168A       __size_ofi1_D_UART_Enable 0020  
                       ??_main 00D4                    i1_writeByte 1D4A                  __activetblptr 000002  
             _D_UART_ReadBlock 1A0E                __CFG_CCP2MX$OFF 000000            __size_of_D_SPI_Init 0020  
                       _ADCON1 000FC1       __end_of_D_MCP3201_Enable 1D0A                         ?_putch 0001  
                       i1l2100 1B74                         i1l2102 1B78                         i1l2106 1B8C  
                       i1l2300 0F06                         i1l2302 0F4A                         i1l2310 0FA0  
                       i1l2080 1AE0                         i1l2312 0FA6                         i1l2240 0DE8  
                       i1l2400 08DC                         i1l2090 1B00                         i1l2082 1AE4  
                       i1l2242 0DEC                         i1l2234 0DD2                         i1l2314 0FAE  
                       i1l2308 0F90                         i1l2420 0960                         i1l2078 1AD8  
                       i1l2262 0E7E                         i1l2246 0DF4                         i1l2238 0DE2  
                       i1l2414 0938                         i1l2406 0904                         i1l2502 0B2C  
                       i1l2264 0E82                         i1l2098 1B6C                         i1l2258 0E64  
                       i1l2450 0A20                         i1l2442 09F6                         i1l2434 09BC  
                       i1l2276 0EAE                         i1l2292 0EDE                         i1l2460 0A66  
                       i1l2436 09D0                         i1l2428 0994                         i1l2278 0EB2  
                       i1l2294 0EEE                         i1l2390 0898                         i1l2472 0AA2  
                       i1l2464 0A7C                         i1l2298 0F00                         i1l2490 0AFC  
                       i1l2482 0AD2                         i1l2468 0A8C                         i1l2498 0B16  
                    ??i1_putch 0011                      ??_HighISR 0001              ??_D_TIMER0_Enable 0060  
                       _SSPBUF 000FC9                    readByte@dum 0010                         _LowISR 0018  
               __CFG_XINST$OFF 000000                      ??___aldiv 0068                         _comMes 0100  
                    ??___lwdiv 0064                      ??___lwmod 006B               __end_of_readByte 1C10  
                       clear_0 174C                         clear_1 175E                         clear_2 176A  
                       clear_3 1776         ??_D_UART_GetDeviceName 0063                         _printf 0B5E  
   __end_of_D_UART_BlockLength 1DA2       __size_of_D_UART_WriteInt 00E0                         _strcmp 1A6A  
            __end_ofi1___lwdiv 1B14                   __pdataCOMRAM 0049              __end_ofi1___lwmod 1BA0  
        D_UART_Init@interrupts 0072                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                  ?_D_UART_Write 007C  
              D_UART_Init@baud 0070                 _D_MCP3201_Init 1C8C                 _D_MCP3201_Read 1BA0  
              D_UART_Init@name 006E           __size_of_convertData 005E                     __accesstop 0060  
      __end_of__initialization 177C                __CFG_PBADEN$OFF 000000                  ___rparam_used 000001  
                ?_D_SPI_Enable 0001                    i1printf@idx 0023                    i1printf@val 0028  
               __pcstackCOMRAM 0001                   __pidataBANK0 1DA2                    i1putch@data 0011  
                __end_of_putch 1D7A               _messageCharacter 00E8         __size_of_D_UART_Enable 0026  
       __end_of_D_MCP3201_Init 1CAC         __end_of_D_MCP3201_Read 1BDE              ??i1_D_UART_Enable 000F  
               ??_D_UART_Write 0081                      ?i1_printf 001B                        ??_putch 0062  
                   __pbssBANK0 00D6                     __pbssBANK1 0100           __size_of_read_inputs 0076  
        __end_of_handle_inputs 1D6C           __size_of_D_UART_Init 00AA           __size_of_D_UART_Read 004A  
               ??_D_SPI_Enable 0060                        ?_LowISR 0001                   ??_D_SPI_Init 0061  
         __size_of_D_PORT_Init 0030                fillDataBuffer@i 002D                     _deviceName 00E5  
         __size_of_D_SPI_Write 0012                        ?_printf 006C                        ?_strcmp 0060  
                _D_TIMER0_Flag 00E0                     _isDoorOpen 00E2                ?_D_MCP3201_Init 0001  
              ?_D_MCP3201_Read 0065                     ??i1_printf 0020        __size_of_fillDataBuffer 02CA  
          D_UART_Enable@enable 0060        __size_of_handle_message 01E6              ??_D_UART_WriteInt 0080  
               _blockCharacter 004B             __end_of_D_SPI_Init 1CCC                __CFG_VREGEN$OFF 000000  
                      i1_putch 1D88                        _HighISR 0008                      ?_readByte 0001  
           __size_of_writeByte 0014                  _D_UART_Enable 1C66       __end_of_D_UART_ReadBlock 1A6A  
                      __Hparam 0000                        __Lparam 0000                __size_of_LowISR 009C  
                   _readBuffer 0166                        ___aldiv 11C2                        ___lwdiv 178A  
                      ___lwmod 194E                   __psmallconst 0800              handle_message@msg 00CE  
              __CFG_STVREN$OFF 000000                  ??_acknowledge 002B                        __pcinit 170C  
                      __ramtop 0800                     _initialize 1878                        __ptext0 15EE  
                      __ptext1 1802                        __ptext2 0FDC                        __ptext3 1A6A  
                      __ptext4 1878                        __ptext5 13BC                        __ptext6 1544  
                      __ptext7 11C2                        __ptext8 1488                        __ptext9 1C40  
              __size_of_printf 026A                      _T0CONbits 000FD5                   ?i1_writeByte 0001  
              __size_of_strcmp 0058              __end_of_hexpowers 0813                        _lsbBits 00E3  
                      _dpowers 0801              i1___lwdiv@divisor 0011                        _msbBits 00E4  
            i1___lwdiv@counter 0015                _D_TIMER0_Enable 1C40               ___aldiv@dividend 0060  
               __pintcode_body 168A           end_of_initialization 177C              ?_D_MCP3201_Enable 0001  
                   ??_readByte 0010                  __Lmediumconst 0000                        int_func 168A  
           ??_D_MCP3201_Enable 0061                 ?_D_UART_Enable 0001           __end_of_D_UART_Write 1488  
                    _RCSTAbits 000FAB                        printf@c 007B                        printf@f 006C  
             ___aldiv@quotient 006A                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                        strcmp@r 0065  
                    _PORTBbits 000F81              __end_of_writeByte 1D38           __end_of_D_SPI_Enable 1D24  
                    _TRISBbits 000F93                      _TRISCbits 000F94            __end_of_acknowledge 194E  
                    i1___lwdiv 1AC2                      i1___lwmod 1B5E         D_TIMRER0_Init@prescale 0061  
           _D_UART_BlockLength 1D9A                      _TXSTAbits 000FAC                     main@length 00D5  
                 i1printf@flag 0027            ?_D_UART_BlockLength 0001                   i1printf@prec 0026  
               __end_of_LowISR 00B4                i1_D_UART_Enable 1CCC        __end_of_D_TIMER0_Enable 1C66  
                  _BAUDCONbits 000FB8                  __pidataCOMRAM 1D92                    ?_initialize 0001  
            i1___lwmod@divisor 0018              i1___lwmod@counter 001A                 __end_of_printf 0DC8  
__size_of_D_UART_GetDeviceName 000E        __size_of_D_TIMRER0_Init 00BC           ??_D_UART_BlockLength 0060  
               __end_of_strcmp 1AC2            start_initialization 170C                 _fillDataBuffer 0894  
                ??_convertData 0062                      i1printf@c 002A                      i1printf@f 001B  
               _handle_message 0FDC                     ?i1___lwdiv 000F                     ?i1___lwmod 0016  
            __size_ofi1_printf 0214                _D_UART_ReadFlag 00E1                ??_D_UART_Enable 0060  
                     ??_LowISR 002F                    __pdataBANK0 00E8               __CFG_LPT1OSC$OFF 000000  
             ??_D_MCP3201_Init 0061               ??_D_MCP3201_Read 0067                _D_UART_WriteInt 12DC  
                  _acknowledge 18EA               D_UART_Write@data 007E                       ??_printf 0071  
              convertData@high 0064                       ??_strcmp 0064         __end_of_fillDataBuffer 0B5E  
                  __pbssBIGRAM 0166         __end_of_handle_message 11C2                    __pbssCOMRAM 0040  
         __size_ofi1_writeByte 0012                  __pcstackBANK0 0060                  ??_read_inputs 0082  
                ??_D_UART_Init 0073                  ??_D_UART_Read 0066            __end_of_convertData 1A0E  
                  _analogValue 00DC                       ?i1_putch 0001                       ?_HighISR 0001  
        __size_of_D_UART_Write 00CC                  ??_D_PORT_Init 0060            __size_of_initialize 0072  
      __end_ofi1_D_UART_Enable 1CEC                      __pnvBANK0 00E5              __size_of_readByte 0032  
            ?_D_UART_ReadBlock 0060               ___lwdiv@dividend 0060                  ??_D_SPI_Write 0060  
                    __pintcode 0008                       ?___aldiv 0060             ??_D_UART_ReadBlock 0067  
                     ?___lwdiv 0060                       ?___lwmod 0067                    _blockLength 0047  
                  __pintcodelo 0018          __size_of_D_SPI_Enable 001A               ?_D_TIMER0_Enable 0001  
                    _bufferCnt 0048             fillDataBuffer@data 002E         __size_of_handle_inputs 0010  
              ?_fillDataBuffer 0001                    __smallconst 0800                ?_handle_message 00CE  
                 _D_UART_Write 13BC                      _hexpowers 080B               ___lwdiv@quotient 0064  
                  ??i1___lwdiv 0013                    ??i1___lwmod 001A                 __size_of_putch 000E  
              ___aldiv@divisor 0064                ___aldiv@counter 0068            __end_of_read_inputs 1878  
                     _LATBbits 000F8A                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i1u163_21 0A54                   _D_SPI_Enable 1D0A                       i1u197_27 1BF8  
          __end_of_D_UART_Init 15EE            __end_of_D_UART_Read 1B5E                       _PIR1bits 000F9E  
      __end_of_D_UART_WriteInt 13BC                       _RCONbits 000FD0               __CFG_WDTPS$32768 000000  
       D_UART_WriteInt@command 007C            __end_of_D_PORT_Init 1C40      __size_of_D_MCP3201_Enable 001E  
          __end_of_D_SPI_Write 1D4A                 _D_TIMRER0_Init 1488                     printf@flag 0078  
                   printf@prec 0077                       i1_printf 0DC8                    _convertData 19B0  
                    _writeByte 1D24                    _INTCON2bits 000FF1                      copy_data0 1738  
                _handle_inputs 1D5C               __size_ofi1_putch 000A               __size_of_HighISR 1704  
             ?i1_D_UART_Enable 0001                       __Hrparam 0000                       __Lrparam 0000  
               convertData@low 0060               __size_of___aldiv 011A               __size_of___lwdiv 0078  
             __size_of___lwmod 0062         __end_of_D_TIMRER0_Init 1544                   ??_initialize 0082  
       D_MCP3201_Enable@enable 0061          i1D_UART_Enable@enable 000F                ___lwdiv@divisor 0062  
              ___lwdiv@counter 0066                       __ptext10 1C10                       __ptext11 1C8C  
                     __ptext20 194E                       __ptext12 1CAC                       __ptext21 178A  
                     __ptext13 1CEC                       __ptext22 1D7A                       __ptext14 1D0A  
                     __ptext31 1BDE                       __ptext23 1BA0                       __ptext15 12DC  
                     __ptext32 0894                       __ptext24 19B0                       __ptext16 0B5E  
                     __ptext33 18EA                       __ptext25 1D38                       __ptext17 1D6C  
                     __ptext34 0DC8                       __ptext26 1D5C                       __ptext18 1D24  
                     __ptext35 1D88                       __ptext27 1A0E                       __ptext19 1C66  
                     __ptext36 1D4A                       __ptext28 1B14                       __ptext37 1CCC  
                     __ptext29 1D9A                       __ptext38 1B5E                       __ptext39 1AC2  
                  _read_inputs 1802                     ?_writeByte 0001            D_UART_ReadBlock@cnt 0067  
           i1___lwdiv@dividend 000F                 ?_handle_inputs 0001                    _D_UART_Init 1544  
                  _D_UART_Read 1B14                       _readData 00D6                       _readByte 1BDE  
                __size_of_main 009C   __end_of_D_UART_GetDeviceName 1D88                    _D_PORT_Init 1C10  
           __end_of_initialize 18EA               ?_D_UART_WriteInt 007C                    _D_SPI_Write 1D38  
                     int$flags 0051                      printf@idx 0074                      printf@val 0079  
              ?_D_TIMRER0_Init 0061                   ?_acknowledge 0001          __CFG_CPUDIV$OSC1_PLL2 000000  
           i1___lwdiv@quotient 0013                      putch@data 0062                     _INTCONbits 000FF2  
  __size_of_D_UART_BlockLength 0008                       intlevel1 0000                       intlevel2 0000  
             ___lwmod@dividend 0067             D_UART_ReadBlock@cm 0068          __end_of_D_UART_Enable 1C8C  
                   _D_SPI_Init 1CAC                       printf@ap 0075               ??_fillDataBuffer 002C  
             _D_MCP3201_Enable 1CEC            D_UART_Write@command 007C               ??_handle_message 00D4  
                ??i1_writeByte 0010                       strcmp@s1 0060                       strcmp@s2 0062  
              ___lwmod@divisor 0069      __size_of_D_UART_ReadBlock 005C                D_SPI_Write@data 0060  
                writeByte@data 0061                ___lwmod@counter 006B                   ___aldiv@sign 0069  
          D_UART_WriteInt@data 007E                    _SSPCON1bits 000FC6                    ??_writeByte 0061  
              ??_handle_inputs 0060  
